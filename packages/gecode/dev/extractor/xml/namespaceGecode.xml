<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceGecode" kind="namespace">
    <compoundname>Gecode</compoundname>
    <innerclass refid="classGecode_1_1BaseOptions" prot="public">Gecode::BaseOptions</innerclass>
    <innerclass refid="classGecode_1_1Options" prot="public">Gecode::Options</innerclass>
    <innerclass refid="classGecode_1_1SizeOptions" prot="public">Gecode::SizeOptions</innerclass>
    <innerclass refid="classGecode_1_1InstanceOptions" prot="public">Gecode::InstanceOptions</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01VarArgArray_3_01FloatVar_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; VarArgArray&lt; FloatVar &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01VarArray_3_01FloatVar_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; VarArray&lt; FloatVar &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01PrimArgArray_3_01FloatVal_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; PrimArgArray&lt; FloatVal &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01FloatVarArray_01_4" prot="public">Gecode::ArrayTraits&lt; FloatVarArray &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01FloatVarArgs_01_4" prot="public">Gecode::ArrayTraits&lt; FloatVarArgs &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01FloatValArgs_01_4" prot="public">Gecode::ArrayTraits&lt; FloatValArgs &gt;</innerclass>
    <innerclass refid="classGecode_1_1BranchTraits_3_01FloatVar_01_4" prot="public">Gecode::BranchTraits&lt; FloatVar &gt;</innerclass>
    <innerclass refid="classGecode_1_1FloatVal" prot="public">Gecode::FloatVal</innerclass>
    <innerclass refid="classGecode_1_1FloatVar" prot="public">Gecode::FloatVar</innerclass>
    <innerclass refid="classGecode_1_1FloatValArgs" prot="public">Gecode::FloatValArgs</innerclass>
    <innerclass refid="classGecode_1_1FloatVarArgs" prot="public">Gecode::FloatVarArgs</innerclass>
    <innerclass refid="classGecode_1_1FloatVarArray" prot="public">Gecode::FloatVarArray</innerclass>
    <innerclass refid="classGecode_1_1FloatNumBranch" prot="public">Gecode::FloatNumBranch</innerclass>
    <innerclass refid="classGecode_1_1FloatAFC" prot="public">Gecode::FloatAFC</innerclass>
    <innerclass refid="classGecode_1_1FloatActivity" prot="public">Gecode::FloatActivity</innerclass>
    <innerclass refid="classGecode_1_1FloatVarBranch" prot="public">Gecode::FloatVarBranch</innerclass>
    <innerclass refid="classGecode_1_1FloatValBranch" prot="public">Gecode::FloatValBranch</innerclass>
    <innerclass refid="classGecode_1_1FloatAssign" prot="public">Gecode::FloatAssign</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01VarArgArray_3_01IntVar_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; VarArgArray&lt; IntVar &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01VarArray_3_01IntVar_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; VarArray&lt; IntVar &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01VarArgArray_3_01BoolVar_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; VarArgArray&lt; BoolVar &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01VarArray_3_01BoolVar_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; VarArray&lt; BoolVar &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01PrimArgArray_3_01int_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; PrimArgArray&lt; int &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01ArgArray_3_01IntSet_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; ArgArray&lt; IntSet &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01IntVarArray_01_4" prot="public">Gecode::ArrayTraits&lt; IntVarArray &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01IntVarArgs_01_4" prot="public">Gecode::ArrayTraits&lt; IntVarArgs &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01IntArgs_01_4" prot="public">Gecode::ArrayTraits&lt; IntArgs &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01BoolVarArray_01_4" prot="public">Gecode::ArrayTraits&lt; BoolVarArray &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01BoolVarArgs_01_4" prot="public">Gecode::ArrayTraits&lt; BoolVarArgs &gt;</innerclass>
    <innerclass refid="classGecode_1_1BranchTraits_3_01IntVar_01_4" prot="public">Gecode::BranchTraits&lt; IntVar &gt;</innerclass>
    <innerclass refid="classGecode_1_1BranchTraits_3_01BoolVar_01_4" prot="public">Gecode::BranchTraits&lt; BoolVar &gt;</innerclass>
    <innerclass refid="classGecode_1_1IntSetInit" prot="public">Gecode::IntSetInit</innerclass>
    <innerclass refid="classGecode_1_1IntSetInit_3_01IntSet_01_4" prot="public">Gecode::IntSetInit&lt; IntSet &gt;</innerclass>
    <innerclass refid="classGecode_1_1IntSetInit_3_01IntArgs_01_4" prot="public">Gecode::IntSetInit&lt; IntArgs &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01ArgArray_3_01VarImpBase_01_5_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; ArgArray&lt; VarImpBase * &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01LiteralArgs_01_4" prot="public">Gecode::ArrayTraits&lt; LiteralArgs &gt;</innerclass>
    <innerclass refid="classGecode_1_1ViewArray_3_01Int_1_1Linear_1_1NoView_01_4" prot="public">Gecode::ViewArray&lt; Int::Linear::NoView &gt;</innerclass>
    <innerclass refid="classGecode_1_1IntSet" prot="public">Gecode::IntSet</innerclass>
    <innerclass refid="classGecode_1_1IntSetRanges" prot="public">Gecode::IntSetRanges</innerclass>
    <innerclass refid="classGecode_1_1IntSetValues" prot="public">Gecode::IntSetValues</innerclass>
    <innerclass refid="classGecode_1_1IntVar" prot="public">Gecode::IntVar</innerclass>
    <innerclass refid="classGecode_1_1IntVarRanges" prot="public">Gecode::IntVarRanges</innerclass>
    <innerclass refid="classGecode_1_1IntVarValues" prot="public">Gecode::IntVarValues</innerclass>
    <innerclass refid="classGecode_1_1BoolVar" prot="public">Gecode::BoolVar</innerclass>
    <innerclass refid="classGecode_1_1IntArgs" prot="public">Gecode::IntArgs</innerclass>
    <innerclass refid="classGecode_1_1IntVarArgs" prot="public">Gecode::IntVarArgs</innerclass>
    <innerclass refid="classGecode_1_1BoolVarArgs" prot="public">Gecode::BoolVarArgs</innerclass>
    <innerclass refid="classGecode_1_1IntVarArray" prot="public">Gecode::IntVarArray</innerclass>
    <innerclass refid="classGecode_1_1BoolVarArray" prot="public">Gecode::BoolVarArray</innerclass>
    <innerclass refid="classGecode_1_1Reify" prot="public">Gecode::Reify</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01PrimArgArray_3_01TaskType_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; PrimArgArray&lt; TaskType &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1DFA" prot="public">Gecode::DFA</innerclass>
    <innerclass refid="classGecode_1_1TupleSet" prot="public">Gecode::TupleSet</innerclass>
    <innerclass refid="classGecode_1_1IntAFC" prot="public">Gecode::IntAFC</innerclass>
    <innerclass refid="classGecode_1_1IntActivity" prot="public">Gecode::IntActivity</innerclass>
    <innerclass refid="classGecode_1_1IntVarBranch" prot="public">Gecode::IntVarBranch</innerclass>
    <innerclass refid="classGecode_1_1IntValBranch" prot="public">Gecode::IntValBranch</innerclass>
    <innerclass refid="classGecode_1_1IntAssign" prot="public">Gecode::IntAssign</innerclass>
    <innerclass refid="classGecode_1_1SymmetryHandle" prot="public">Gecode::SymmetryHandle</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01ArgArray_3_01SymmetryHandle_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; ArgArray&lt; SymmetryHandle &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1Symmetries" prot="public">Gecode::Symmetries</innerclass>
    <innerclass refid="classGecode_1_1Activity" prot="public">Gecode::Activity</innerclass>
    <innerclass refid="classGecode_1_1ViewAdvisor" prot="public">Gecode::ViewAdvisor</innerclass>
    <innerclass refid="classGecode_1_1AFC" prot="public">Gecode::AFC</innerclass>
    <innerclass refid="structGecode_1_1space__allocator" prot="public">Gecode::space_allocator</innerclass>
    <innerclass refid="structGecode_1_1space__allocator_3_01void_01_4" prot="public">Gecode::space_allocator&lt; void &gt;</innerclass>
    <innerclass refid="structGecode_1_1region__allocator" prot="public">Gecode::region_allocator</innerclass>
    <innerclass refid="structGecode_1_1region__allocator_3_01void_01_4" prot="public">Gecode::region_allocator&lt; void &gt;</innerclass>
    <innerclass refid="classGecode_1_1Archive" prot="public">Gecode::Archive</innerclass>
    <innerclass refid="classGecode_1_1VarArray" prot="public">Gecode::VarArray</innerclass>
    <innerclass refid="classGecode_1_1VarArgArray" prot="public">Gecode::VarArgArray</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits" prot="public">Gecode::ArrayTraits</innerclass>
    <innerclass refid="classGecode_1_1ViewArray" prot="public">Gecode::ViewArray</innerclass>
    <innerclass refid="classGecode_1_1ArgArrayBase" prot="public">Gecode::ArgArrayBase</innerclass>
    <innerclass refid="classGecode_1_1PrimArgArray" prot="public">Gecode::PrimArgArray</innerclass>
    <innerclass refid="classGecode_1_1ArgArray" prot="public">Gecode::ArgArray</innerclass>
    <innerclass refid="classGecode_1_1TieBreak" prot="public">Gecode::TieBreak</innerclass>
    <innerclass refid="classGecode_1_1BranchTraits" prot="public">Gecode::BranchTraits</innerclass>
    <innerclass refid="classGecode_1_1ValBranch" prot="public">Gecode::ValBranch</innerclass>
    <innerclass refid="classGecode_1_1VarBranch" prot="public">Gecode::VarBranch</innerclass>
    <innerclass refid="classGecode_1_1MeritBase" prot="public">Gecode::MeritBase</innerclass>
    <innerclass refid="classGecode_1_1MeritFunction" prot="public">Gecode::MeritFunction</innerclass>
    <innerclass refid="classGecode_1_1MeritDegree" prot="public">Gecode::MeritDegree</innerclass>
    <innerclass refid="classGecode_1_1MeritAFC" prot="public">Gecode::MeritAFC</innerclass>
    <innerclass refid="classGecode_1_1MeritActivity" prot="public">Gecode::MeritActivity</innerclass>
    <innerclass refid="classGecode_1_1ValCommit" prot="public">Gecode::ValCommit</innerclass>
    <innerclass refid="classGecode_1_1ValCommitFunction" prot="public">Gecode::ValCommitFunction</innerclass>
    <innerclass refid="classGecode_1_1ValSelCommitBase" prot="public">Gecode::ValSelCommitBase</innerclass>
    <innerclass refid="classGecode_1_1ValSelCommit" prot="public">Gecode::ValSelCommit</innerclass>
    <innerclass refid="classGecode_1_1ValSel" prot="public">Gecode::ValSel</innerclass>
    <innerclass refid="classGecode_1_1ValSelFunction" prot="public">Gecode::ValSelFunction</innerclass>
    <innerclass refid="classGecode_1_1ViewSel" prot="public">Gecode::ViewSel</innerclass>
    <innerclass refid="classGecode_1_1ViewSelNone" prot="public">Gecode::ViewSelNone</innerclass>
    <innerclass refid="classGecode_1_1ViewSelRnd" prot="public">Gecode::ViewSelRnd</innerclass>
    <innerclass refid="classGecode_1_1ChooseMin" prot="public">Gecode::ChooseMin</innerclass>
    <innerclass refid="classGecode_1_1ChooseMax" prot="public">Gecode::ChooseMax</innerclass>
    <innerclass refid="classGecode_1_1ViewSelChoose" prot="public">Gecode::ViewSelChoose</innerclass>
    <innerclass refid="classGecode_1_1ViewSelChooseTbl" prot="public">Gecode::ViewSelChooseTbl</innerclass>
    <innerclass refid="classGecode_1_1ViewSelMin" prot="public">Gecode::ViewSelMin</innerclass>
    <innerclass refid="classGecode_1_1ViewSelMinTbl" prot="public">Gecode::ViewSelMinTbl</innerclass>
    <innerclass refid="classGecode_1_1ViewSelMax" prot="public">Gecode::ViewSelMax</innerclass>
    <innerclass refid="classGecode_1_1ViewSelMaxTbl" prot="public">Gecode::ViewSelMaxTbl</innerclass>
    <innerclass refid="classGecode_1_1PosValChoice" prot="public">Gecode::PosValChoice</innerclass>
    <innerclass refid="classGecode_1_1ViewValNGL" prot="public">Gecode::ViewValNGL</innerclass>
    <innerclass refid="classGecode_1_1ViewValBrancher" prot="public">Gecode::ViewValBrancher</innerclass>
    <innerclass refid="classGecode_1_1Pos" prot="public">Gecode::Pos</innerclass>
    <innerclass refid="classGecode_1_1PosChoice" prot="public">Gecode::PosChoice</innerclass>
    <innerclass refid="classGecode_1_1ViewBrancher" prot="public">Gecode::ViewBrancher</innerclass>
    <innerclass refid="classGecode_1_1SharedHandle" prot="public">Gecode::SharedHandle</innerclass>
    <innerclass refid="classGecode_1_1NoIdxVarImpConf" prot="public">Gecode::NoIdxVarImpConf</innerclass>
    <innerclass refid="classGecode_1_1Council" prot="public">Gecode::Council</innerclass>
    <innerclass refid="classGecode_1_1Advisors" prot="public">Gecode::Advisors</innerclass>
    <innerclass refid="classGecode_1_1VarImp" prot="public">Gecode::VarImp</innerclass>
    <innerclass refid="classGecode_1_1VarImpBase" prot="public">Gecode::VarImpBase</innerclass>
    <innerclass refid="classGecode_1_1VarImpDisposerBase" prot="public">Gecode::VarImpDisposerBase</innerclass>
    <innerclass refid="classGecode_1_1VarImpDisposer" prot="public">Gecode::VarImpDisposer</innerclass>
    <innerclass refid="classGecode_1_1Delta" prot="public">Gecode::Delta</innerclass>
    <innerclass refid="classGecode_1_1PropCost" prot="public">Gecode::PropCost</innerclass>
    <innerclass refid="classGecode_1_1ActorLink" prot="public">Gecode::ActorLink</innerclass>
    <innerclass refid="classGecode_1_1Actor" prot="public">Gecode::Actor</innerclass>
    <innerclass refid="classGecode_1_1Home" prot="public">Gecode::Home</innerclass>
    <innerclass refid="classGecode_1_1Propagator" prot="public">Gecode::Propagator</innerclass>
    <innerclass refid="classGecode_1_1Advisor" prot="public">Gecode::Advisor</innerclass>
    <innerclass refid="classGecode_1_1NGL" prot="public">Gecode::NGL</innerclass>
    <innerclass refid="classGecode_1_1Choice" prot="public">Gecode::Choice</innerclass>
    <innerclass refid="classGecode_1_1Brancher" prot="public">Gecode::Brancher</innerclass>
    <innerclass refid="classGecode_1_1BrancherHandle" prot="public">Gecode::BrancherHandle</innerclass>
    <innerclass refid="classGecode_1_1LocalObject" prot="public">Gecode::LocalObject</innerclass>
    <innerclass refid="classGecode_1_1LocalHandle" prot="public">Gecode::LocalHandle</innerclass>
    <innerclass refid="classGecode_1_1NoGoods" prot="public">Gecode::NoGoods</innerclass>
    <innerclass refid="classGecode_1_1StatusStatistics" prot="public">Gecode::StatusStatistics</innerclass>
    <innerclass refid="classGecode_1_1CloneStatistics" prot="public">Gecode::CloneStatistics</innerclass>
    <innerclass refid="classGecode_1_1CommitStatistics" prot="public">Gecode::CommitStatistics</innerclass>
    <innerclass refid="classGecode_1_1Space" prot="public">Gecode::Space</innerclass>
    <innerclass refid="classGecode_1_1SpaceFailed" prot="public">Gecode::SpaceFailed</innerclass>
    <innerclass refid="classGecode_1_1SpaceNotStable" prot="public">Gecode::SpaceNotStable</innerclass>
    <innerclass refid="classGecode_1_1SpaceNotCloned" prot="public">Gecode::SpaceNotCloned</innerclass>
    <innerclass refid="classGecode_1_1SpaceNoBrancher" prot="public">Gecode::SpaceNoBrancher</innerclass>
    <innerclass refid="classGecode_1_1SpaceIllegalAlternative" prot="public">Gecode::SpaceIllegalAlternative</innerclass>
    <innerclass refid="classGecode_1_1TooManyBranchers" prot="public">Gecode::TooManyBranchers</innerclass>
    <innerclass refid="classGecode_1_1IllegalDecay" prot="public">Gecode::IllegalDecay</innerclass>
    <innerclass refid="classGecode_1_1UninitializedAFC" prot="public">Gecode::UninitializedAFC</innerclass>
    <innerclass refid="classGecode_1_1UninitializedActivity" prot="public">Gecode::UninitializedActivity</innerclass>
    <innerclass refid="classGecode_1_1UninitializedRnd" prot="public">Gecode::UninitializedRnd</innerclass>
    <innerclass refid="classGecode_1_1AFCWrongArity" prot="public">Gecode::AFCWrongArity</innerclass>
    <innerclass refid="classGecode_1_1ActivityWrongArity" prot="public">Gecode::ActivityWrongArity</innerclass>
    <innerclass refid="classGecode_1_1GlobalAFC" prot="public">Gecode::GlobalAFC</innerclass>
    <innerclass refid="classGecode_1_1MemoryChunk" prot="public">Gecode::MemoryChunk</innerclass>
    <innerclass refid="classGecode_1_1HeapChunk" prot="public">Gecode::HeapChunk</innerclass>
    <innerclass refid="classGecode_1_1SharedMemory" prot="public">Gecode::SharedMemory</innerclass>
    <innerclass refid="classGecode_1_1FreeList" prot="public">Gecode::FreeList</innerclass>
    <innerclass refid="classGecode_1_1MemoryManager" prot="public">Gecode::MemoryManager</innerclass>
    <innerclass refid="classGecode_1_1UnaryPropagator" prot="public">Gecode::UnaryPropagator</innerclass>
    <innerclass refid="classGecode_1_1BinaryPropagator" prot="public">Gecode::BinaryPropagator</innerclass>
    <innerclass refid="classGecode_1_1TernaryPropagator" prot="public">Gecode::TernaryPropagator</innerclass>
    <innerclass refid="classGecode_1_1NaryPropagator" prot="public">Gecode::NaryPropagator</innerclass>
    <innerclass refid="classGecode_1_1NaryOnePropagator" prot="public">Gecode::NaryOnePropagator</innerclass>
    <innerclass refid="classGecode_1_1MixBinaryPropagator" prot="public">Gecode::MixBinaryPropagator</innerclass>
    <innerclass refid="classGecode_1_1MixTernaryPropagator" prot="public">Gecode::MixTernaryPropagator</innerclass>
    <innerclass refid="classGecode_1_1MixNaryOnePropagator" prot="public">Gecode::MixNaryOnePropagator</innerclass>
    <innerclass refid="classGecode_1_1RangeList" prot="public">Gecode::RangeList</innerclass>
    <innerclass refid="classGecode_1_1Region" prot="public">Gecode::Region</innerclass>
    <innerclass refid="classGecode_1_1Rnd" prot="public">Gecode::Rnd</innerclass>
    <innerclass refid="classGecode_1_1SharedArray" prot="public">Gecode::SharedArray</innerclass>
    <innerclass refid="classGecode_1_1AllVarConf" prot="public">Gecode::AllVarConf</innerclass>
    <innerclass refid="classGecode_1_1Var" prot="public">Gecode::Var</innerclass>
    <innerclass refid="classGecode_1_1VarImpVar" prot="public">Gecode::VarImpVar</innerclass>
    <innerclass refid="classGecode_1_1ConstView" prot="public">Gecode::ConstView</innerclass>
    <innerclass refid="classGecode_1_1VarImpView" prot="public">Gecode::VarImpView</innerclass>
    <innerclass refid="classGecode_1_1DerivedView" prot="public">Gecode::DerivedView</innerclass>
    <innerclass refid="classGecode_1_1NonLinIntExpr" prot="public">Gecode::NonLinIntExpr</innerclass>
    <innerclass refid="classGecode_1_1LinIntExpr" prot="public">Gecode::LinIntExpr</innerclass>
    <innerclass refid="classGecode_1_1LinIntRel" prot="public">Gecode::LinIntRel</innerclass>
    <innerclass refid="classGecode_1_1BoolExpr" prot="public">Gecode::BoolExpr</innerclass>
    <innerclass refid="classGecode_1_1REG" prot="public">Gecode::REG</innerclass>
    <innerclass refid="classGecode_1_1Matrix" prot="public">Gecode::Matrix</innerclass>
    <innerclass refid="classGecode_1_1Slice" prot="public">Gecode::Slice</innerclass>
    <innerclass refid="classGecode_1_1RBS" prot="public">Gecode::RBS</innerclass>
    <innerclass refid="classGecode_1_1EngineBase" prot="public">Gecode::EngineBase</innerclass>
    <innerclass refid="classGecode_1_1DFS" prot="public">Gecode::DFS</innerclass>
    <innerclass refid="classGecode_1_1BAB" prot="public">Gecode::BAB</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01VarArgArray_3_01SetVar_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; VarArgArray&lt; SetVar &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01VarArray_3_01SetVar_01_4_01_4" prot="public">Gecode::ArrayTraits&lt; VarArray&lt; SetVar &gt; &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01SetVarArray_01_4" prot="public">Gecode::ArrayTraits&lt; SetVarArray &gt;</innerclass>
    <innerclass refid="classGecode_1_1ArrayTraits_3_01SetVarArgs_01_4" prot="public">Gecode::ArrayTraits&lt; SetVarArgs &gt;</innerclass>
    <innerclass refid="classGecode_1_1BranchTraits_3_01SetVar_01_4" prot="public">Gecode::BranchTraits&lt; SetVar &gt;</innerclass>
    <innerclass refid="classGecode_1_1SetVar" prot="public">Gecode::SetVar</innerclass>
    <innerclass refid="classGecode_1_1SetVarGlbRanges" prot="public">Gecode::SetVarGlbRanges</innerclass>
    <innerclass refid="classGecode_1_1SetVarLubRanges" prot="public">Gecode::SetVarLubRanges</innerclass>
    <innerclass refid="classGecode_1_1SetVarUnknownRanges" prot="public">Gecode::SetVarUnknownRanges</innerclass>
    <innerclass refid="classGecode_1_1SetVarGlbValues" prot="public">Gecode::SetVarGlbValues</innerclass>
    <innerclass refid="classGecode_1_1SetVarLubValues" prot="public">Gecode::SetVarLubValues</innerclass>
    <innerclass refid="classGecode_1_1SetVarUnknownValues" prot="public">Gecode::SetVarUnknownValues</innerclass>
    <innerclass refid="classGecode_1_1SetVarArgs" prot="public">Gecode::SetVarArgs</innerclass>
    <innerclass refid="classGecode_1_1SetVarArray" prot="public">Gecode::SetVarArray</innerclass>
    <innerclass refid="classGecode_1_1SetAFC" prot="public">Gecode::SetAFC</innerclass>
    <innerclass refid="classGecode_1_1SetActivity" prot="public">Gecode::SetActivity</innerclass>
    <innerclass refid="classGecode_1_1SetVarBranch" prot="public">Gecode::SetVarBranch</innerclass>
    <innerclass refid="classGecode_1_1SetValBranch" prot="public">Gecode::SetValBranch</innerclass>
    <innerclass refid="classGecode_1_1SetAssign" prot="public">Gecode::SetAssign</innerclass>
    <innerclass refid="classGecode_1_1Exception" prot="public">Gecode::Exception</innerclass>
    <innerclass refid="classGecode_1_1MemoryExhausted" prot="public">Gecode::MemoryExhausted</innerclass>
    <innerclass refid="classGecode_1_1DynamicCastFailed" prot="public">Gecode::DynamicCastFailed</innerclass>
    <innerclass refid="classGecode_1_1OperatingSystemError" prot="public">Gecode::OperatingSystemError</innerclass>
    <innerclass refid="classGecode_1_1Heap" prot="public">Gecode::Heap</innerclass>
    <innernamespace refid="namespaceGecode_1_1Driver">Gecode::Driver</innernamespace>
    <innernamespace refid="namespaceGecode_1_1FlatZinc">Gecode::FlatZinc</innernamespace>
    <innernamespace refid="namespaceGecode_1_1Float">Gecode::Float</innernamespace>
    <innernamespace refid="namespaceGecode_1_1Gist">Gecode::Gist</innernamespace>
    <innernamespace refid="namespaceGecode_1_1Int">Gecode::Int</innernamespace>
    <innernamespace refid="namespaceGecode_1_1Iter">Gecode::Iter</innernamespace>
    <innernamespace refid="namespaceGecode_1_1Kernel">Gecode::Kernel</innernamespace>
    <innernamespace refid="namespaceGecode_1_1MemoryConfig">Gecode::MemoryConfig</innernamespace>
    <innernamespace refid="namespaceGecode_1_1MiniModel">Gecode::MiniModel</innernamespace>
    <innernamespace refid="namespaceGecode_1_1Search">Gecode::Search</innernamespace>
    <innernamespace refid="namespaceGecode_1_1Set">Gecode::Set</innernamespace>
    <innernamespace refid="namespaceGecode_1_1Support">Gecode::Support</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__TaskDriverCmd_1ga22ba701b9e2a3fd43f3103fe638aee33" prot="public" static="no">
        <name>ScriptMode</name>
        <enumvalue id="group__TaskDriverCmd_1gga22ba701b9e2a3fd43f3103fe638aee33a6ac91da352c19e9f3e307c69c49009a0" prot="public">
          <name>SM_SOLUTION</name>
          <briefdescription>
<para>Print solution and some statistics. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskDriverCmd_1gga22ba701b9e2a3fd43f3103fe638aee33aaa914ad006f6478bba837937723d0e93" prot="public">
          <name>SM_TIME</name>
          <briefdescription>
<para>Measure average runtime. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskDriverCmd_1gga22ba701b9e2a3fd43f3103fe638aee33a4e3093e93cffb0c9d875ac2e673d32ad" prot="public">
          <name>SM_STAT</name>
          <briefdescription>
<para>Print statistics for script. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskDriverCmd_1gga22ba701b9e2a3fd43f3103fe638aee33a76caf679bad3233c179cdb5a9fd343d7" prot="public">
          <name>SM_GIST</name>
          <briefdescription>
<para>Run script in <ref refid="namespaceGecode_1_1Gist" kindref="compound">Gist</ref>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Different modes for executing scripts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/driver.hh" line="98" column="1" bodyfile="/usr/include/gecode/driver.hh" bodystart="98" bodyend="103"/>
      </memberdef>
      <memberdef kind="enum" id="group__TaskDriverCmd_1ga7fe5fc246f5c9aab9b06ea1cea870ea6" prot="public" static="no">
        <name>RestartMode</name>
        <enumvalue id="group__TaskDriverCmd_1gga7fe5fc246f5c9aab9b06ea1cea870ea6aad697b1afe1f91e55d08a741970df1ca" prot="public">
          <name>RM_NONE</name>
          <briefdescription>
<para>No restarts. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskDriverCmd_1gga7fe5fc246f5c9aab9b06ea1cea870ea6a732a70fbd720544aa3d0645d182873b9" prot="public">
          <name>RM_CONSTANT</name>
          <briefdescription>
<para>Restart with constant sequence. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskDriverCmd_1gga7fe5fc246f5c9aab9b06ea1cea870ea6a9a6853f73d3f5fdfdd11a0e94698cf1e" prot="public">
          <name>RM_LINEAR</name>
          <briefdescription>
<para>Restart with linear sequence. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskDriverCmd_1gga7fe5fc246f5c9aab9b06ea1cea870ea6aa987ee9fe2905471851fa844f895a5ba" prot="public">
          <name>RM_LUBY</name>
          <briefdescription>
<para>Restart with Luby sequence. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskDriverCmd_1gga7fe5fc246f5c9aab9b06ea1cea870ea6ac8a823e0a7447ce179438e51dd875c58" prot="public">
          <name>RM_GEOMETRIC</name>
          <briefdescription>
<para>Restart with geometric sequence. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Different modes for restart-based search. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/driver.hh" line="109" column="1" bodyfile="/usr/include/gecode/driver.hh" bodystart="109" bodyend="115"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" prot="public" static="no">
        <name>FloatRelType</name>
        <enumvalue id="namespaceGecode_1aa318be5bdad369c66855beb9b07e84eca1a54d04ec151d50f5fceb80ad8f5baf7" prot="public">
          <name>FRT_EQ</name>
          <briefdescription>
<para>Equality ( <formula id="66">$=$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1aa318be5bdad369c66855beb9b07e84eca50d9796137ce7e778f3a1749780a2ad0" prot="public">
          <name>FRT_NQ</name>
          <briefdescription>
<para>Disequality ( <formula id="67">$\neq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ecaa00b520e67b8495d0dfbfad063d7e414" prot="public">
          <name>FRT_LQ</name>
          <briefdescription>
<para>Less or equal ( <formula id="68">$\leq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1aa318be5bdad369c66855beb9b07e84eca6c3f2cbdff916b4bdd1aed3e02c43f57" prot="public">
          <name>FRT_LE</name>
          <briefdescription>
<para>Less ( <formula id="69">$&lt;$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ecacedab3e26f8935187f5cf7c447f9eaa6" prot="public">
          <name>FRT_GQ</name>
          <briefdescription>
<para>Greater or equal ( <formula id="70">$\geq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1aa318be5bdad369c66855beb9b07e84eca4fb844ef980f48814df3c1ffb765e7c3" prot="public">
          <name>FRT_GR</name>
          <briefdescription>
<para>Greater ( <formula id="71">$&gt;$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Relation types for floats. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1054" column="1" bodyfile="/usr/include/gecode/float.hh" bodystart="1054" bodyend="1061"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1a8904e2a3f216089daeaa60652a6429a5" prot="public" static="no">
        <name>ReifyMode</name>
        <enumvalue id="namespaceGecode_1a8904e2a3f216089daeaa60652a6429a5ad608be446ca24286ac821efc8667e37e" prot="public">
          <name>RM_EQV</name>
          <briefdescription>
<para>Equivalence for reification (default) </para>          </briefdescription>
          <detaileddescription>
<para>For a constraint <formula id="34">$c$</formula> and a Boolean control variable <formula id="146">$b$</formula> defines that <formula id="204">$b=1\Leftrightarrow c$</formula> is propagated. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8904e2a3f216089daeaa60652a6429a5a3864fdfe47e795ea6d7c27c63dd88ad3" prot="public">
          <name>RM_IMP</name>
          <briefdescription>
<para>Implication for reification. </para>          </briefdescription>
          <detaileddescription>
<para>For a constraint <formula id="34">$c$</formula> and a Boolean control variable <formula id="146">$b$</formula> defines that <formula id="205">$b=1\Leftarrow c$</formula> is propagated. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8904e2a3f216089daeaa60652a6429a5a44274ed04d4abe9f95da6ee51d97af5e" prot="public">
          <name>RM_PMI</name>
          <briefdescription>
<para>Inverse implication for reification. </para>          </briefdescription>
          <detaileddescription>
<para>For a constraint <formula id="34">$c$</formula> and a Boolean control variable <formula id="146">$b$</formula> defines that <formula id="206">$b=1\Rightarrow c$</formula> is propagated. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Mode for reification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="824" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="824" bodyend="846"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" prot="public" static="no">
        <name>IntRelType</name>
        <enumvalue id="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aaa3c531f069e207c7078f1d06f9b16af83" prot="public">
          <name>IRT_EQ</name>
          <briefdescription>
<para>Equality ( <formula id="66">$=$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aaa4f75043ce7dc5a599a6d157dd88179fb" prot="public">
          <name>IRT_NQ</name>
          <briefdescription>
<para>Disequality ( <formula id="67">$\neq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aaae6df5a2c5bb0b3e391088f5feff77ee4" prot="public">
          <name>IRT_LQ</name>
          <briefdescription>
<para>Less or equal ( <formula id="68">$\leq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aaaaadd866118f747566487d23335e33db5" prot="public">
          <name>IRT_LE</name>
          <briefdescription>
<para>Less ( <formula id="69">$&lt;$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aaa53d1fb6dc2ed68d0b23c012d9586707f" prot="public">
          <name>IRT_GQ</name>
          <briefdescription>
<para>Greater or equal ( <formula id="70">$\geq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aaadcb883cd086e84f87ba3b4f4cbb1b681" prot="public">
          <name>IRT_GR</name>
          <briefdescription>
<para>Greater ( <formula id="71">$&gt;$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Relation types for integers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="901" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="901" bodyend="908"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67" prot="public" static="no">
        <name>BoolOpType</name>
        <enumvalue id="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67ac72c9e0d123adfa3c1f81c8143a9c92a" prot="public">
          <name>BOT_AND</name>
          <briefdescription>
<para>Conjunction. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67a38839a059e6136d2b97776cd7cc10947" prot="public">
          <name>BOT_OR</name>
          <briefdescription>
<para>Disjunction. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67a7b38dfd3d9aaa7c757fbcd3dfc16f59a" prot="public">
          <name>BOT_IMP</name>
          <briefdescription>
<para>Implication. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67a59a0f5786387b810c216870393a4b8d9" prot="public">
          <name>BOT_EQV</name>
          <briefdescription>
<para>Equivalence. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67ac204e10625df0ca2527cbdbd7086ab56" prot="public">
          <name>BOT_XOR</name>
          <briefdescription>
<para>Exclusive or. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Operation types for Booleans. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="914" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="914" bodyend="920"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" prot="public" static="no">
        <name>IntConLevel</name>
        <enumvalue id="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ada8c131a41cb5aedefe2dcfc332d36eac5" prot="public">
          <name>ICL_VAL</name>
          <briefdescription>
<para>Value propagation or consistency (naive) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adade796af87cd52aca1ef19e70054b77cc" prot="public">
          <name>ICL_BND</name>
          <briefdescription>
<para>Bounds propagation or consistency. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adaa3adb21552ed7ce8f44e0289034f46c8" prot="public">
          <name>ICL_DOM</name>
          <briefdescription>
<para>Domain propagation or consistency. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" prot="public">
          <name>ICL_DEF</name>
          <briefdescription>
<para>The default consistency for a constraint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Consistency levels for integer propagators. </para>        </briefdescription>
        <detaileddescription>
<para>The descriptions are meant to be suggestions. It is not required that a propagator achieves full domain consistency or full bounds consistency. It is more like: which level of consistency comes closest.</para><para>If in the description of a constraint below no consistency level is mentioned, the propagator for the constraint implements domain consistency. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="935" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="935" bodyend="940"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1a72036d0d1ce62f603451ef48e93c3433" prot="public" static="no">
        <name>TaskType</name>
        <enumvalue id="namespaceGecode_1a72036d0d1ce62f603451ef48e93c3433ae749bb5fdb8c32108badabad99061ff6" prot="public">
          <name>TT_FIXP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a72036d0d1ce62f603451ef48e93c3433a0ec481678b1ef0fe6a8c0abbda8398ef" prot="public">
          <name>TT_FIXS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a72036d0d1ce62f603451ef48e93c3433a2c5238a7ab621bde5c5026e57943bb1a" prot="public">
          <name>TT_FIXE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type of task for scheduling constraints. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="947" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="947" bodyend="951"/>
      </memberdef>
      <memberdef kind="enum" id="group__TaskModelIntExt_1ga239a8386d959c6bbd2c1a59e1b0ac8bb" prot="public" static="no">
        <name>ExtensionalPropKind</name>
        <enumvalue id="group__TaskModelIntExt_1gga239a8386d959c6bbd2c1a59e1b0ac8bba13685778bcbfc4aa364668b378b7f9da" prot="public">
          <name>EPK_DEF</name>
          <briefdescription>
<para>Make a default decision. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskModelIntExt_1gga239a8386d959c6bbd2c1a59e1b0ac8bba064c32762dcbfe3e199c0eaccb2955a2" prot="public">
          <name>EPK_SPEED</name>
          <briefdescription>
<para>Prefer speed over memory consumption. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__TaskModelIntExt_1gga239a8386d959c6bbd2c1a59e1b0ac8bba916462addf616225b733bca90c1868b2" prot="public">
          <name>EPK_MEMORY</name>
          <briefdescription>
<para>Prefer little memory over speed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Extensional propagation kind. </para>        </briefdescription>
        <detaileddescription>
<para>Signals that a particular kind is used in propagation for the implementation of a extensional constraint. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1980" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="1980" bodyend="1984"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5" prot="public" static="no">
        <name>ExecStatus</name>
        <enumvalue id="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5a765902bb55e269264eb527881ce8c2a6" prot="public">
          <name>__ES_SUBSUMED</name>
          <initializer>= -2</initializer>
          <briefdescription>
<para>Internal: propagator is subsumed, do not use. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5a839b40c2e7ccebb2e61e92e274833089" prot="public">
          <name>ES_FAILED</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>Execution has resulted in failure. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5ac32341b682bca52b8617a8ad004023ef" prot="public">
          <name>ES_NOFIX</name>
          <initializer>=  0</initializer>
          <briefdescription>
<para>Propagation has not computed fixpoint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5a01d6fb1ec70479e8e413d5ecfd63e303" prot="public">
          <name>ES_OK</name>
          <initializer>=  0</initializer>
          <briefdescription>
<para>Execution is okay. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5a13bb69056fb9293e8df98c0e347ba634" prot="public">
          <name>ES_FIX</name>
          <initializer>=  1</initializer>
          <briefdescription>
<para>Propagation has computed fixpoint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5a74286a825963e3c84b4fd3c6cd6b1ca5" prot="public">
          <name>ES_NOFIX_FORCE</name>
          <initializer>=  2</initializer>
          <briefdescription>
<para><ref refid="classGecode_1_1Advisor" kindref="compound">Advisor</ref> forces rescheduling of propagator. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1ab278aee34126d2f13c5429ee3c4ed3b5a78b501669c042d4e6e4283551e8fb921" prot="public">
          <name>__ES_PARTIAL</name>
          <initializer>=  2</initializer>
          <briefdescription>
<para>Internal: propagator has computed partial fixpoint, do not use. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="523" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="523" bodyend="531"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1a99c644746a8611a92ce7f82ff6e12bc9" prot="public" static="no">
        <name>ActorProperty</name>
        <enumvalue id="namespaceGecode_1a99c644746a8611a92ce7f82ff6e12bc9a1f784a3552a29808c4d566132b9a1875" prot="public">
          <name>AP_DISPOSE</name>
          <initializer>= (1 &lt;&lt; 0)</initializer>
          <briefdescription>
<para><ref refid="classGecode_1_1Actor" kindref="compound">Actor</ref> must always be disposed. </para>          </briefdescription>
          <detaileddescription>
<para>Normally, a propagator will not be disposed if its home space is deleted. However, if an actor uses external resources, this property can be used to make sure that the actor will always be disposed. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a99c644746a8611a92ce7f82ff6e12bc9ae7450a17c9b2825eb9f45ad8c36d6542" prot="public">
          <name>AP_WEAKLY</name>
          <initializer>= (1 &lt;&lt; 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="classGecode_1_1Propagator" kindref="compound">Propagator</ref> is only weakly monotonic, that is, the propagator is only monotonic on assignments. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="classGecode_1_1Actor" kindref="compound">Actor</ref> properties. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="601" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="601" bodyend="617"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1af2c31e4405deb7f40175130957c30585" prot="public" static="no">
        <name>SpaceStatus</name>
        <enumvalue id="namespaceGecode_1af2c31e4405deb7f40175130957c30585ad86f84f8e703789baf93668526a38ae0" prot="public">
          <name>SS_FAILED</name>
          <briefdescription>
<para>Space is failed </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1af2c31e4405deb7f40175130957c30585a47752bf255aa67ccab82714aa63cd463" prot="public">
          <name>SS_SOLVED</name>
          <briefdescription>
<para>Space is solved (no brancher left) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1af2c31e4405deb7f40175130957c30585a22586483a7be4a59eeb383f5f0c4a185" prot="public">
          <name>SS_BRANCH</name>
          <briefdescription>
<para>Space must be branched (at least one brancher left) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Space status </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="1263" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="1263" bodyend="1267"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" prot="public" static="no">
        <name>SetRelType</name>
        <enumvalue id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2ab680d0b48ac9378974978e7f95ac0989" prot="public">
          <name>SRT_EQ</name>
          <briefdescription>
<para>Equality ( <formula id="66">$=$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2a80d013d9012e71ccbde5cd3ef35b5b4b" prot="public">
          <name>SRT_NQ</name>
          <briefdescription>
<para>Disequality ( <formula id="67">$\neq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2af922cabb38af3b516c2f8d51c1b1a971" prot="public">
          <name>SRT_SUB</name>
          <briefdescription>
<para>Subset ( <formula id="436">$\subseteq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2acac4d9cd1eb749f21f3d4ecb2af281aa" prot="public">
          <name>SRT_SUP</name>
          <briefdescription>
<para>Superset ( <formula id="437">$\supseteq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2aee30859f78b2e6b8b5df2667faecf8c3" prot="public">
          <name>SRT_DISJ</name>
          <briefdescription>
<para>Disjoint ( <formula id="438">$\parallel$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2a22a2b8a4f5ef8e5f713cd142e9eb5add" prot="public">
          <name>SRT_CMPL</name>
          <briefdescription>
<para>Complement. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2a4d67d334abcd9a24716686c67e475be5" prot="public">
          <name>SRT_LQ</name>
          <briefdescription>
<para>Less or equal ( <formula id="68">$\leq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2a815523d98874666377bad2eabab05f4d" prot="public">
          <name>SRT_LE</name>
          <briefdescription>
<para>Less ( <formula id="69">$&lt;$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2a12b89692c4a1d32affb95bdb5093ac46" prot="public">
          <name>SRT_GQ</name>
          <briefdescription>
<para>Greater or equal ( <formula id="70">$\geq$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2a4b8c2c493e24993eebb4c7b553250ad9" prot="public">
          <name>SRT_GR</name>
          <briefdescription>
<para>Greater ( <formula id="71">$&gt;$</formula>) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Common relation types for sets. </para>        </briefdescription>
        <detaileddescription>
<para>The total order on sets is defined as the lexicographic order on their characteristic functions, e.g., <formula id="403">$x\leq y$</formula> means that either <formula id="31">$x$</formula> is empty or the minimal element of the symmetric difference <formula id="404">$x\ominus y$</formula> is in <formula id="312">$y$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="644" column="1" bodyfile="/usr/include/gecode/set.hh" bodystart="644" bodyend="655"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" prot="public" static="no">
        <name>SetOpType</name>
        <enumvalue id="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09a9d8d5285967c1b7a57e449ae59ceb7ce" prot="public">
          <name>SOT_UNION</name>
          <briefdescription>
<para>Union. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09a646b596493621a584deb5a0f92e39d49" prot="public">
          <name>SOT_DUNION</name>
          <briefdescription>
<para>Disjoint union. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09aabf8bae7a6da743f34969927d05fc770" prot="public">
          <name>SOT_INTER</name>
          <briefdescription>
<para>Intersection </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09a0c62985dff7dcaf78d732db974cdfce2" prot="public">
          <name>SOT_MINUS</name>
          <briefdescription>
<para>Difference. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Common operations for sets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="661" column="1" bodyfile="/usr/include/gecode/set.hh" bodystart="661" bodyend="666"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__TaskDriverScript_1ga117d41ccb2d4699fca0252b091c3722a" prot="public" static="no">
        <type><ref refid="classGecode_1_1Driver_1_1ScriptBase" kindref="compound">Driver::ScriptBase</ref>&lt; <ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &gt;</type>
        <definition>typedef Driver::ScriptBase&lt;Space&gt; Gecode::Script</definition>
        <argsstring></argsstring>
        <name>Script</name>
        <briefdescription>
<para>Base-class for scripts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/driver.hh" line="666" column="1" bodyfile="/usr/include/gecode/driver.hh" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskDriverScript_1ga82bcca27a4e8679ffa36b01e8d2973eb" prot="public" static="no">
        <type><ref refid="classGecode_1_1Driver_1_1ScriptBase" kindref="compound">Driver::ScriptBase</ref>&lt; <ref refid="group__TaskModelMiniModelOptimize_1ga2110b74c0d8665aacadd62016609c162" kindref="member">MinimizeSpace</ref> &gt;</type>
        <definition>typedef Driver::ScriptBase&lt;MinimizeSpace&gt; Gecode::MinimizeScript</definition>
        <argsstring></argsstring>
        <name>MinimizeScript</name>
        <briefdescription>
<para>Base-class for scripts for finding solution of lowest integer cost. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/driver.hh" line="671" column="1" bodyfile="/usr/include/gecode/driver.hh" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskDriverScript_1gae7e19e8171970ec062d17c0fe143f875" prot="public" static="no">
        <type><ref refid="classGecode_1_1Driver_1_1ScriptBase" kindref="compound">Driver::ScriptBase</ref>&lt; <ref refid="group__TaskModelMiniModelOptimize_1gafb68536adc7753ee4dcc6d02b820d4ea" kindref="member">MaximizeSpace</ref> &gt;</type>
        <definition>typedef Driver::ScriptBase&lt;MaximizeSpace&gt; Gecode::MaximizeScript</definition>
        <argsstring></argsstring>
        <name>MaximizeScript</name>
        <briefdescription>
<para>Base-class for scripts for finding solution of highest integer cost. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/driver.hh" line="676" column="1" bodyfile="/usr/include/gecode/driver.hh" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskDriverScript_1ga87ef4356662e4e5d587cb93024a16e22" prot="public" static="no">
        <type><ref refid="classGecode_1_1Driver_1_1ScriptBase" kindref="compound">Driver::ScriptBase</ref>&lt; <ref refid="group__TaskModelMiniModelOptimize_1gac3e46889449b3e658889c425ac0baf06" kindref="member">IntMinimizeSpace</ref> &gt;</type>
        <definition>typedef Driver::ScriptBase&lt;IntMinimizeSpace&gt; Gecode::IntMinimizeScript</definition>
        <argsstring></argsstring>
        <name>IntMinimizeScript</name>
        <briefdescription>
<para>Base-class for scripts for finding solution of lowest integer cost. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/driver.hh" line="681" column="1" bodyfile="/usr/include/gecode/driver.hh" bodystart="681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskDriverScript_1gabecf8e1aa610b53627939fa7d2cb65d6" prot="public" static="no">
        <type><ref refid="classGecode_1_1Driver_1_1ScriptBase" kindref="compound">Driver::ScriptBase</ref>&lt; <ref refid="group__TaskModelMiniModelOptimize_1gab9b25b996b40174a9d9b11d129b889b1" kindref="member">IntMaximizeSpace</ref> &gt;</type>
        <definition>typedef Driver::ScriptBase&lt;IntMaximizeSpace&gt; Gecode::IntMaximizeScript</definition>
        <argsstring></argsstring>
        <name>IntMaximizeScript</name>
        <briefdescription>
<para>Base-class for scripts for finding solution of highest integer cost. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/driver.hh" line="686" column="1" bodyfile="/usr/include/gecode/driver.hh" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" prot="public" static="no">
        <type>double</type>
        <definition>typedef double Gecode::FloatNum</definition>
        <argsstring></argsstring>
        <name>FloatNum</name>
        <briefdescription>
<para>Floating point number base type. </para>        </briefdescription>
        <detaileddescription>
<para>This type defines the interval bounds used for representing floating point values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="108" column="1" bodyfile="/usr/include/gecode/float.hh" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelFloatBranch_1ga1ccd8f38e4fa45b5ce8306eaf7c63ab6" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* Gecode::FloatBranchFilter)(const Space &amp;home, FloatVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, FloatVar x, int i)</argsstring>
        <name>FloatBranchFilter</name>
        <briefdescription>
<para>Branch filter function type for float variables. </para>        </briefdescription>
        <detaileddescription>
<para>The variable <emphasis>x</emphasis> is considered for selection and <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1353" column="1" bodyfile="/usr/include/gecode/float.hh" bodystart="1353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelFloatBranch_1ga7eb7e1523e3550892c106a552e11df68" prot="public" static="no">
        <type>double(*</type>
        <definition>typedef double(* Gecode::FloatBranchMerit)(const Space &amp;home, FloatVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, FloatVar x, int i)</argsstring>
        <name>FloatBranchMerit</name>
        <briefdescription>
<para>Branch merit function type for float variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must return a merit value for the variable <emphasis>x</emphasis>. The value <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1365" column="1" bodyfile="/usr/include/gecode/float.hh" bodystart="1365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelFloatBranch_1ga6a41b0ae953f153a5fbfd58e15bf3415" prot="public" static="no">
        <type><ref refid="classGecode_1_1FloatNumBranch" kindref="compound">FloatNumBranch</ref>(*</type>
        <definition>typedef FloatNumBranch(* Gecode::FloatBranchVal)(const Space &amp;home, FloatVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, FloatVar x, int i)</argsstring>
        <name>FloatBranchVal</name>
        <briefdescription>
<para>Branch value function type for float variables. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a value for the variable <emphasis>x</emphasis> that is to be used in the corresponding branch commit function. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1390" column="1" bodyfile="/usr/include/gecode/float.hh" bodystart="1390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelFloatBranch_1ga10dc42e7cfa38967f5dc51aa6c3eb1b6" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::FloatBranchCommit)(Space &amp;home, unsigned int a, FloatVar x, int i, FloatNumBranch nl)</definition>
        <argsstring>)(Space &amp;home, unsigned int a, FloatVar x, int i, FloatNumBranch nl)</argsstring>
        <name>FloatBranchCommit</name>
        <briefdescription>
<para>Branch commit function type for float variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must post a constraint on the variable <emphasis>x</emphasis> which corresponds to the alternative <emphasis>a</emphasis>. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. The value <emphasis>nl</emphasis> is the value description computed by the corresponding branch value function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1403" column="1" bodyfile="/usr/include/gecode/float.hh" bodystart="1403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelFloatArith_1ga90db66ac203529fad09f04ba09612e3c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::FloatVarValPrint)(const Space &amp;home, const BrancherHandle &amp;bh, unsigned int a, FloatVar x, int i, const FloatNumBranch &amp;n, std::ostream &amp;o)</definition>
        <argsstring>)(const Space &amp;home, const BrancherHandle &amp;bh, unsigned int a, FloatVar x, int i, const FloatNumBranch &amp;n, std::ostream &amp;o)</argsstring>
        <name>FloatVarValPrint</name>
        <briefdescription>
<para>Function type for explaining branching alternatives for set variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1502" column="1" bodyfile="/usr/include/gecode/float.hh" bodystart="1502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGecode_1ab872a4e67d62ec5e1ae77fd5a0f96e53" prot="public" static="no">
        <type><ref refid="classGecode_1_1ArgArray" kindref="compound">ArgArray</ref>&lt; <ref refid="classGecode_1_1Int_1_1LDSB_1_1Literal" kindref="compound">Int::LDSB::Literal</ref> &gt;</type>
        <definition>typedef ArgArray&lt;Int::LDSB::Literal&gt; Gecode::LiteralArgs</definition>
        <argsstring></argsstring>
        <name>LiteralArgs</name>
        <briefdescription>
<para>An array of literals. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/ldsb.hh" line="97" column="1" bodyfile="/usr/include/gecode/int/ldsb.hh" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntArgs_1ga07f276f408888e46205328c9ec668bea" prot="public" static="no">
        <type><ref refid="classGecode_1_1ArgArray" kindref="compound">ArgArray</ref>&lt; <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &gt;</type>
        <definition>typedef ArgArray&lt;IntSet&gt; Gecode::IntSetArgs</definition>
        <argsstring></argsstring>
        <name>IntSetArgs</name>
        <briefdescription>
<para>Passing set arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="596" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGecode_1a22162e3abb33bfc0709669e9e855dbc0" prot="public" static="no">
        <type><ref refid="classGecode_1_1PrimArgArray" kindref="compound">PrimArgArray</ref>&lt; <ref refid="namespaceGecode_1a72036d0d1ce62f603451ef48e93c3433" kindref="member">TaskType</ref> &gt;</type>
        <definition>typedef PrimArgArray&lt;TaskType&gt; Gecode::TaskTypeArgs</definition>
        <argsstring></argsstring>
        <name>TaskTypeArgs</name>
        <briefdescription>
<para>Argument arrays for passing task type arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="958" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="958" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" prot="public" static="no">
        <type><ref refid="classGecode_1_1SharedArray" kindref="compound">SharedArray</ref>&lt; int &gt;</type>
        <definition>typedef SharedArray&lt;int&gt; Gecode::IntSharedArray</definition>
        <argsstring></argsstring>
        <name>IntSharedArray</name>
        <briefdescription>
<para>Arrays of integers that can be shared among several element constraints. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1343" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="1343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1ga6791eb13b8bcf30a45a31ecec43e6e03" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* Gecode::IntBranchFilter)(const Space &amp;home, IntVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, IntVar x, int i)</argsstring>
        <name>IntBranchFilter</name>
        <briefdescription>
<para>Branch filter function type for integer variables. </para>        </briefdescription>
        <detaileddescription>
<para>The variable <emphasis>x</emphasis> is considered for selection and <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3496" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1gaa1878ecc1c1404a0a27f6642549a3863" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* Gecode::BoolBranchFilter)(const Space &amp;home, BoolVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, BoolVar x, int i)</argsstring>
        <name>BoolBranchFilter</name>
        <briefdescription>
<para>Branch filter function type for Boolean variables. </para>        </briefdescription>
        <detaileddescription>
<para>The variable <emphasis>x</emphasis> is considered for selection and <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3505" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1gabd2629d15afdee6f6cb998c1647b210f" prot="public" static="no">
        <type>double(*</type>
        <definition>typedef double(* Gecode::IntBranchMerit)(const Space &amp;home, IntVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, IntVar x, int i)</argsstring>
        <name>IntBranchMerit</name>
        <briefdescription>
<para>Branch merit function type for integer variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must return a merit value for the variable <emphasis>x</emphasis>. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3516" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1ga9626c7a69aa0213a0a1191dfdb7b9efc" prot="public" static="no">
        <type>double(*</type>
        <definition>typedef double(* Gecode::BoolBranchMerit)(const Space &amp;home, BoolVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, BoolVar x, int i)</argsstring>
        <name>BoolBranchMerit</name>
        <briefdescription>
<para>Branch merit function type for Boolean variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must return a merit value for the variable <emphasis>x</emphasis>. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3526" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1ga98ca9bcf71eeeb8d55b408a309a9ce9f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* Gecode::IntBranchVal)(const Space &amp;home, IntVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, IntVar x, int i)</argsstring>
        <name>IntBranchVal</name>
        <briefdescription>
<para>Branch value function type for integer variables. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a value for the variable <emphasis>x</emphasis> that is to be used in the corresponding branch commit function. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3538" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1ga507b725c3cb54d2523dd544edbccd52a" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* Gecode::BoolBranchVal)(const Space &amp;home, BoolVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, BoolVar x, int i)</argsstring>
        <name>BoolBranchVal</name>
        <briefdescription>
<para>Branch value function type for Boolean variables. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a value for the variable <emphasis>x</emphasis> that is to be used in the corresponding branch commit function. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3549" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1ga8a76dc88094c7c583b2afdc0f51d73f8" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::IntBranchCommit)(Space &amp;home, unsigned int a, IntVar x, int i, int n)</definition>
        <argsstring>)(Space &amp;home, unsigned int a, IntVar x, int i, int n)</argsstring>
        <name>IntBranchCommit</name>
        <briefdescription>
<para>Branch commit function type for integer variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must post a constraint on the variable <emphasis>x</emphasis> which corresponds to the alternative <emphasis>a</emphasis>. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. The value <emphasis>n</emphasis> is the value computed by the corresponding branch value function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3562" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelIntBranch_1gaf4ad026af38c4abde69c8ea93bc4feee" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::BoolBranchCommit)(Space &amp;home, unsigned int a, BoolVar x, int i, int n)</definition>
        <argsstring>)(Space &amp;home, unsigned int a, BoolVar x, int i, int n)</argsstring>
        <name>BoolBranchCommit</name>
        <briefdescription>
<para>Branch commit function type for Boolean variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must post a constraint on the variable <emphasis>x</emphasis> which corresponds to the alternative <emphasis>a</emphasis>. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. The value <emphasis>n</emphasis> is the value computed by the corresponding branch value function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3575" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGecode_1a623fea8dd944c5caa09f5f8b906819ae" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::IntVarValPrint)(const Space &amp;home, const BrancherHandle &amp;bh, unsigned int a, IntVar x, int i, const int &amp;n, std::ostream &amp;o)</definition>
        <argsstring>)(const Space &amp;home, const BrancherHandle &amp;bh, unsigned int a, IntVar x, int i, const int &amp;n, std::ostream &amp;o)</argsstring>
        <name>IntVarValPrint</name>
        <briefdescription>
<para>Function type for printing branching alternatives for integer variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3706" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGecode_1a07c72dd8cd5d8163adedd8e8fe506ef6" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::BoolVarValPrint)(const Space &amp;home, const BrancherHandle &amp;bh, unsigned int a, BoolVar x, int i, const int &amp;n, std::ostream &amp;o)</definition>
        <argsstring>)(const Space &amp;home, const BrancherHandle &amp;bh, unsigned int a, BoolVar x, int i, const int &amp;n, std::ostream &amp;o)</argsstring>
        <name>BoolVarValPrint</name>
        <briefdescription>
<para>Function type for printing branching alternatives for Boolean variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3712" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="3712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" prot="public" static="no">
        <type>double(*</type>
        <definition>typedef double(* Gecode::BranchTbl)(const Space &amp;home, double w, double b)</definition>
        <argsstring>)(const Space &amp;home, double w, double b)</argsstring>
        <name>BranchTbl</name>
        <briefdescription>
<para>Tie-break limit function. </para>        </briefdescription>
        <detaileddescription>
<para>Here the value <emphasis>w</emphasis> is the worst and <bold>is</bold> the best merit value found. The function must return the merit value that is considered the limit for breaking ties. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/branch-var.hpp" line="49" column="1" bodyfile="/usr/include/gecode/kernel/branch-var.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" prot="public" static="no">
        <type>int</type>
        <definition>typedef int Gecode::ModEvent</definition>
        <argsstring></argsstring>
        <name>ModEvent</name>
        <briefdescription>
<para>Type for modification events. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="146" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" prot="public" static="no">
        <type>int</type>
        <definition>typedef int Gecode::PropCond</definition>
        <argsstring></argsstring>
        <name>PropCond</name>
        <briefdescription>
<para>Type for propagation conditions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="156" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGecode_1a129e41c1d037528010d7b6706495a560" prot="public" static="no">
        <type>int</type>
        <definition>typedef int Gecode::ModEventDelta</definition>
        <argsstring></argsstring>
        <name>ModEventDelta</name>
        <briefdescription>
<para>Modification event deltas. </para>        </briefdescription>
        <detaileddescription>
<para>Modification event deltas are used by propagators. A propagator stores a modification event for each variable type. They can be accessed through a variable or a view from a given propagator. They can be constructed from a given modevent by a variable or view. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="173" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelMiniModelOptimize_1ga2110b74c0d8665aacadd62016609c162" prot="public" static="no">
        <type><ref refid="classGecode_1_1MiniModel_1_1IntOptimizeSpace" kindref="compound">MiniModel::IntOptimizeSpace</ref>&lt; <ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aaaaadd866118f747566487d23335e33db5" kindref="member">IRT_LE</ref> &gt;</type>
        <definition>typedef MiniModel::IntOptimizeSpace&lt;IRT_LE&gt; Gecode::MinimizeSpace</definition>
        <argsstring></argsstring>
        <name>MinimizeSpace</name>
        <briefdescription>
<para>Class for minimizing integer cost. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="2239" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="2239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelMiniModelOptimize_1gafb68536adc7753ee4dcc6d02b820d4ea" prot="public" static="no">
        <type><ref refid="classGecode_1_1MiniModel_1_1IntOptimizeSpace" kindref="compound">MiniModel::IntOptimizeSpace</ref>&lt; <ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aaadcb883cd086e84f87ba3b4f4cbb1b681" kindref="member">IRT_GR</ref> &gt;</type>
        <definition>typedef MiniModel::IntOptimizeSpace&lt;IRT_GR&gt; Gecode::MaximizeSpace</definition>
        <argsstring></argsstring>
        <name>MaximizeSpace</name>
        <briefdescription>
<para>Class for maximizing integer cost. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="2241" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="2241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelMiniModelOptimize_1gac3e46889449b3e658889c425ac0baf06" prot="public" static="no">
        <type><ref refid="classGecode_1_1MiniModel_1_1IntOptimizeSpace" kindref="compound">MiniModel::IntOptimizeSpace</ref>&lt; <ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aaaaadd866118f747566487d23335e33db5" kindref="member">IRT_LE</ref> &gt;</type>
        <definition>typedef MiniModel::IntOptimizeSpace&lt;IRT_LE&gt; Gecode::IntMinimizeSpace</definition>
        <argsstring></argsstring>
        <name>IntMinimizeSpace</name>
        <briefdescription>
<para>Class for minimizing integer cost. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="2243" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="2243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelMiniModelOptimize_1gab9b25b996b40174a9d9b11d129b889b1" prot="public" static="no">
        <type><ref refid="classGecode_1_1MiniModel_1_1IntOptimizeSpace" kindref="compound">MiniModel::IntOptimizeSpace</ref>&lt; <ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aaadcb883cd086e84f87ba3b4f4cbb1b681" kindref="member">IRT_GR</ref> &gt;</type>
        <definition>typedef MiniModel::IntOptimizeSpace&lt;IRT_GR&gt; Gecode::IntMaximizeSpace</definition>
        <argsstring></argsstring>
        <name>IntMaximizeSpace</name>
        <briefdescription>
<para>Class for maximizing integer cost. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="2245" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="2245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelSetBranch_1gadd48606a449c14addbecf150180e38dd" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* Gecode::SetBranchFilter)(const Space &amp;home, SetVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, SetVar x, int i)</argsstring>
        <name>SetBranchFilter</name>
        <briefdescription>
<para>Branch filter function type for set variables. </para>        </briefdescription>
        <detaileddescription>
<para>The variable <emphasis>x</emphasis> is considered for selection and <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1102" column="1" bodyfile="/usr/include/gecode/set.hh" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelSetBranch_1ga268dda441c27ed5f438bdf2386e89fac" prot="public" static="no">
        <type>double(*</type>
        <definition>typedef double(* Gecode::SetBranchMerit)(const Space &amp;home, SetVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, SetVar x, int i)</argsstring>
        <name>SetBranchMerit</name>
        <briefdescription>
<para>Branch merit function type for set variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must return a merit value for the variable <emphasis>x</emphasis>. The value <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1114" column="1" bodyfile="/usr/include/gecode/set.hh" bodystart="1114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelSetBranch_1gaf4fd23ef1eceb32a440e0183a2ae0346" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* Gecode::SetBranchVal)(const Space &amp;home, SetVar x, int i)</definition>
        <argsstring>)(const Space &amp;home, SetVar x, int i)</argsstring>
        <name>SetBranchVal</name>
        <briefdescription>
<para>Branch value function type for set variables. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a value for the variable <emphasis>x</emphasis> that is to be used in the corresponding branch commit function. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1126" column="1" bodyfile="/usr/include/gecode/set.hh" bodystart="1126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__TaskModelSetBranch_1gadec0414377e8be38b2cd3113d5fd9abd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::SetBranchCommit)(Space &amp;home, unsigned int a, SetVar x, int i, int n)</definition>
        <argsstring>)(Space &amp;home, unsigned int a, SetVar x, int i, int n)</argsstring>
        <name>SetBranchCommit</name>
        <briefdescription>
<para>Branch commit function type for set variables. </para>        </briefdescription>
        <detaileddescription>
<para>The function must post a constraint on the variable <emphasis>x</emphasis> which corresponds to the alternative <emphasis>a</emphasis>. The integer <emphasis>i</emphasis> refers to the variable&apos;s position in the original array passed to the brancher. The value <emphasis>n</emphasis> is the value computed by the corresponding branch value function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1139" column="1" bodyfile="/usr/include/gecode/set.hh" bodystart="1139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGecode_1abb7f11da31449075a112df0d3624e8af" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::SetVarValPrint)(const Space &amp;home, const BrancherHandle &amp;bh, unsigned int a, SetVar x, int i, const int &amp;n, std::ostream &amp;o)</definition>
        <argsstring>)(const Space &amp;home, const BrancherHandle &amp;bh, unsigned int a, SetVar x, int i, const int &amp;n, std::ostream &amp;o)</argsstring>
        <name>SetVarValPrint</name>
        <briefdescription>
<para>Function type for printing branching alternatives for set variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1239" column="1" bodyfile="/usr/include/gecode/set.hh" bodystart="1239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceGecode_1a6e982f1b655011d8c781cd9f38cfb907" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Gecode::VoidFunction)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>VoidFunction</name>
        <briefdescription>
<para>Base type for any function pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/cast.hpp" line="45" column="1" bodyfile="/usr/include/gecode/support/cast.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__TaskVarMEPC_1gac6c709911cc87815a3c5c5cc39f00e95" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>const ModEvent Gecode::ME_GEN_FAILED</definition>
        <argsstring></argsstring>
        <name>ME_GEN_FAILED</name>
        <initializer>= -1</initializer>
        <briefdescription>
<para>Generic modification event: failed variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="149" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__TaskVarMEPC_1ga8d1b2ed806950538eb781ef1b3009a4c" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>const ModEvent Gecode::ME_GEN_NONE</definition>
        <argsstring></argsstring>
        <name>ME_GEN_NONE</name>
        <initializer>=  0</initializer>
        <briefdescription>
<para>Generic modification event: no modification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="151" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__TaskVarMEPC_1gad6c95dad88dab9ffcb71b90039157c3c" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
        <definition>const ModEvent Gecode::ME_GEN_ASSIGNED</definition>
        <argsstring></argsstring>
        <name>ME_GEN_ASSIGNED</name>
        <initializer>=  1</initializer>
        <briefdescription>
<para>Generic modification event: variable is assigned a value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="153" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__TaskVarMEPC_1gaf12d13306e53563b1ee8951d5ae90032" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
        <definition>const PropCond Gecode::PC_GEN_NONE</definition>
        <argsstring></argsstring>
        <name>PC_GEN_NONE</name>
        <initializer>= -1</initializer>
        <briefdescription>
<para>Propagation condition to be ignored (convenience) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="158" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__TaskVarMEPC_1ga2e782baaa2ef69ccd53b88e04d5510fb" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__TaskVarMEPC_1gad24536e327a507a903179b6a5efd2e3d" kindref="member">PropCond</ref></type>
        <definition>const PropCond Gecode::PC_GEN_ASSIGNED</definition>
        <argsstring></argsstring>
        <name>PC_GEN_ASSIGNED</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Propagation condition for an assigned variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/core.hpp" line="160" column="1" bodyfile="/usr/include/gecode/kernel/core.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceGecode_1a6595368d634d0db095ad8dee79f14d2c" prot="public" static="no" mutable="no">
        <type>GECODE_SUPPORT_EXPORT <ref refid="classGecode_1_1Heap" kindref="compound">Heap</ref></type>
        <definition>GECODE_SUPPORT_EXPORT Heap Gecode::heap</definition>
        <argsstring></argsstring>
        <name>heap</name>
        <briefdescription>
<para>The single global heap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/heap.hpp" line="334" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__TaskModelFloatBranchAssign_1gaf75ac998e6b106f947e3c6263293df8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatAssign" kindref="compound">FloatAssign</ref></type>
        <definition>FloatAssign Gecode::FLOAT_ASSIGN_MIN</definition>
        <argsstring>(void)</argsstring>
        <name>FLOAT_ASSIGN_MIN</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select median value of the lower part. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/assign.hpp" line="59" column="1" bodyfile="/usr/include/gecode/float/branch/assign.hpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchAssign_1ga83498d75d9c9678404db8bf7c70d7830" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatAssign" kindref="compound">FloatAssign</ref></type>
        <definition>FloatAssign Gecode::FLOAT_ASSIGN_MAX</definition>
        <argsstring>(void)</argsstring>
        <name>FLOAT_ASSIGN_MAX</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select median value of the upper part. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/assign.hpp" line="64" column="1" bodyfile="/usr/include/gecode/float/branch/assign.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchAssign_1gad4461af00e1ed5c64e4db8cc0103956f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatAssign" kindref="compound">FloatAssign</ref></type>
        <definition>FloatAssign Gecode::FLOAT_ASSIGN_RND</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>FLOAT_ASSIGN_RND</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Select median value of a randomly chosen part. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/assign.hpp" line="69" column="1" bodyfile="/usr/include/gecode/float/branch/assign.hpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchAssign_1ga36a13ddb9af18cfecaaa09cff794c2f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatAssign" kindref="compound">FloatAssign</ref></type>
        <definition>FloatAssign Gecode::FLOAT_ASSIGN</definition>
        <argsstring>(FloatBranchVal v, FloatBranchCommit c)</argsstring>
        <name>FLOAT_ASSIGN</name>
        <param>
          <type><ref refid="group__TaskModelFloatBranch_1ga6a41b0ae953f153a5fbfd58e15bf3415" kindref="member">FloatBranchVal</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelFloatBranch_1ga10dc42e7cfa38967f5dc51aa6c3eb1b6" kindref="member">FloatBranchCommit</ref></type>
          <declname>c</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select value as defined by the value function <emphasis>v</emphasis> and commit function <emphasis>c</emphasis> The default commit function posts the constraint that the float variable <emphasis>x</emphasis> must be less or equal than the value <emphasis>n</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/assign.hpp" line="74" column="1" bodyfile="/usr/include/gecode/float/branch/assign.hpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1acfe51cac457920b5bf7da7461a95e6c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(Archive &amp;e, FloatNumBranch nl)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatNumBranch" kindref="compound">FloatNumBranch</ref></type>
          <declname>nl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/val-sel.hpp" line="42" column="1" bodyfile="/usr/include/gecode/float/branch/val-sel.hpp" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a75d3d7c46e4473b3e3034efe9b0769cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&gt;&gt;</definition>
        <argsstring>(Archive &amp;e, FloatNumBranch &amp;nl)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatNumBranch" kindref="compound">FloatNumBranch</ref> &amp;</type>
          <declname>nl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/val-sel.hpp" line="48" column="1" bodyfile="/usr/include/gecode/float/branch/val-sel.hpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVal_1gae823d56bc57fa48b2ad97a6cc25a1e9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatValBranch" kindref="compound">FloatValBranch</ref></type>
        <definition>FloatValBranch Gecode::FLOAT_VAL_SPLIT_MIN</definition>
        <argsstring>(void)</argsstring>
        <name>FLOAT_VAL_SPLIT_MIN</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select values not greater than mean of smallest and largest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/val.hpp" line="59" column="1" bodyfile="/usr/include/gecode/float/branch/val.hpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVal_1ga05e12e55170870d12aa50f1c0e83006c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatValBranch" kindref="compound">FloatValBranch</ref></type>
        <definition>FloatValBranch Gecode::FLOAT_VAL_SPLIT_MAX</definition>
        <argsstring>(void)</argsstring>
        <name>FLOAT_VAL_SPLIT_MAX</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select values greater than mean of smallest and largest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/val.hpp" line="64" column="1" bodyfile="/usr/include/gecode/float/branch/val.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVal_1ga3dc58f712af3cb442f7417a9bfb3d133" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatValBranch" kindref="compound">FloatValBranch</ref></type>
        <definition>FloatValBranch Gecode::FLOAT_VAL_SPLIT_RND</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>FLOAT_VAL_SPLIT_RND</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Select values randomly which are not greater or not smaller than mean of largest and smallest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/val.hpp" line="69" column="1" bodyfile="/usr/include/gecode/float/branch/val.hpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVal_1ga0eb35c5793e08110e7c44fc65eb5ba91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatValBranch" kindref="compound">FloatValBranch</ref></type>
        <definition>FloatValBranch Gecode::FLOAT_VAL</definition>
        <argsstring>(FloatBranchVal v, FloatBranchCommit c)</argsstring>
        <name>FLOAT_VAL</name>
        <param>
          <type><ref refid="group__TaskModelFloatBranch_1ga6a41b0ae953f153a5fbfd58e15bf3415" kindref="member">FloatBranchVal</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelFloatBranch_1ga10dc42e7cfa38967f5dc51aa6c3eb1b6" kindref="member">FloatBranchCommit</ref></type>
          <declname>c</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select value as defined by the value function <emphasis>v</emphasis> and commit function <emphasis>c</emphasis> The default commit function posts the constraint that the float variable <emphasis>x</emphasis> must be less or equal than the value <emphasis>n</emphasis> for the first alternative and that <emphasis>x</emphasis> must be greater or equal than <emphasis>n</emphasis> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/val.hpp" line="74" column="1" bodyfile="/usr/include/gecode/float/branch/val.hpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gaa79bbfada6349d575c134bde25f27454" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_NONE</definition>
        <argsstring>(void)</argsstring>
        <name>FLOAT_VAR_NONE</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select first unassigned variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="92" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga139a23f6e02846e32d6de075d49430d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_MERIT_MIN</definition>
        <argsstring>(FloatBranchMerit bm, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_MERIT_MIN</name>
        <param>
          <type><ref refid="group__TaskModelFloatBranch_1ga7eb7e1523e3550892c106a552e11df68" kindref="member">FloatBranchMerit</ref></type>
          <declname>bm</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with least merit according to branch merit function <emphasis>bm</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="97" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gaac0a206f1375a3c604e3c2b68a327d78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_MERIT_MAX</definition>
        <argsstring>(FloatBranchMerit bm, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_MERIT_MAX</name>
        <param>
          <type><ref refid="group__TaskModelFloatBranch_1ga7eb7e1523e3550892c106a552e11df68" kindref="member">FloatBranchMerit</ref></type>
          <declname>bm</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with highest merit according to branch merit function <emphasis>bm</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="103" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga043ba261902c55c5b7e1ffe030136ae3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_RND</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>FLOAT_VAR_RND</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Select random variable (uniform distribution, for tie breaking) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="109" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga4efd87769bbf6955c1fbb8b3e73edde9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_DEGREE_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_DEGREE_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest degree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="114" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga7a6592ef6f06e82bc16a6093e63ead44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_DEGREE_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_DEGREE_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest degree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="119" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gaac3703e60e46b2917342660c09a8a6e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_AFC_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_AFC_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="124" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gab50f424846cf22a579a7be0fa5d3ba76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_AFC_MIN</definition>
        <argsstring>(FloatAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_AFC_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1FloatAFC" kindref="compound">FloatAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="129" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gac672286c06c7556f8c2baebf3aee88b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_AFC_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_AFC_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="134" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga75447d61e8ffe14fdf58bc6b0b8b5269" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_AFC_MAX</definition>
        <argsstring>(FloatAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_AFC_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1FloatAFC" kindref="compound">FloatAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="139" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga5a11e07bf0e4427b064b91603aa5f077" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_ACTIVITY_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_ACTIVITY_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with lowest activity with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="144" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga42dd64d7ca83f9daee421df81e6a5a66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_ACTIVITY_MIN</definition>
        <argsstring>(FloatActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_ACTIVITY_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1FloatActivity" kindref="compound">FloatActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with lowest activity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="149" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga778465ba232c8cc36d77425980da8f3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_ACTIVITY_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_ACTIVITY_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with highest activity with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="154" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga3a0601370a15a0021e2ba8aaaeb2911e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_ACTIVITY_MAX</definition>
        <argsstring>(FloatActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_ACTIVITY_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1FloatActivity" kindref="compound">FloatActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with highest activity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="159" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gaf6a0598cea8557db44f3ced98052f413" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_MIN_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_MIN_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest min. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="164" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga23776244964fa8fe861edca80eafd215" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_MIN_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_MIN_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest min. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="169" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga08f8f3a512642a82bffdffed19d968d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_MAX_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_MAX_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest max. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="174" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gaf33f221cbb58a3c722e734fc9b579f42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_MAX_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_MAX_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest max. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="179" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga5aeb256ed95eeec180c9b237f6577c67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_SIZE_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_SIZE_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="184" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gaa694318cbef1cba6d95cee46d0809b2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_SIZE_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_SIZE_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="189" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga8af8493438f9304d180d12e6c43be58d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_DEGREE_SIZE_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_DEGREE_SIZE_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest degree divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="194" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga29c023b07e62ebb3ca99082fc7047fe3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_DEGREE_SIZE_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_DEGREE_SIZE_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest degree divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="199" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gaab3f92130f68f0ea6cea7f6799fcea1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_AFC_SIZE_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_AFC_SIZE_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smalllest accumulated failure count divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="204" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga24064fcacc7866a4bbe90d61f9392b91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_AFC_SIZE_MIN</definition>
        <argsstring>(FloatAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_AFC_SIZE_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1FloatAFC" kindref="compound">FloatAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="209" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gaf6b821b6208e137f02771e9e3c595d68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_AFC_SIZE_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_AFC_SIZE_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="214" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="214" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1gaa3e5c2163e4824b9e8d0cf9fabc305ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_AFC_SIZE_MAX</definition>
        <argsstring>(FloatAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_AFC_SIZE_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1FloatAFC" kindref="compound">FloatAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="219" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga84bcb111fdc8a0464ea5467695d52448" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_ACTIVITY_SIZE_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_ACTIVITY_SIZE_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest activity divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="224" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga0a4b727dd32f855a9f79be8b74875b0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_ACTIVITY_SIZE_MIN</definition>
        <argsstring>(FloatActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_ACTIVITY_SIZE_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1FloatActivity" kindref="compound">FloatActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest activity divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="229" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="229" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga0447f029db8360ef2ec45145978372ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_ACTIVITY_SIZE_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_ACTIVITY_SIZE_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest activity divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="234" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranchVar_1ga570214db18fe2ccd65baee00311a848a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
        <definition>FloatVarBranch Gecode::FLOAT_VAR_ACTIVITY_SIZE_MAX</definition>
        <argsstring>(FloatActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>FLOAT_VAR_ACTIVITY_SIZE_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1FloatActivity" kindref="compound">FloatActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest activity divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/branch/var.hpp" line="239" column="1" bodyfile="/usr/include/gecode/float/branch/var.hpp" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a2dd657d1e26ae68fa2b0b77a5685bba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
        <definition>FloatNum Gecode::pi_half_lower</definition>
        <argsstring>(void)</argsstring>
        <name>pi_half_lower</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return lower bound of <formula id="39">$\pi/2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/num.hpp" line="41" column="1" bodyfile="/usr/include/gecode/float/num.hpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a58949a0247606f88eac90c2820a881c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
        <definition>FloatNum Gecode::pi_half_upper</definition>
        <argsstring>(void)</argsstring>
        <name>pi_half_upper</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return upper bound of <formula id="39">$\pi/2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/num.hpp" line="45" column="1" bodyfile="/usr/include/gecode/float/num.hpp" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a2d75ccf13f04840172c2f5531f1a1673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
        <definition>FloatNum Gecode::pi_lower</definition>
        <argsstring>(void)</argsstring>
        <name>pi_lower</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return lower bound of <formula id="40">$\pi$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/num.hpp" line="49" column="1" bodyfile="/usr/include/gecode/float/num.hpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a242b088a24c44cca95889e85e3153153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
        <definition>FloatNum Gecode::pi_upper</definition>
        <argsstring>(void)</argsstring>
        <name>pi_upper</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return upper bound of <formula id="40">$\pi$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/num.hpp" line="53" column="1" bodyfile="/usr/include/gecode/float/num.hpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a4b3a2d293f6c4301af5b84834fc0351a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
        <definition>FloatNum Gecode::pi_twice_lower</definition>
        <argsstring>(void)</argsstring>
        <name>pi_twice_lower</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return lower bound of <formula id="41">$2\pi$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/num.hpp" line="57" column="1" bodyfile="/usr/include/gecode/float/num.hpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a7907d74bb6a8f5b4975d4472649f1e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
        <definition>FloatNum Gecode::pi_twice_upper</definition>
        <argsstring>(void)</argsstring>
        <name>pi_twice_upper</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return upper bound of <formula id="41">$2\pi$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/num.hpp" line="61" column="1" bodyfile="/usr/include/gecode/float/num.hpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ae3c05221cfdba1d3b75029c940d4bce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator+</definition>
        <argsstring>(const FloatVal &amp;x)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="168" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a13dfeae03390c80071c71bd6dfb585a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator-</definition>
        <argsstring>(const FloatVal &amp;x)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="172" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a746adff8ba1488b796ccd9447a612ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator+</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="178" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ae0cdd98fac4d98a6ef1f2089a0f091b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator+</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="182" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aeb71de87e4455766599ec2f4e7a26081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator+</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="186" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a001af6374e42d96227ecd598d76d38a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator-</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="191" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1af52c1badd63c87ba6500aaf503adb60b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator-</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="195" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ae7316e833eab2b1905404754061ea42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator-</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="199" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aef41ff151e274157b4562beff2029621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator*</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="204" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a8895ebce59745b7abdd2e20a8c8a57f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator*</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="208" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1abdc0503784de102730d7200fff1c8c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator*</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="212" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a47b28bb9eed02c919f26330cd4ff67c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator/</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="217" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a8a844912233cdc73f8bb6d14e7e4156b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator/</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="221" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="221" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a9b55d9c31db4306bc4f7eacf33c431ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::operator/</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="225" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a429ec60a5ab9b94e6d0f047dc6acfca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&lt;</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="229" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="230" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a3a5b8aa9dac48f5338c44d8a67edd506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&lt;</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="237" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="238" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a38d8b057ff138551ebab9bc97b249f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&lt;=</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="246" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="247" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aeb19aa9bc25207d3c07bed12d3dce933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&lt;=</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="254" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="255" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a18c419d8e9ac6de54b91e86f728f9a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&gt;</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="264" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="264" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aeefc28df4d84a49a8c676d003441a599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&gt;</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="272" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="272" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a1ca88e1c74146af8353f400300f00d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&gt;=</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="281" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="281" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ada32ea9b4239b982b65da121121ad043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&gt;=</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="289" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="289" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ac187b38c39a2806ead9fcd7971b659ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator==</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="298" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="298" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a66b952df2f550ebb7c7d84fb4867764d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator==</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="306" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="306" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ad85478377775deeb91d40f063d2d6af2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator!=</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="321" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="321" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a4dd148d24dc1def7cfccb4165d71463f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator!=</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="329" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="329" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aac85be9c0db38919f690d1ab5bc4e92d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&lt;</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="337" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="338" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a9339134494264439b493c76d9df4f912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&lt;=</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="341" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="342" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a74bec7e830944c914b61aaac9dfd30cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&gt;</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="346" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="346" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1af993301950abc010ecca1eb68b2f5511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator&gt;=</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="350" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="350" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a112bacfdc0a3b59ea20838742c433422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator==</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="354" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a27a9b35db0c2c7b929b7b97ad7daa2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::operator!=</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="358" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="358" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ac1c4c1c7a38fa697369b083cf8acbda7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const FloatVal &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="358" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="364" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1af331188925bb67f69bdc0b5a7713e039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::abs</definition>
        <argsstring>(const FloatVal &amp;x)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="369" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="369" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a022d62d6a37275f281c559eeba263a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::sqrt</definition>
        <argsstring>(const FloatVal &amp;x)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="373" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="373" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a3d51153b7d75377eb4375e6384150297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::sqr</definition>
        <argsstring>(const FloatVal &amp;x)</argsstring>
        <name>sqr</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="377" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="377" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1afcf7fe1b1d7b5a995e6d0723f4fabfd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::pow</definition>
        <argsstring>(const FloatVal &amp;x, int n)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="381" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="381" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a19c888fc6b434f22250a9ecd93cf9130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::nroot</definition>
        <argsstring>(const FloatVal &amp;x, int n)</argsstring>
        <name>nroot</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="385" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="385" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a7d342fb59bb86126a201bd4ddbe84819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::max</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="390" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="390" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1addbb59c744aef2c22e05b99f120dc680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::max</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="394" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="394" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a35c41ab7a50aec052e2ac3ee6f43dd9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::max</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="398" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="398" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1abe888c90e6397a1c40887d62fb37116e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::min</definition>
        <argsstring>(const FloatVal &amp;x, const FloatVal &amp;y)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="402" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="402" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a6886e4a924ff120dafd3557d83d0bb8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::min</definition>
        <argsstring>(const FloatVal &amp;x, const FloatNum &amp;y)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="406" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="406" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a19adff43e503ef919b7ee36df32da5df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
        <definition>forceinline FloatVal Gecode::min</definition>
        <argsstring>(const FloatNum &amp;x, const FloatVal &amp;y)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/val.hpp" line="410" column="1" bodyfile="/usr/include/gecode/float/val.hpp" bodystart="410" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a238ae8bc9d6398e4d4aad5bf928c13fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const FloatVar &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float/var/print.hpp" line="86" column="1" bodyfile="/usr/include/gecode/float/var/print.hpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatDomain_1gac1b9fa965f93c359aeadb620614e2b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, FloatVar x, FloatVal n)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="51">$x=n$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1072" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatDomain_1ga3539575aa1f9f3981b09a3eb57c607db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatVal n)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="52">$ x_i=n$</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1075" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatDomain_1gabbb1419f64781c0903b4b5dcdfba5281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, FloatVar x, FloatNum l, FloatNum m)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="54">$ l\leq x\leq u$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1078" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatDomain_1ga8d7875b550ff158237e3c0c776dcea01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatNum l, FloatNum u)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="55">$ l\leq x_i\leq u$</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1081" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatDomain_1gad85b29a27732a8533ca1261e97498bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, FloatVar x, FloatVal n, Reify r)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="56">$ (x=n) \equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1084" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatDomain_1gaf22a2dbfc91454ac60c8d53d334c6377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, FloatVar x, FloatNum l, FloatNum u, Reify r)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="57">$ (l\leq x \leq u) \equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1087" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatDomain_1gade724c23ff439891a745775cf52b1917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, FloatVar x, FloatVar d)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Constrain domain of <emphasis>x</emphasis> according to domain of <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1090" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatDomain_1gad66a7bd6c64a0c63d13d9f006cbf72bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, const FloatVarArgs &amp;d)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Constrain domain of <formula id="58">$ x_i $</formula> according to domain of <formula id="59">$ d_i $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1093" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatRelFloat_1gae112d89eb47c5e2aa360b2fcca92e374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, FloatVar x0, FloatRelType frt, FloatVar x1)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="60">$ x_0 \sim_{frt} x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatRelFloat_1ga951d138b1f3ee892bfc95cd05e797054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, FloatVar x, FloatRelType frt, FloatVal c)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="61">$ x \sim_{frt} c$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatRelFloat_1ga545047265df9b09a4fe31b2e688803ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, FloatVar x, FloatRelType frt, FloatVal c, Reify r)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="62">$(x \sim_{frt} c)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatRelFloat_1ga1362bddaff012fd5b73a980ceeb7f7d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, FloatVar x0, FloatRelType frt, FloatVar x1, Reify r)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="63">$(x_0 \sim_{frt} x_1)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatRelFloat_1ga0bb297bd839cb070bc33b0286a9d05d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatRelType frt, FloatVal c)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVal" kindref="compound">FloatVal</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="64">$ x_i \sim_{frt} c $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatRelFloat_1gaeb161108d774dccf9c12d207f7a8a0e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatRelType frt, FloatVar y)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="65">$ x_i \sim_{frt} y $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1ga121700708772a60191be6256c3c0d151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::min</definition>
        <argsstring>(Home home, FloatVar x0, FloatVar x1, FloatVar x2)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x2</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="72">$ \min\{x_0,x_1\}=x_2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1gac5d6c46b57b9f4440491c503a3912bc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::min</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatVar y)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="73">$ \min x=y$</formula> If <emphasis>x</emphasis> is empty, an exception of type <ref refid="classGecode_1_1Float_1_1TooFewArguments" kindref="compound">Float::TooFewArguments</ref> is thrown. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1ga958cb25ae9754d6cc35c7c6e34ebc1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::max</definition>
        <argsstring>(Home home, FloatVar x0, FloatVar x1, FloatVar x2)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x2</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="74">$ \max\{x_0,x_1\}=x_2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1ga7a21da03098a7a7e7937fc0f347a0637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::max</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatVar y)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="11">$ \max x=y$</formula> If <emphasis>x</emphasis> is empty, an exception of type <ref refid="classGecode_1_1Float_1_1TooFewArguments" kindref="compound">Float::TooFewArguments</ref> is thrown. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1ga145d954fbf9194d03bc87f591cc1eac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::abs</definition>
        <argsstring>(Home home, FloatVar x0, FloatVar x1)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="75">$ |x_0|=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1ga2bb68a37452376ba823d214fe39f3b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::mult</definition>
        <argsstring>(Home home, FloatVar x0, FloatVar x1, FloatVar x2)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x2</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="7">$x_0\cdot x_1=x_2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1ga85465fb45696b53c27f8c1f2ebdf1ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::sqr</definition>
        <argsstring>(Home home, FloatVar x0, FloatVar x1)</argsstring>
        <name>sqr</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="1">$x_0\cdot x_0=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1ga64708360c9e893d05c85e2b646c917df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::sqrt</definition>
        <argsstring>(Home home, FloatVar x0, FloatVar x1)</argsstring>
        <name>sqrt</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="76">$\sqrt{x_0}=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1ga1adef9cf9e923f5555f4ef785596cba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::pow</definition>
        <argsstring>(Home home, FloatVar x0, int n, FloatVar x1)</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="77">${x_0}^{n}=x_1$</formula> for $n 0$. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1gaa8ee4a28933337fc85e339065620bafd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::nroot</definition>
        <argsstring>(Home home, FloatVar x0, int n, FloatVar x1)</argsstring>
        <name>nroot</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="78">${x_0}^{1/n}=x_1$</formula> for $n 0$. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatArith_1ga83b43969ef95d290def0253e74def5ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::div</definition>
        <argsstring>(Home home, FloatVar x0, FloatVar x1, FloatVar x2)</argsstring>
        <name>div</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x2</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="79">$x_0\ \mathrm{div}\ x_1=x_2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatLI_1ga284dbda312f4622458dc1cf54c9d3279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatRelType frt, FloatNum c)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="80">$\sum_{i=0}^{|x|-1}x_i\sim_{frt} c$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatLI_1gae22443a3f3c369c1deba1dd1c076f289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatRelType frt, FloatVar y)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="81">$\sum_{i=0}^{|x|-1}x_i\sim_{frt} y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatLI_1ga978b188d2dc8ce63d077f9b581178bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatRelType frt, FloatNum c, Reify r)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="82">$\left(\sum_{i=0}^{|x|-1}x_i\sim_{frt} c\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatLI_1gab5f8371c45aa0a0973d549472dd0861b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatRelType frt, FloatVar y, Reify r)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="83">$\left(\sum_{i=0}^{|x|-1}x_i\sim_{frt} y\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatLI_1gac716cd203ca14b754b8e2b0340212fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const FloatValArgs &amp;a, const FloatVarArgs &amp;x, FloatRelType frt, FloatNum c)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatValArgs" kindref="compound">FloatValArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="84">$\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{frt} c$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Float_1_1ArgumentSizeMismatch" kindref="compound">Float::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatLI_1gaea1b5dc038a6dc1f57d269662b2f38d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const FloatValArgs &amp;a, const FloatVarArgs &amp;x, FloatRelType frt, FloatVar y)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatValArgs" kindref="compound">FloatValArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="85">$\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{frt} y$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Float_1_1ArgumentSizeMismatch" kindref="compound">Float::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatLI_1ga912315a68c6a85a0807ee66ccf370fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const FloatValArgs &amp;a, const FloatVarArgs &amp;x, FloatRelType frt, FloatNum c, Reify r)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatValArgs" kindref="compound">FloatValArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a89c8c05302dd9f5ca9b53d0c0d82cf45" kindref="member">FloatNum</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="86">$\left(\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{frt} c\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Float_1_1ArgumentSizeMismatch" kindref="compound">Float::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatLI_1ga2658610af0d600bf8acc7d5cca10321c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const FloatValArgs &amp;a, const FloatVarArgs &amp;x, FloatRelType frt, FloatVar y, Reify r)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatValArgs" kindref="compound">FloatValArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1aa318be5bdad369c66855beb9b07e84ec" kindref="member">FloatRelType</ref></type>
          <declname>frt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="87">$\left(\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{frt} y\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Float_1_1ArgumentSizeMismatch" kindref="compound">Float::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatChannel_1gaf575154bbaaa03391f62f991d1cfe6d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::channel</definition>
        <argsstring>(Home home, FloatVar x0, IntVar x1)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <briefdescription>
<para>Post propagator for channeling a float and an integer variable <formula id="19">$ x_0 = x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatChannel_1ga79831ea8df6cbdbea21facf512784f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::channel</definition>
        <argsstring>(Home home, IntVar x0, FloatVar x1)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x1</declname>
        </param>
        <briefdescription>
<para>Post propagator for channeling a float and an integer variable <formula id="19">$ x_0 = x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatExec_1ga951f882608ea98bea6f8378132a51523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::wait</definition>
        <argsstring>(Home home, FloatVar x, void(*c)(Space &amp;home))</argsstring>
        <name>wait</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Execute <emphasis>c</emphasis> when <emphasis>x</emphasis> becomes assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatExec_1ga5a763782e5366d66012462f350cef987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT void</type>
        <definition>GECODE_FLOAT_EXPORT void Gecode::wait</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, void(*c)(Space &amp;home))</argsstring>
        <name>wait</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Execute <emphasis>c</emphasis> when all variables in <emphasis>x</emphasis> become assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranch_1ga24925d545f01537b354e2460f2dc8482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_FLOAT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatVarBranch vars, FloatValBranch vals, FloatBranchFilter bf=NULL, FloatVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref></type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatValBranch" kindref="compound">FloatValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelFloatBranch_1ga1ccd8f38e4fa45b5ce8306eaf7c63ab6" kindref="member">FloatBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="group__TaskModelFloatArith_1ga90db66ac203529fad09f04ba09612e3c" kindref="member">FloatVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1754" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranch_1ga273b1e976614e0536edf223d5cbc867c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_FLOAT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, TieBreak&lt; FloatVarBranch &gt; vars, FloatValBranch vals, FloatBranchFilter bf=NULL, FloatVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1FloatVarBranch" kindref="compound">FloatVarBranch</ref> &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatValBranch" kindref="compound">FloatValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelFloatBranch_1ga1ccd8f38e4fa45b5ce8306eaf7c63ab6" kindref="member">FloatBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="group__TaskModelFloatArith_1ga90db66ac203529fad09f04ba09612e3c" kindref="member">FloatVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1764" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranch_1ga5f219e5bd6d364a07b75dde0a74e7681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_FLOAT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, FloatVar x, FloatValBranch vals, FloatVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatValBranch" kindref="compound">FloatValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelFloatArith_1ga90db66ac203529fad09f04ba09612e3c" kindref="member">FloatVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1774" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranch_1ga9d8be32a99c7bf82e40f571de96d31ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_FLOAT_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, const FloatVarArgs &amp;x, FloatAssign vals, FloatBranchFilter fbf=NULL, FloatVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1FloatVarArgs" kindref="compound">FloatVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatAssign" kindref="compound">FloatAssign</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelFloatBranch_1ga1ccd8f38e4fa45b5ce8306eaf7c63ab6" kindref="member">FloatBranchFilter</ref></type>
          <declname>fbf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="group__TaskModelFloatArith_1ga90db66ac203529fad09f04ba09612e3c" kindref="member">FloatVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign all <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1783" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelFloatBranch_1ga2fb55d4124a66acd7f24f7a84ae5c6c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_FLOAT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_FLOAT_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, FloatVar x, FloatAssign vals, FloatVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatVar" kindref="compound">FloatVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1FloatAssign" kindref="compound">FloatAssign</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelFloatArith_1ga90db66ac203529fad09f04ba09612e3c" kindref="member">FloatVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/float.hh" line="1792" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchAssign_1gaac3546ce5954b706f4a451916900d971" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntAssign" kindref="compound">IntAssign</ref></type>
        <definition>IntAssign Gecode::INT_ASSIGN_MIN</definition>
        <argsstring>(void)</argsstring>
        <name>INT_ASSIGN_MIN</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select smallest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/assign.hpp" line="59" column="1" bodyfile="/usr/include/gecode/int/branch/assign.hpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchAssign_1ga9cf69064246719f6957fda3914b0639f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntAssign" kindref="compound">IntAssign</ref></type>
        <definition>IntAssign Gecode::INT_ASSIGN_MED</definition>
        <argsstring>(void)</argsstring>
        <name>INT_ASSIGN_MED</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select greatest value not greater than the median. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/assign.hpp" line="64" column="1" bodyfile="/usr/include/gecode/int/branch/assign.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchAssign_1gae8dd9858629d58d84d3595f328521468" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntAssign" kindref="compound">IntAssign</ref></type>
        <definition>IntAssign Gecode::INT_ASSIGN_MAX</definition>
        <argsstring>(void)</argsstring>
        <name>INT_ASSIGN_MAX</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select largest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/assign.hpp" line="69" column="1" bodyfile="/usr/include/gecode/int/branch/assign.hpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchAssign_1ga119c223f28034805c52cf786cabf2c82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntAssign" kindref="compound">IntAssign</ref></type>
        <definition>IntAssign Gecode::INT_ASSIGN_RND</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>INT_ASSIGN_RND</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Select random value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/assign.hpp" line="74" column="1" bodyfile="/usr/include/gecode/int/branch/assign.hpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchAssign_1gad1acf3d897f1f741efd5567e545854ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntAssign" kindref="compound">IntAssign</ref></type>
        <definition>IntAssign Gecode::INT_ASSIGN</definition>
        <argsstring>(IntBranchVal v, IntBranchCommit c=NULL)</argsstring>
        <name>INT_ASSIGN</name>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga98ca9bcf71eeeb8d55b408a309a9ce9f" kindref="member">IntBranchVal</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga8a76dc88094c7c583b2afdc0f51d73f8" kindref="member">IntBranchCommit</ref></type>
          <declname>c</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Select value as defined by the value function <emphasis>v</emphasis> and commit function <emphasis>c</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Uses a commit function as default that posts the constraint that a variable <emphasis>x</emphasis> must be equal to the value <emphasis>n</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/assign.hpp" line="79" column="1" bodyfile="/usr/include/gecode/int/branch/assign.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchAssign_1gae40c091d7e81a787edac8f8adf0709f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntAssign" kindref="compound">IntAssign</ref></type>
        <definition>IntAssign Gecode::INT_ASSIGN</definition>
        <argsstring>(BoolBranchVal v, BoolBranchCommit c=NULL)</argsstring>
        <name>INT_ASSIGN</name>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga507b725c3cb54d2523dd544edbccd52a" kindref="member">BoolBranchVal</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1gaf4ad026af38c4abde69c8ea93bc4feee" kindref="member">BoolBranchCommit</ref></type>
          <declname>c</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Select value as defined by the value function <emphasis>v</emphasis> and commit function <emphasis>c</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Uses a commit function as default that posts the constraint that a variable <emphasis>x</emphasis> must be equal to the value <emphasis>n</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/assign.hpp" line="85" column="1" bodyfile="/usr/include/gecode/int/branch/assign.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga99f57de18e36ee7ea64c91a73f2e1132" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_MIN</definition>
        <argsstring>(void)</argsstring>
        <name>INT_VAL_MIN</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select smallest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="68" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga46fb2bfe8b29de694c3364ba9c8e1984" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_MED</definition>
        <argsstring>(void)</argsstring>
        <name>INT_VAL_MED</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select greatest value not greater than the median. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="73" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga780c219bfb868c743079a7155c6ec884" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_MAX</definition>
        <argsstring>(void)</argsstring>
        <name>INT_VAL_MAX</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select largest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="78" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1gafbe0b0e57235c427630633e66afdfe6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_RND</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>INT_VAL_RND</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Select random value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="83" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga184eb130ab7e9ab791a0ba0cd9e0845e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_SPLIT_MIN</definition>
        <argsstring>(void)</argsstring>
        <name>INT_VAL_SPLIT_MIN</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select values not greater than mean of smallest and largest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="88" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga94cdbbd3d21ea8603148b44e75b67269" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_SPLIT_MAX</definition>
        <argsstring>(void)</argsstring>
        <name>INT_VAL_SPLIT_MAX</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select values greater than mean of smallest and largest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="93" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga25f94f22dcbb158161627c3d7e8019d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_RANGE_MIN</definition>
        <argsstring>(void)</argsstring>
        <name>INT_VAL_RANGE_MIN</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select the smallest range of the variable domain if it has several ranges, otherwise select values not greater than mean of smallest and largest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="98" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga260e4a5b84e1df67f46be253f5f1d9c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_RANGE_MAX</definition>
        <argsstring>(void)</argsstring>
        <name>INT_VAL_RANGE_MAX</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select the largest range of the variable domain if it has several ranges, otherwise select values greater than mean of smallest and largest value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="103" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga4fce67b276db8d08267df263515c72e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL</definition>
        <argsstring>(IntBranchVal v, IntBranchCommit c=NULL)</argsstring>
        <name>INT_VAL</name>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga98ca9bcf71eeeb8d55b408a309a9ce9f" kindref="member">IntBranchVal</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga8a76dc88094c7c583b2afdc0f51d73f8" kindref="member">IntBranchCommit</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Select value as defined by the value function <emphasis>v</emphasis> and commit function <emphasis>c</emphasis> Uses a commit function as default that posts the constraints that a variable <emphasis>x</emphasis> must be equal to a value <emphasis>n</emphasis> for the first alternative and that <emphasis>x</emphasis> must be different from <emphasis>n</emphasis> for the second alternative. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="108" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga882a6019ecca381557b02a772718de82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL</definition>
        <argsstring>(BoolBranchVal v, BoolBranchCommit c=NULL)</argsstring>
        <name>INT_VAL</name>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga507b725c3cb54d2523dd544edbccd52a" kindref="member">BoolBranchVal</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1gaf4ad026af38c4abde69c8ea93bc4feee" kindref="member">BoolBranchCommit</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Select value as defined by the value function <emphasis>v</emphasis> and commit function <emphasis>c</emphasis> Uses a commit function as default that posts the constraints that a variable <emphasis>x</emphasis> must be equal to a value <emphasis>n</emphasis> for the first alternative and that <emphasis>x</emphasis> must be different from <emphasis>n</emphasis> for the second alternative. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="114" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga62d59efd54e7421d3c0ab09e72cf4b8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VALUES_MIN</definition>
        <argsstring>(void)</argsstring>
        <name>INT_VALUES_MIN</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Try all values starting from smallest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="120" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga2c20cd57ab16f8547b5971961b4b97e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VALUES_MAX</definition>
        <argsstring>(void)</argsstring>
        <name>INT_VALUES_MAX</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Try all values starting from largest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="125" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1ga7ca4c37ebc63b0e15f7ce26f87c8b03b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_NEAR_MIN</definition>
        <argsstring>(IntSharedArray n)</argsstring>
        <name>INT_VAL_NEAR_MIN</name>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Try value nearest to a given value for a variable, in case of ties use the smaller value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="130" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1gace2540518c6651f899062eb9b4e112c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_NEAR_MAX</definition>
        <argsstring>(IntSharedArray n)</argsstring>
        <name>INT_VAL_NEAR_MAX</name>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Try value nearest to a given value for a variable, in case of ties use the larger value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="135" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1gac71f9733d7ae6bf621ec4f1f0b9149c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_NEAR_INC</definition>
        <argsstring>(IntSharedArray n)</argsstring>
        <name>INT_VAL_NEAR_INC</name>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Try value larger than a given value for a variable first. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="140" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVal_1gaee648c172f50601d06180f58fe4e7ccf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
        <definition>IntValBranch Gecode::INT_VAL_NEAR_DEC</definition>
        <argsstring>(IntSharedArray n)</argsstring>
        <name>INT_VAL_NEAR_DEC</name>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Try value smaller than a given value for a variable first. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/val.hpp" line="145" column="1" bodyfile="/usr/include/gecode/int/branch/val.hpp" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga574ea1d466bb781fa0bb59e535edb3e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_NONE</definition>
        <argsstring>(void)</argsstring>
        <name>INT_VAR_NONE</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select first unassigned variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="108" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gaaca7b912984950379b0c9da0425298d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_RND</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>INT_VAR_RND</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Select random variable (uniform distribution, for tie breaking) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="113" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga3932a59a226542c9882c1f316baf332e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_MERIT_MIN</definition>
        <argsstring>(IntBranchMerit bm, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_MERIT_MIN</name>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1gabd2629d15afdee6f6cb998c1647b210f" kindref="member">IntBranchMerit</ref></type>
          <declname>bm</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with least merit according to branch merit function <emphasis>bm</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="118" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gabaa0f333bd0bfcb5c23f77903f1483b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_MERIT_MIN</definition>
        <argsstring>(BoolBranchMerit bm, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_MERIT_MIN</name>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga9626c7a69aa0213a0a1191dfdb7b9efc" kindref="member">BoolBranchMerit</ref></type>
          <declname>bm</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with least merit according to branch merit function <emphasis>bm</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="124" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gaa230b32190e5a95cc29176a4fa6283a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_MERIT_MAX</definition>
        <argsstring>(IntBranchMerit bm, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_MERIT_MAX</name>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1gabd2629d15afdee6f6cb998c1647b210f" kindref="member">IntBranchMerit</ref></type>
          <declname>bm</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with highest merit according to branch merit function <emphasis>bm</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="130" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga900e23f586b80cf3803e653eb7fa4340" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_MERIT_MAX</definition>
        <argsstring>(BoolBranchMerit bm, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_MERIT_MAX</name>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga9626c7a69aa0213a0a1191dfdb7b9efc" kindref="member">BoolBranchMerit</ref></type>
          <declname>bm</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with highest merit according to branch merit function <emphasis>bm</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="136" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gadf041b512af5c3cdb19d0490ed240d6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_DEGREE_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_DEGREE_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest degree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="142" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gaf42431fa703648134a08f127ec915542" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_DEGREE_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_DEGREE_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest degree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="147" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gafc0a891a3d3b4c9ae2c38e6c97ebe2bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_AFC_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_AFC_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="152" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga8d0668b49db2ae2a3f06e23a104d20bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_AFC_MIN</definition>
        <argsstring>(IntAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_AFC_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1IntAFC" kindref="compound">IntAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="157" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gacf713f0f7d8a07778c3f690a77cd5149" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_AFC_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_AFC_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="162" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gaa797c6bc7d8b58056aa561df940b6ac1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_AFC_MAX</definition>
        <argsstring>(IntAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_AFC_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1IntAFC" kindref="compound">IntAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="167" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gace5856efbbf848f0843f35632292a217" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_ACTIVITY_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_ACTIVITY_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with lowest activity with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="172" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga62026d1d4665a1134769140b6044a943" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_ACTIVITY_MIN</definition>
        <argsstring>(IntActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_ACTIVITY_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1IntActivity" kindref="compound">IntActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with lowest activity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="177" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga0473f8c025f6fdcdf3ed3bbda96344c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_ACTIVITY_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_ACTIVITY_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with highest activity with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="182" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga35d98794d90c93cb72bbf087803eb7d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_ACTIVITY_MAX</definition>
        <argsstring>(IntActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_ACTIVITY_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1IntActivity" kindref="compound">IntActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with highest activity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="187" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga182df297911cdb82e40103f9dee427f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_MIN_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_MIN_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest min. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="192" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga06b56d96f0abf8a70cd039885e8c726f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_MIN_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_MIN_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest min. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="197" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga2bb9a2f111678f099cea980d918fd959" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_MAX_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_MAX_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest max. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="202" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga517de4cc53606623e4ca0da49a47d8e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_MAX_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_MAX_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest max. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="207" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga76001af59f0b9c98e69d7b25c7b1d2e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_SIZE_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_SIZE_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="212" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga26f02b9d0d4ee78acaa8f8822c4b4eaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_SIZE_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_SIZE_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="217" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga741dde8a2e842bc741538d7ebe0ad567" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_DEGREE_SIZE_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_DEGREE_SIZE_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest degree divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="222" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gaa8d156c484a3625a136eebc4a1b1b101" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_DEGREE_SIZE_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_DEGREE_SIZE_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest degree divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="227" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga9ec9f27195237db9642da08f0cb4ffdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_AFC_SIZE_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_AFC_SIZE_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="232" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga7e267fb498378380c29d701c703271db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_AFC_SIZE_MIN</definition>
        <argsstring>(IntAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_AFC_SIZE_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1IntAFC" kindref="compound">IntAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="237" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="237" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gab63facc4f4aebd91981d979c73386ad9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_AFC_SIZE_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_AFC_SIZE_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="242" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gae518800a6c8f016eb5bccf2258eb2658" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_AFC_SIZE_MAX</definition>
        <argsstring>(IntAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_AFC_SIZE_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1IntAFC" kindref="compound">IntAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="247" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="247" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga99e1d4deafb053984e12eb5dbab51430" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_ACTIVITY_SIZE_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_ACTIVITY_SIZE_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest activity divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="252" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga218f481051a7e70666f0de015e38a2cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_ACTIVITY_SIZE_MIN</definition>
        <argsstring>(IntActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_ACTIVITY_SIZE_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1IntActivity" kindref="compound">IntActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest activity divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="257" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga2431d9e6dba953e664dd95e87a8e12da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_ACTIVITY_SIZE_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_ACTIVITY_SIZE_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest activity divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="262" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga7f32d8d6780ee3b232a01de2c836d514" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_ACTIVITY_SIZE_MAX</definition>
        <argsstring>(IntActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_ACTIVITY_SIZE_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1IntActivity" kindref="compound">IntActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest activity divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="267" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="267" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga34fe5f945e96b77d58f3607e7e1b109b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_REGRET_MIN_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_REGRET_MIN_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Select variable with smallest min-regret. </para>        </briefdescription>
        <detaileddescription>
<para>The min-regret of a variable is the difference between the smallest and second-smallest value still in the domain. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="272" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="272" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga3013c4aebd712550247a22160d1f7a6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_REGRET_MIN_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_REGRET_MIN_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Select variable with largest min-regret. </para>        </briefdescription>
        <detaileddescription>
<para>The min-regret of a variable is the difference between the smallest and second-smallest value still in the domain. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="277" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1gabc5752e8e7ef6aefeb3c07b884fc2471" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_REGRET_MAX_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_REGRET_MAX_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Select variable with smallest max-regret. </para>        </briefdescription>
        <detaileddescription>
<para>The max-regret of a variable is the difference between the largest and second-largest value still in the domain. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="282" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="282" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchVar_1ga84b1287813bdaf9941b7295e02b1bcbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
        <definition>IntVarBranch Gecode::INT_VAR_REGRET_MAX_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>INT_VAR_REGRET_MAX_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Select variable with largest max-regret. </para>        </briefdescription>
        <detaileddescription>
<para>The max-regret of a variable is the difference between the largest and second-largest value still in the domain. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/branch/var.hpp" line="287" column="1" bodyfile="/usr/include/gecode/int/branch/var.hpp" bodystart="287" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a949e6c8abe2b8ac0b8e30b2601b1716f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const DFA &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional/dfa.hpp" line="253" column="1" bodyfile="/usr/include/gecode/int/extensional/dfa.hpp" bodystart="260" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a25846cc8c1faadc422884915b2a91eff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const TupleSet &amp;ts)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1TupleSet" kindref="compound">TupleSet</ref> &amp;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/extensional/tuple-set.hpp" line="162" column="1" bodyfile="/usr/include/gecode/int/extensional/tuple-set.hpp" bodystart="172" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a661f7f9c6a54a97ec06a0f9d9d24f862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const IntSet &amp;is)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/int-set-1.hpp" line="229" column="1" bodyfile="/usr/include/gecode/int/int-set-1.hpp" bodystart="236" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a3d4c2d7b34e009bc98db40b1b601a237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
        <definition>Reify Gecode::eqv</definition>
        <argsstring>(BoolVar x)</argsstring>
        <name>eqv</name>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Use equivalence for reification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/reify.hpp" line="73" column="1" bodyfile="/usr/include/gecode/int/reify.hpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a0a41afdcbe2821f9fca7bbfa131f6101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
        <definition>Reify Gecode::imp</definition>
        <argsstring>(BoolVar x)</argsstring>
        <name>imp</name>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Use implication for reification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/reify.hpp" line="77" column="1" bodyfile="/usr/include/gecode/int/reify.hpp" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a9c415b28f900f898d3c3b2914a443a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
        <definition>Reify Gecode::pmi</definition>
        <argsstring>(BoolVar x)</argsstring>
        <name>pmi</name>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Use reverse implication for reification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/reify.hpp" line="81" column="1" bodyfile="/usr/include/gecode/int/reify.hpp" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a629a99502c3891ab7bb3d79b59aba7ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const IntVar &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var/print.hpp" line="137" column="1" bodyfile="/usr/include/gecode/int/var/print.hpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a79be0c025a9f2537a4749c0d07f20998" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const BoolVar &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int/var/print.hpp" line="137" column="1" bodyfile="/usr/include/gecode/int/var/print.hpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1ga7c2c12e121d7bcf1467129b4c2f189d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, IntVar x, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="51">$x=n$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="979" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1gadf571d527e74ef8daac75e06d38cba9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="52">$ x_i=n$</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="983" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1gaa3e1603f997b663ce29c52a8caf4501d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, IntVar x, int l, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="207">$ l\leq x\leq m$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="988" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1ga939b99feb0cdf1eb465e80ce3ce45a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int l, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="208">$ l\leq x_i\leq m$</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="992" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1ga57ec7afa76a3804e5d1cc15730324d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, IntVar x, const IntSet &amp;s, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="209">$ x\in s $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="997" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1gabacca35862e90954318bf51ab6e2aede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntSet &amp;s, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="210">$ x_i\in s$</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1001" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1gaebe0c4b8f1f2980a8bfd75cb10b65268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, IntVar x, int n, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="56">$ (x=n) \equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1006" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1ga1f5f881f668476d073b40c4dfca0d1cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, IntVar x, int l, int m, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="211">$ (l\leq x \leq m) \equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1010" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1gaa2ed9369f350884d87e108caddab9963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, IntVar x, const IntSet &amp;s, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="212">$ (x \in s) \equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1014" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1ga34228afd1f212cf772aa64d759630a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, IntVar x, IntVar d, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Constrain domain of <emphasis>x</emphasis> according to domain of <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1019" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1ga13ad3e4daa484795703075d23fe65297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, BoolVar x, BoolVar d, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Constrain domain of <emphasis>x</emphasis> according to domain of <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1023" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1gaee8b5f4514fd627f73f12013f2f182a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntVarArgs &amp;d, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Constrain domain of <formula id="58">$ x_i $</formula> according to domain of <formula id="59">$ d_i $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1027" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDomain_1gae1a6fe5a941f65ed70ac7169010b3c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, const BoolVarArgs &amp;d, IntConLevel icl=ICL_DEF)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Constrain domain of <formula id="58">$ x_i $</formula> according to domain of <formula id="59">$ d_i $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1031" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelInt_1ga6bab78a10d6bcc60c793c9f0fe01bcff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, IntVar x0, IntRelType irt, IntVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="213">$ x_0 \sim_{irt} x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds (<emphasis>icl</emphasis> = ICL_BND) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1047" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelInt_1ga8c702b768918c58f26ca829b7121dd75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType irt, IntVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="214">$ x_i \sim_{irt} y $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds (<emphasis>icl</emphasis> = ICL_BND) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1056" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelInt_1ga5fc869bbad6324225ac4f1f7a23acb3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, IntVar x, IntRelType irt, int c, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="215">$ x \sim_{irt} c$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1062" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelInt_1ga330c485b7087361125be3fbedb4330b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType irt, int c, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="216">$ x_i \sim_{irt} c $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1068" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelInt_1ga8b4e0105c5c604bebd808c35627273ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, IntVar x0, IntRelType irt, IntVar x1, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="217">$ (x_0 \sim_{irt} x_1)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds (<emphasis>icl</emphasis> = ICL_BND) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1077" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelInt_1ga398d4a25e7b377024db5709c5b035ee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, IntVar x, IntRelType irt, int c, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="218">$(x \sim_{irt} c)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds (<emphasis>icl</emphasis> = ICL_BND) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1086" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelInt_1ga0f2f1de95cda4ffc4cdab128b8f8161f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType irt, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for relation among elements in <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>States that the elements of <emphasis>x</emphasis> are in the following relation:<itemizedlist>
<listitem><para>if <emphasis>r</emphasis> = IRT_LE, <emphasis>r</emphasis> = IRT_LQ, <emphasis>r</emphasis> = IRT_GR, or <emphasis>r</emphasis> = IRT_GQ, then the elements of <emphasis>x</emphasis> are ordered with respect to <emphasis>r</emphasis>. Supports domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default).</para></listitem><listitem><para>if <emphasis>r</emphasis> = IRT_EQ, then all elements of <emphasis>x</emphasis> must be equal. Supports both bounds (<emphasis>icl</emphasis> = ICL_BND) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default).</para></listitem><listitem><para>if <emphasis>r</emphasis> = IRT_NQ, then not all elements of <emphasis>x</emphasis> must be equal. Supports domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelInt_1ga30c3a3679fc18abe2a5a860e2bc31679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType irt, const IntVarArgs &amp;y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for relation between <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that for the inequality relations this corresponds to the lexical order between <emphasis>x</emphasis> and <emphasis>y</emphasis>.</para><para>Supports both bounds (<emphasis>icl</emphasis> = ICL_BND) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default).</para><para>Note that the constraint is also defined if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. That means that if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size, then if <emphasis>r</emphasis> = IRT_EQ the constraint is false and if <emphasis>r</emphasis> = IRT_NQ the constraint is subsumed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gae6a898bc3e7e74921f60a924bf4a9903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x0, IntRelType irt, BoolVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="213">$ x_0 \sim_{irt} x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga71b47881896af6c8d2b51a769f298f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x0, IntRelType irt, BoolVar x1, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="219">$(x_0 \sim_{irt} x_1)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga760c8c33beb8fe172ac3e49e6abf72a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, BoolVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post doamin consistent propagator for <formula id="214">$ x_i \sim_{irt} y $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gafb705fa21fffda764b823fee7e166900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x, IntRelType irt, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="220">$ x \sim_{irt} n$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gad5242073594138591b82750f3f1645db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x, IntRelType irt, int n, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="221">$(x \sim_{irt} n)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga0364bf415371baf32e80de5e1e64513d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Propagates <formula id="222">$ x_i \sim_{irt} n $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga2a0b09997f2f0e84e87794d4129b4998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, const BoolVarArgs &amp;y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for relation between <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that for the inequality relations this corresponds to the lexical order between <emphasis>x</emphasis> and <emphasis>y</emphasis>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga13f2ff9cb2e69d03bcd478414ba96114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for relation between elements in <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>States that the elements of <emphasis>x</emphasis> are in the following relation:<itemizedlist>
<listitem><para>if <emphasis>r</emphasis> = IRT_LE, <emphasis>r</emphasis> = IRT_LQ, <emphasis>r</emphasis> = IRT_GR, or <emphasis>r</emphasis> = IRT_GQ, then the elements of <emphasis>x</emphasis> are ordered with respect to <emphasis>r</emphasis>.</para></listitem><listitem><para>if <emphasis>r</emphasis> = IRT_EQ, then all elements of <emphasis>x</emphasis> must be equal.</para></listitem><listitem><para>if <emphasis>r</emphasis> = IRT_NQ, then not all elements of <emphasis>x</emphasis> must be equal. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gafd5d11ca722d7544ef4f286d7cf16ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x0, BoolOpType o, BoolVar x1, BoolVar x2, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67" kindref="member">BoolOpType</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x2</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean operation on <emphasis>x0</emphasis> and <emphasis>x1</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="223">$ x_0 \diamond_{\mathit{o}} x_1 = x_2$</formula> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gac1b00af339d78737254174e3aeb84235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolVar x0, BoolOpType o, BoolVar x1, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67" kindref="member">BoolOpType</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean operation on <emphasis>x0</emphasis> and <emphasis>x1</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="224">$ x_0 \diamond_{\mathit{o}} x_1 = n$</formula></para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga0f6fe66cc296edfe92dac88ec29a0fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolOpType o, const BoolVarArgs &amp;x, BoolVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67" kindref="member">BoolOpType</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean operation on <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="225">$ x_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} x_{|x|-1}= y$</formula></para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <formula id="226">$|x|&lt;2$</formula> and <emphasis>o</emphasis> is BOT_IMP, BOT_EQV, or BOT_XOR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga0e5133338d9f5fc4147befafb808576e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, BoolOpType o, const BoolVarArgs &amp;x, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67" kindref="member">BoolOpType</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean operation on <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="227">$ x_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} x_{|x|-1}= n$</formula></para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <formula id="226">$|x|&lt;2$</formula> and <emphasis>o</emphasis> is BOT_IMP, BOT_EQV, or BOT_XOR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1gab22418adb6e5fb8e3d8b698fbebef5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::clause</definition>
        <argsstring>(Home home, BoolOpType o, const BoolVarArgs &amp;x, const BoolVarArgs &amp;y, BoolVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>clause</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67" kindref="member">BoolOpType</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean clause with positive variables <emphasis>x</emphasis> and negative variables <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="228">$ x_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} x_{|x|-1} \diamond_{\mathit{o}} \neg y_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} \neg y_{|y|-1}= z$</formula></para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1IllegalOperation" kindref="compound">Int::IllegalOperation</ref>, if <emphasis>o</emphasis> is different from BOT_AND or BOT_OR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga81fb854ca7768875255cea39bac3590d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::clause</definition>
        <argsstring>(Home home, BoolOpType o, const BoolVarArgs &amp;x, const BoolVarArgs &amp;y, int n, IntConLevel icl=ICL_DEF)</argsstring>
        <name>clause</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a90da089a2d573ef55f5f8ee3a8bd0c67" kindref="member">BoolOpType</ref></type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for Boolean clause with positive variables <emphasis>x</emphasis> and negative variables <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="229">$ x_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} x_{|x|-1} \diamond_{\mathit{o}} \neg y_0 \diamond_{\mathit{o}} \cdots \diamond_{\mathit{o}} \neg y_{|y|-1}= n$</formula></para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotZeroOne" kindref="compound">Int::NotZeroOne</ref>, if <emphasis>n</emphasis> is neither 0 or 1.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1IllegalOperation" kindref="compound">Int::IllegalOperation</ref>, if <emphasis>o</emphasis> is different from BOT_AND or BOT_OR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntRelBool_1ga57c3ab43475b8b3055145bdd3708b8a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::ite</definition>
        <argsstring>(Home home, BoolVar b, IntVar x, IntVar y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>ite</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for if-then-else constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Posts propagator for <formula id="230">$ z = b ? x : y $</formula> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntPrecede_1ga8ef5d25d7ff404e0005ff99b1eb4dad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::precede</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int s, int t, IntConLevel=ICL_DEF)</argsstring>
        <name>precede</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator that <emphasis>s</emphasis> precedes <emphasis>t</emphasis> in <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This constraint enforces that <formula id="231">$x_0\neq t$</formula> and <formula id="232">$x_j=t \to \bigvee_{0\leq i&lt;j} x_i=s$</formula> for <formula id="233">$0\leq j&lt;|x|$</formula>. The propagator is domain consistent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntPrecede_1ga014df5e94344559c82d5d42bade5702f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::precede</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;c, IntConLevel=ICL_DEF)</argsstring>
        <name>precede</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator that successive values in <emphasis>c</emphasis> precede each other in <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This constraint enforces that <formula id="234">$x_0\neq c_k$</formula> for <formula id="235">$0&lt;k&lt;|c|$</formula> and <formula id="236">$x_j=c_{k} \to \bigvee_{0\leq i&lt;j} x_i=c_{k-1}$</formula> for <formula id="233">$0\leq j&lt;|x|$</formula> and <formula id="237">$0&lt; k&lt;|c|$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntMember_1ga51c0d8c2caeeb87fc9a696ba9b161bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::member</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>member</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="169">$y\in \{x_0,\ldots,x_{|x|-1}\}$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntMember_1ga2c4238e35a1bd1827454954fdd8ae577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::member</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, BoolVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>member</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="169">$y\in \{x_0,\ldots,x_{|x|-1}\}$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntMember_1ga2711ed8d4b5f7ea575c59f9f9c091120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::member</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>member</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="238">$\left(y\in \{x_0,\ldots,x_{|x|-1}\}\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntMember_1ga78aa348bc35071fdef4248aed77e535e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::member</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, BoolVar y, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>member</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="238">$\left(y\in \{x_0,\ldots,x_{|x|-1}\}\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1gac5e765f23e5bb9cc020ebeae7293b373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, IntSharedArray n, IntVar x0, IntVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="239">$ n_{x_0}=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if the integers in <emphasis>n</emphasis> exceed the limits in <ref refid="namespaceGecode_1_1Int_1_1Limits" kindref="compound">Int::Limits</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1ga396ec3e3c4aa722995c28576059ef693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, IntSharedArray n, IntVar x0, BoolVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="239">$ n_{x_0}=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if the integers in <emphasis>n</emphasis> exceed the limits in <ref refid="namespaceGecode_1_1Int_1_1Limits" kindref="compound">Int::Limits</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1gafb684a434197ae48f52b64e084e281f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, IntSharedArray n, IntVar x0, int x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="239">$ n_{x_0}=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if the integers in <emphasis>n</emphasis> exceed the limits in <ref refid="namespaceGecode_1_1Int_1_1Limits" kindref="compound">Int::Limits</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1ga4a4f5d192db39efd40fd17a3fcf774a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y0, IntVar y1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="240">$ x_{y_0}=y_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds (<emphasis>icl</emphasis> = ICL_BND) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1gad3dd8ff272f224d04fefed054921db65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y0, int y1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="240">$ x_{y_0}=y_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds (<emphasis>icl</emphasis> = ICL_BND) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1gaa7b8871c6f1e9450f689086b99dd8e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntVar y0, BoolVar y1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>y1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="240">$ x_{y_0}=y_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1ga5532028becd41ae5513e11f9c946b0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntVar y0, int y1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="240">$ x_{y_0}=y_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1gaa09808b3b12427438baa2674deecab98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, IntSharedArray a, IntVar x, int w, IntVar y, int h, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="241">$ a_{x+w\cdot y}=z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>a</emphasis> is regarded as a two-dimensional array in row-major order of width <emphasis>w</emphasis> and height <emphasis>h</emphasis>, then <emphasis>z</emphasis> is constrained to be the element in column <emphasis>x</emphasis> and row <emphasis>y</emphasis>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if the integers in <emphasis>n</emphasis> exceed the limits in <ref refid="namespaceGecode_1_1Int_1_1Limits" kindref="compound">Int::Limits</ref>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <formula id="242">$ w\cdot h\neq|a|$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1ga985becb075b85984d4d4f6e779c13ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, IntSharedArray a, IntVar x, int w, IntVar y, int h, BoolVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="241">$ a_{x+w\cdot y}=z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>a</emphasis> is regarded as a two-dimensional array in row-major order of width <emphasis>w</emphasis> and height <emphasis>h</emphasis>, then <emphasis>z</emphasis> is constrained to be the element in column <emphasis>x</emphasis> and row <emphasis>y</emphasis>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if the integers in <emphasis>n</emphasis> exceed the limits in <ref refid="namespaceGecode_1_1Int_1_1Limits" kindref="compound">Int::Limits</ref>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <formula id="242">$ w\cdot h\neq|a|$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1gafeaebae4c55f092fcbec081d4da42047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, const IntVarArgs &amp;a, IntVar x, int w, IntVar y, int h, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="241">$ a_{x+w\cdot y}=z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>a</emphasis> is regarded as a two-dimensional array in row-major order of width <emphasis>w</emphasis> and height <emphasis>h</emphasis>, then <emphasis>z</emphasis> is constrained to be the element in column <emphasis>x</emphasis> and row <emphasis>y</emphasis>.</para><para>Supports both bounds (<emphasis>icl</emphasis> = ICL_BND) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default).</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if the integers in <emphasis>n</emphasis> exceed the limits in <ref refid="namespaceGecode_1_1Int_1_1Limits" kindref="compound">Int::Limits</ref>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <formula id="242">$ w\cdot h\neq|a|$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntElement_1ga018c078d219bb61d4900e710728e38a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;a, IntVar x, int w, IntVar y, int h, BoolVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for <formula id="241">$ a_{x+w\cdot y}=z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>a</emphasis> is regarded as a two-dimensional array in row-major order of width <emphasis>w</emphasis> and height <emphasis>h</emphasis>, then <emphasis>z</emphasis> is constrained to be the element in column <emphasis>x</emphasis> and row <emphasis>y</emphasis>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if the integers in <emphasis>n</emphasis> exceed the limits in <ref refid="namespaceGecode_1_1Int_1_1Limits" kindref="compound">Int::Limits</ref>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <formula id="242">$ w\cdot h\neq|a|$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDistinct_1ga6e551ac667f8b124f747b8707da8caf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::distinct</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntConLevel icl=ICL_DEF)</argsstring>
        <name>distinct</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="243">$ x_i\neq x_j$</formula> for all <formula id="244">$0\leq i\neq j&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports value (<emphasis>icl</emphasis> = ICL_VAL, default), bounds (<emphasis>icl</emphasis> = ICL_BND), and domain consistency (<emphasis>icl</emphasis> = ICL_DOM).</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntDistinct_1ga0952d27e2df2528efa76b0d7ade63a22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::distinct</definition>
        <argsstring>(Home home, const IntArgs &amp;n, const IntVarArgs &amp;x, IntConLevel icl=ICL_DEF)</argsstring>
        <name>distinct</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="245">$ x_i+n_i\neq x_j+n_j$</formula> for all <formula id="244">$0\leq i\neq j&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Supports value (<emphasis>icl</emphasis> = ICL_VAL, default), bounds (<emphasis>icl</emphasis> = ICL_BND), and domain consistency (<emphasis>icl</emphasis> = ICL_DOM). </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if the integers in <emphasis>n</emphasis> exceed the limits in <ref refid="namespaceGecode_1_1Int_1_1Limits" kindref="compound">Int::Limits</ref> or if the sum of <emphasis>n</emphasis> and <emphasis>x</emphasis> exceed the limits. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>n</emphasis> are of different size. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply. </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntChannel_1ga7d814ba66077284ee4fe2a6126ff116b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::channel</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntVarArgs &amp;y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="246">$ x_i = j\leftrightarrow y_j=i$</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Supports domain consistency (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>, default). </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> or <emphasis>y</emphasis> contain the same unassigned variable multiply. Note that a variable can occur in both <emphasis>x</emphasis> and <emphasis>y</emphasis>, but not more than once in either <emphasis>x</emphasis> or <emphasis>y</emphasis>. </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1516" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntChannel_1ga89b5c52a588127462bb20572512b509e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::channel</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int xoff, const IntVarArgs &amp;y, int yoff, IntConLevel icl=ICL_DEF)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xoff</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>yoff</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="247">$ x_i - \mathit{xoff} = j\leftrightarrow y_j - \mathit{yoff} = i$</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Supports domain consistency (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>, default). </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> or <emphasis>y</emphasis> contain the same unassigned variable multiply. Note that a variable can occur in both <emphasis>x</emphasis> and <emphasis>y</emphasis>, but not more than once in either <emphasis>x</emphasis> or <emphasis>y</emphasis>. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>xoff</emphasis> or <emphasis>yoff</emphasis> are negative. </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntChannel_1ga424587a8011aab2b91899df30c47be85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::channel</definition>
        <argsstring>(Home home, BoolVar x0, IntVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for channeling a Boolean and an integer variable <formula id="19">$ x_0 = x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntChannel_1ga619a04a9d728a308d83f73dd81cf377c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline void</type>
        <definition>forceinline void Gecode::channel</definition>
        <argsstring>(Home home, IntVar x0, BoolVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for channeling an integer and a Boolean variable <formula id="19">$ x_0 = x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1543" column="1" bodyfile="/usr/include/gecode/int.hh" bodystart="1543" bodyend="1546"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntChannel_1ga9517534eac5e8c615b64f2f1964fc470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::channel</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntVar y, int o=0, IntConLevel icl=ICL_DEF)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for channeling Boolean and integer variables <formula id="112">$ x_i = 1\leftrightarrow y=i+o$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntSorted_1ga9f95517778d801d08145fc55e7c688fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::sorted</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntVarArgs &amp;y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>sorted</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator that <emphasis>y</emphasis> is <emphasis>x</emphasis> sorted in increasing order. </para>        </briefdescription>
        <detaileddescription>
<para>Might throw the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> differ in size.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> or <emphasis>y</emphasis> contain shared unassigned variables. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1575" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntSorted_1gab048e48aeba98ddabe19e0b55d8b31fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::sorted</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntVarArgs &amp;y, const IntVarArgs &amp;z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>sorted</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator that <emphasis>y</emphasis> is <emphasis>x</emphasis> sorted in increasing order. </para>        </briefdescription>
        <detaileddescription>
<para>The values in <emphasis>z</emphasis> describe the sorting permutation, that is <formula id="248">$\forall i\in\{0,\dots,|x|-1\}: x_i=y_{z_i} $</formula>.</para><para>Might throw the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> differ in size.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> or <emphasis>y</emphasis> contain shared unassigned variables. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1ga1ed6f089699260b994a25197199337a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int n, IntRelType irt, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="249">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=n\}\sim_{irt} m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Performs domain propagation but is not domain consistent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1615" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1ga19137fef029a0bdc303b9150c00158ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntSet &amp;y, IntRelType irt, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="250">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i\in y\}\sim_{irt} m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Performs domain propagation but is not domain consistent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1gaf88b0ffd3f1b53f40272a0aadec44d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, IntRelType irt, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="251">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y\}\sim_{irt} m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Performs domain propagation (<emphasis>icl</emphasis> = ICL_DOM, default) and slightly less domain propagation (all other values for <emphasis>icl</emphasis>), where <emphasis>y</emphasis> is not pruned. Note that in both cases propagation is not comain consistent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1632" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1gab0e16924d019568614c052e347e80434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;y, IntRelType irt, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="252">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y_i\}\sim_{irt} m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Performs domain propagation but is not domain consistent.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1ga853737a9aa2fa692231c513e02259e0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int n, IntRelType irt, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="253">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=n\}\sim_{irt} z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Performs domain propagation but is not domain consistent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1ga0a1888fb9973c889486cde01ad25b53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntSet &amp;y, IntRelType irt, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="254">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i\in y\}\sim_{irt} z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Performs domain propagation but is not domain consistent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1gadb364a1368493fbc3b560bff0552a7e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, IntRelType irt, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="255">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y\}\sim_{irt} z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Performs domain propagation (<emphasis>icl</emphasis> = ICL_DOM, default) and slightly less domain propagation (all other values for <emphasis>icl</emphasis>), where <emphasis>y</emphasis> is not pruned. Note that in both cases propagation is not comain consistent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1666" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1ga30a59054095263fa3ccb5b19c510276d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;y, IntRelType irt, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="256">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y_i\}\sim_{irt} z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Performs domain propagation but is not domain consistent.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1676" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1ga4fd4197faad67eda32e1dee441e4d67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntVarArgs &amp;c, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Posts a global count (cardinality) constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Posts the constraint that <formula id="257">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=j\}=c_j$</formula> and <formula id="258">$ \bigcup_i \{x_i\} \subseteq \{0,\ldots,|c|-1\}$</formula> (no other value occurs).</para><para>Supports value (<emphasis>icl</emphasis> = ICL_VAL, default), bounds (<emphasis>icl</emphasis> = ICL_BND), and domain consistency (<emphasis>icl</emphasis> = ICL_DOM).</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1ga2316b4f771d2017b9af305387a9f4d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntSetArgs &amp;c, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="group__TaskModelIntArgs_1ga07f276f408888e46205328c9ec668bea" kindref="member">IntSetArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Posts a global count (cardinality) constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Posts the constraint that <formula id="259">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=j\}\in c_j$</formula> and <formula id="258">$ \bigcup_i \{x_i\} \subseteq \{0,\ldots,|c|-1\}$</formula> (no other value occurs).</para><para>Supports value (<emphasis>icl</emphasis> = ICL_VAL, default), bounds (<emphasis>icl</emphasis> = ICL_BND), and domain consistency (<emphasis>icl</emphasis> = ICL_DOM).</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1710" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1ga27e479f61235a3ed386317adb332718d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntVarArgs &amp;c, const IntArgs &amp;v, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Posts a global count (cardinality) constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Posts the constraint that <formula id="260">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=v_j\}=c_j$</formula> and <formula id="261">$ \bigcup_i \{x_i\} \subseteq \bigcup_j \{v_j\}$</formula> (no other value occurs).</para><para>Supports value (<emphasis>icl</emphasis> = ICL_VAL, default), bounds (<emphasis>icl</emphasis> = ICL_BND), and domain consistency (<emphasis>icl</emphasis> = ICL_DOM).</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>c</emphasis> and <emphasis>v</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1gad92d3079cd8295c13dd45d2452d1683c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntSetArgs &amp;c, const IntArgs &amp;v, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="group__TaskModelIntArgs_1ga07f276f408888e46205328c9ec668bea" kindref="member">IntSetArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Posts a global count (cardinality) constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Posts the constraint that <formula id="262">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=v_j\}\in c_j$</formula> and <formula id="261">$ \bigcup_i \{x_i\} \subseteq \bigcup_j \{v_j\}$</formula> (no other value occurs).</para><para>Supports value (<emphasis>icl</emphasis> = ICL_VAL, default), bounds (<emphasis>icl</emphasis> = ICL_BND), and domain consistency (<emphasis>icl</emphasis> = ICL_DOM).</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>c</emphasis> and <emphasis>v</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1751" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntCount_1gafc87338a01cc14facff92fab0b358ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::count</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntSet &amp;c, const IntArgs &amp;v, IntConLevel icl=ICL_DEF)</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Posts a global count (cardinality) constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Posts the constraint that <formula id="263">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=v_j\}\in c$</formula> and <formula id="261">$ \bigcup_i \{x_i\} \subseteq \bigcup_j \{v_j\}$</formula> (no other value occurs).</para><para>Supports value (<emphasis>icl</emphasis> = ICL_VAL, default), bounds (<emphasis>icl</emphasis> = ICL_BND), and domain consistency (<emphasis>icl</emphasis> = ICL_DOM).</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>c</emphasis> and <emphasis>v</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntNValues_1gabd429c980b8dd6b587abce73719d6316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::nvalues</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType irt, int y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>nvalues</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="264">$\#\{x_0,\ldots,x_{|x|-1}\}\sim_{irt} y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1793" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntNValues_1gaeebab50fe952d5c497aba3f210b9f763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::nvalues</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType irt, IntVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>nvalues</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="264">$\#\{x_0,\ldots,x_{|x|-1}\}\sim_{irt} y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1799" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntNValues_1gafbc0d8ee2df9c2b78463de0b3507ed4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::nvalues</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, int y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>nvalues</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="264">$\#\{x_0,\ldots,x_{|x|-1}\}\sim_{irt} y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1805" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntNValues_1gab068e0886509dcbb6de7b8c99789be9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::nvalues</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, IntVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>nvalues</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="264">$\#\{x_0,\ldots,x_{|x|-1}\}\sim_{irt} y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1811" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntSequence_1ga3bc04a3aea7c48a707d6b551fee2127f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::sequence</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntSet &amp;s, int q, int l, int u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>sequence</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="265">$\operatorname{sequence}(x,s,q,l,u)$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts a domain consistent propagator for the constraint <formula id="266">$\bigwedge_{i=0}^{|x|-q} \operatorname{among}(\langle x_i,\ldots,x_{i+q-1}\rangle,s,l,u)$</formula> where the among constraint is defined as <formula id="267">$l\leq\#\{j\in\{i,\ldots,i+q-1\}\;|\;x_j\in s\} \leq u$</formula>.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para>Of type <ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <formula id="268">$|x|=0$</formula>.</para></listitem><listitem><para>Of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para>Of type Int::OutOfRange, if <formula id="269">$q &lt; 1 \vee q &gt; |x|$</formula>. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1836" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntSequence_1ga60b3367a470e709749114cbd9af8f899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::sequence</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, const IntSet &amp;s, int q, int l, int u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>sequence</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="265">$\operatorname{sequence}(x,s,q,l,u)$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Posts a domain consistent propagator for the constraint <formula id="266">$\bigwedge_{i=0}^{|x|-q} \operatorname{among}(\langle x_i,\ldots,x_{i+q-1}\rangle,s,l,u)$</formula> where the among constraint is defined as <formula id="267">$l\leq\#\{j\in\{i,\ldots,i+q-1\}\;|\;x_j\in s\} \leq u$</formula>.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para>Of type <ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <formula id="268">$|x|=0$</formula>.</para></listitem><listitem><para>Of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para>Of type Int::OutOfRange, if <formula id="269">$q &lt; 1 \vee q &gt; |x|$</formula>. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExt_1gab5a81dfd00524e8840f18cbd07007c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::extensional</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, DFA d, IntConLevel icl=ICL_DEF)</argsstring>
        <name>extensional</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for extensional constraint described by a <ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The elements of <emphasis>x</emphasis> must be a word of the language described by the <ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref> <emphasis>d</emphasis>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply. If shared occurences of variables are required, unshare should be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="1997" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExt_1gad095a3cd636e002ce1e0f7635ce91793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::extensional</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, DFA d, IntConLevel icl=ICL_DEF)</argsstring>
        <name>extensional</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post domain consistent propagator for extensional constraint described by a <ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The elements of <emphasis>x</emphasis> must be a word of the language described by the <ref refid="classGecode_1_1DFA" kindref="compound">DFA</ref> <emphasis>d</emphasis>.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply. If shared occurences of variables are required, unshare should be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2011" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExt_1gaeb7c7d875c43b1292e52bccddc6500ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::extensional</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const TupleSet &amp;t, ExtensionalPropKind epk=EPK_DEF, IntConLevel icl=ICL_DEF)</argsstring>
        <name>extensional</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1TupleSet" kindref="compound">TupleSet</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntExt_1ga239a8386d959c6bbd2c1a59e1b0ac8bb" kindref="member">ExtensionalPropKind</ref></type>
          <declname>epk</declname>
          <defval><ref refid="group__TaskModelIntExt_1gga239a8386d959c6bbd2c1a59e1b0ac8bba13685778bcbfc4aa364668b378b7f9da" kindref="member">EPK_DEF</ref></defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="270">$x\in t$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Supports implementations optimized for memory (<emphasis>epk</emphasis> = <emphasis>EPK_MEMORY</emphasis>, default) and speed (<emphasis>epk</emphasis> = <emphasis>EPK_SPEED</emphasis>). </para></listitem>
<listitem><para>Supports domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default) only. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>t</emphasis> are of different size. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotYetFinalized" kindref="compound">Int::NotYetFinalized</ref>, if the tuple set <emphasis>t</emphasis> has not been finalized.</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para>If the domains for the <formula id="189">$x_i$</formula> are not dense and have similar bounds, lots of memory will be wasted (memory consumption is in <formula id="271">$ O\left(|x|\cdot\min_i(\underline{x_i})\cdot\max_i(\overline{x_i})\right)$</formula> for the basic algorithm (<emphasis>epk</emphasis> = <emphasis>EPK_MEMORY</emphasis>) and additionally <formula id="272">$ O\left(|x|^2\cdot\min_i(\underline{x_i})\cdot\max_i(\overline{x_i})\right)$</formula> for the incremental algorithm (<emphasis>epk</emphasis> = <emphasis>EPK_SPEED</emphasis>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExt_1ga0060b43343e63df7365532f215ac6aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::extensional</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, const TupleSet &amp;t, ExtensionalPropKind epk=EPK_DEF, IntConLevel icl=ICL_DEF)</argsstring>
        <name>extensional</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1TupleSet" kindref="compound">TupleSet</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntExt_1ga239a8386d959c6bbd2c1a59e1b0ac8bb" kindref="member">ExtensionalPropKind</ref></type>
          <declname>epk</declname>
          <defval><ref refid="group__TaskModelIntExt_1gga239a8386d959c6bbd2c1a59e1b0ac8bba13685778bcbfc4aa364668b378b7f9da" kindref="member">EPK_DEF</ref></defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="270">$x\in t$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Supports implementations optimized for memory (<emphasis>epk</emphasis> = <emphasis>EPK_MEMORY</emphasis>, default) and speed (<emphasis>epk</emphasis> = <emphasis>EPK_SPEED</emphasis>). </para></listitem>
<listitem><para>Supports domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default) only. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>t</emphasis> are of different size. </para></listitem>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1NotYetFinalized" kindref="compound">Int::NotYetFinalized</ref>, if the tuple set <emphasis>t</emphasis> has not been finalized. </para></listitem>
</itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1gaf34fc0b6e702cc654e6eaafc6052c4bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::min</definition>
        <argsstring>(Home home, IntVar x0, IntVar x1, IntVar x2, IntConLevel icl=ICL_DEF)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x2</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="72">$ \min\{x_0,x_1\}=x_2$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1ga32483ca65c05e4217674816e54c735bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::min</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="73">$ \min x=y$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM).</para><para>If <emphasis>x</emphasis> is empty, an exception of type <ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref> is thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1ga895be25c475d6247bb247154a012604e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::max</definition>
        <argsstring>(Home home, IntVar x0, IntVar x1, IntVar x2, IntConLevel icl=ICL_DEF)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x2</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="74">$ \max\{x_0,x_1\}=x_2$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1ga33029f4ac646bb8502a9fdc8dde911c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::max</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="11">$ \max x=y$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM).</para><para>If <emphasis>x</emphasis> is empty, an exception of type <ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref> is thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1ga847445d5dbb8587a421041738895d4c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::abs</definition>
        <argsstring>(Home home, IntVar x0, IntVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="75">$ |x_0|=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1ga998048e34bbc19502bea5ee6c76f403f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::mult</definition>
        <argsstring>(Home home, IntVar x0, IntVar x1, IntVar x2, IntConLevel icl=ICL_DEF)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x2</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="7">$x_0\cdot x_1=x_2$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1gae4ddabd7038fee7954363f38a2e324c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::divmod</definition>
        <argsstring>(Home home, IntVar x0, IntVar x1, IntVar x2, IntVar x3, IntConLevel icl=ICL_DEF)</argsstring>
        <name>divmod</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x2</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x3</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="273">$x_0\ \mathrm{div}\ x_1=x_2 \land x_0\ \mathrm{mod}\ x_1 = x_3$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1gaf4391e636a2beb0c95ec9311a7aebb4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::div</definition>
        <argsstring>(Home home, IntVar x0, IntVar x1, IntVar x2, IntConLevel icl=ICL_DEF)</argsstring>
        <name>div</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x2</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="79">$x_0\ \mathrm{div}\ x_1=x_2$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1ga4cd6235cdf64674a689b4d75da983394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::mod</definition>
        <argsstring>(Home home, IntVar x0, IntVar x1, IntVar x2, IntConLevel icl=ICL_DEF)</argsstring>
        <name>mod</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x2</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="274">$x_0\ \mathrm{mod}\ x_1=x_2$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1ga7b955cc60c82adc4137f1288d9c65d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::sqr</definition>
        <argsstring>(Home home, IntVar x0, IntVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>sqr</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="275">$x_0^2=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1gaf5d1721e17b0ed6b63ceb7f865c9b948" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::sqrt</definition>
        <argsstring>(Home home, IntVar x0, IntVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>sqrt</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="276">$\lfloor\sqrt{x_0}\rfloor=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1ga8ea0608babb3c72b26c70fee526b9851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::pow</definition>
        <argsstring>(Home home, IntVar x0, int n, IntVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="277">$x_0^n=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM).</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>n</emphasis> is negative. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntArith_1ga30a853f9b7b106996c56f53453048dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::nroot</definition>
        <argsstring>(Home home, IntVar x0, int n, IntVar x1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>nroot</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="278">$\lfloor\sqrt[n]{x_0}\rfloor=x_1$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports both bounds consistency (<emphasis>icl</emphasis> = ICL_BND, default) and domain consistency (<emphasis>icl</emphasis> = ICL_DOM).</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>n</emphasis> is not strictly positive. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLI_1ga5774b00d05e8bfbc3bcd0d9131208354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType irt, int c, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="280">$\sum_{i=0}^{|x|-1}x_i\sim_{irt} c$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLI_1ga300e7f725a9136ffed0ee10b09989a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType irt, IntVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="281">$\sum_{i=0}^{|x|-1}x_i\sim_{irt} y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLI_1gaf2f786dba2460abdbfcd49632604dd2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType irt, int c, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="282">$\left(\sum_{i=0}^{|x|-1}x_i\sim_{irt} c\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLI_1gaa32ac910a48707f1ae93da47214a56dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType irt, IntVar y, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="283">$\left(\sum_{i=0}^{|x|-1}x_i\sim_{irt} y\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLI_1gaa119ec6738ed6c1d160d4ec76f72c111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntArgs &amp;a, const IntVarArgs &amp;x, IntRelType irt, int c, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="167">$\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{irt} c$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLI_1gaecff4096c0a258cb5443558582ac3c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntArgs &amp;a, const IntVarArgs &amp;x, IntRelType irt, IntVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="284">$\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{irt} y$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLI_1ga8ee4949b82e5b9724c0322e21c67cc7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntArgs &amp;a, const IntVarArgs &amp;x, IntRelType irt, int c, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="285">$\left(\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{irt} c\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLI_1ga56e3c9476b885fa0b159734b83a400c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntArgs &amp;a, const IntVarArgs &amp;x, IntRelType irt, IntVar y, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="286">$\left(\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{irt} y\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLB_1ga5723a2a0c22dce2ee637d7febf9a79fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, int c, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="280">$\sum_{i=0}^{|x|-1}x_i\sim_{irt} c$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLB_1ga4a6866342f4043be87994a6295d79620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, int c, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="282">$\left(\sum_{i=0}^{|x|-1}x_i\sim_{irt} c\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLB_1ga0377dae703fae3f9eb654e46caee7ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, IntVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="281">$\sum_{i=0}^{|x|-1}x_i\sim_{irt} y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLB_1ga2e604d17fefe175e6c08885327e4bb6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType irt, IntVar y, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="283">$\left(\sum_{i=0}^{|x|-1}x_i\sim_{irt} y\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLB_1ga0b0fa410d388e09e1ab2ca5d8e14675a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntArgs &amp;a, const BoolVarArgs &amp;x, IntRelType irt, int c, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="167">$\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{irt} c$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLB_1gaeb4aa050deecc60358abb4ce2bfd3343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntArgs &amp;a, const BoolVarArgs &amp;x, IntRelType irt, int c, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="285">$\left(\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{irt} c\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLB_1ga9307eb336b403fd31292102e261fbb03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntArgs &amp;a, const BoolVarArgs &amp;x, IntRelType irt, IntVar y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="284">$\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{irt} y$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntLB_1ga529d0314e29596319a3ae132118208ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::linear</definition>
        <argsstring>(Home home, const IntArgs &amp;a, const BoolVarArgs &amp;x, IntRelType irt, IntVar y, Reify r, IntConLevel icl=ICL_DEF)</argsstring>
        <name>linear</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>irt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="286">$\left(\sum_{i=0}^{|x|-1}a_i\cdot x_i\sim_{irt} y\right)\equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>a</emphasis> and <emphasis>x</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBinPacking_1ga1a066198d4b99975451156fed5c48914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::binpacking</definition>
        <argsstring>(Home home, const IntVarArgs &amp;l, const IntVarArgs &amp;b, const IntArgs &amp;s, IntConLevel icl=ICL_DEF)</argsstring>
        <name>binpacking</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for bin packing. </para>        </briefdescription>
        <detaileddescription>
<para>The variables in <emphasis>l</emphasis> are the loads for each bin, whereas the variables in <emphasis>b</emphasis> define for each item into which bin it is packed. The integer values <emphasis>s</emphasis> define the size of the items.</para><para>It is propagated that for each <formula id="287">$j$</formula> with <formula id="288">$0\leq j&lt;|l|$</formula> the constraint <formula id="289">$l_j=\sum_{0\leq i&lt;|b|\wedge b_i=j}s_i$</formula> holds and that for each <formula id="200">$i$</formula> with <formula id="290">$0\leq i&lt;|b|$</formula> the constraint <formula id="291">$0\leq b_i&lt;|l|$</formula> holds.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para>Of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref> if <emphasis>b</emphasis> and <emphasis>s</emphasis> are not of the same size.</para></listitem><listitem><para>Of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref> if <emphasis>l</emphasis> and <emphasis>b</emphasis> share unassigned variables.</para></listitem><listitem><para>Of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref> if <emphasis>s</emphasis> contains a negative number. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGeoPacking_1ga38d3dcba5887db04ed6dc3c3f8037e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::nooverlap</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;w, const IntVarArgs &amp;y, const IntArgs &amp;h, IntConLevel icl=ICL_DEF)</argsstring>
        <name>nooverlap</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for rectangle packing. </para>        </briefdescription>
        <detaileddescription>
<para>Propagate that no two rectangles as described by the coordinates <emphasis>x</emphasis>, and <emphasis>y</emphasis>, widths <emphasis>w</emphasis>, and heights <emphasis>h</emphasis> overlap.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para>Of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref> if <emphasis>x</emphasis>, <emphasis>w</emphasis>, <emphasis>y</emphasis>, or <emphasis>h</emphasis> are not of the same size.</para></listitem><listitem><para>Of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref> if <emphasis>w</emphasis> or <emphasis>h</emphasis> contain a negative number. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGeoPacking_1gaae991006146dd8974e20ff94cb6af8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::nooverlap</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;w, const IntVarArgs &amp;y, const IntArgs &amp;h, const BoolVarArgs &amp;o, IntConLevel icl=ICL_DEF)</argsstring>
        <name>nooverlap</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for rectangle packing. </para>        </briefdescription>
        <detaileddescription>
<para>Propagate that no two rectangles as described by the coordinates <emphasis>x</emphasis>, and <emphasis>y</emphasis>, widths <emphasis>w</emphasis>, and heights <emphasis>h</emphasis> overlap. The rectangles can be optional, as described by the Boolean variables <emphasis>o</emphasis>.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para>Of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref> if <emphasis>x</emphasis>, <emphasis>w</emphasis>, <emphasis>y</emphasis>, <emphasis>h</emphasis>, or <emphasis>o</emphasis> are not of the same size.</para></listitem><listitem><para>Of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref> if <emphasis>w</emphasis> or <emphasis>h</emphasis> contain a negative number. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGeoPacking_1gacb5932db1f9fb24118669b5eaa6010a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::nooverlap</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x0, const IntVarArgs &amp;w, const IntVarArgs &amp;x1, const IntVarArgs &amp;y0, const IntVarArgs &amp;h, const IntVarArgs &amp;y1, IntConLevel icl=ICL_DEF)</argsstring>
        <name>nooverlap</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y1</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for rectangle packing. </para>        </briefdescription>
        <detaileddescription>
<para>Propagate that no two rectangles as described by the start coordinates <emphasis>x0</emphasis> and <emphasis>y0</emphasis>, widths <emphasis>w</emphasis> and heights <emphasis>h</emphasis>, and end coordinates <emphasis>x1</emphasis> and <emphasis>y1</emphasis> overlap.</para><para>Note that the relations <formula id="292">$x0_i+w_i=x1_i$</formula> and <formula id="293">$y0_i+h_i=y1_i$</formula> are not propagated (for <formula id="294">$0\leq i&lt;|x0|$</formula>). That is, additional constraints must be posted to enforce that relation.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para>Of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref> if <emphasis>x0</emphasis>, <emphasis>x1</emphasis>, <emphasis>w</emphasis>, <emphasis>y0</emphasis>, <emphasis>y1</emphasis>, or <emphasis>h</emphasis> are not of the same size. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGeoPacking_1ga073c317980a6bb6a04b36a7a7e2fefcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::nooverlap</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x0, const IntVarArgs &amp;w, const IntVarArgs &amp;x1, const IntVarArgs &amp;y0, const IntVarArgs &amp;h, const IntVarArgs &amp;y1, const BoolVarArgs &amp;o, IntConLevel icl=ICL_DEF)</argsstring>
        <name>nooverlap</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator for rectangle packing. </para>        </briefdescription>
        <detaileddescription>
<para>Propagate that no two rectangles as described by the start coordinates <emphasis>x0</emphasis> and <emphasis>y0</emphasis>, widths <emphasis>w</emphasis> and heights <emphasis>h</emphasis>, and end coordinates <emphasis>x1</emphasis> and <emphasis>y1</emphasis> overlap. The rectangles can be optional, as described by the Boolean variables <emphasis>o</emphasis>.</para><para>Note that the relations <formula id="292">$x0_i+w_i=x1_i$</formula> and <formula id="293">$y0_i+h_i=y1_i$</formula> are not propagated (for <formula id="294">$0\leq i&lt;|x0|$</formula>). That is, additional constraints must be posted to enforce that relation.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para>Of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref> if <emphasis>x0</emphasis>, <emphasis>x1</emphasis>, <emphasis>w</emphasis>, <emphasis>y0</emphasis>, <emphasis>y1</emphasis>, or <emphasis>h</emphasis> are not of the same size. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gab3d035d788ebde42a7ec3630b1847e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntVarArgs &amp;m, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntVarArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2632" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga72bbbbe583e8f639e2c7ded0637966c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntArgs &amp;m, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntVarArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga1b3f79372d79f46a6cd0043830e7a18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntVarArgs &amp;m, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntVarArgs &amp;e, const IntVarArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaf44ecae94701dcbad2f6d7964e5d8c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntArgs &amp;m, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntVarArgs &amp;e, const IntVarArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaa56931a4aac3e6672b47c2527d27e136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntVarArgs &amp;m, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gad36dc738cf8a14308052c42827bda2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntArgs &amp;m, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2682" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaff1eb3d747385d94554face6b1ac3c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntVarArgs &amp;m, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gad6a9f0e413966e6bf757dd279bca65cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulatives</definition>
        <argsstring>(Home home, const IntArgs &amp;m, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const IntArgs &amp;c, bool at_most, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulatives</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>at_most</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for the cumulatives constraint. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for the cumulatives constraint. This function creates propagators for the cumulatives constraint presented in <emphasis>&quot;A new multi-resource cumulatives constraint
with negative heights&quot;</emphasis>, Nicolas Beldiceanu and Mats Carlsson, Principles and Practice of Constraint Programming 2002.</para><para>The constraint models a set of machines and a set of tasks that should be assigned to the machines. The machines have a positive resource limit and the tasks each have a resource usage that can be either positive, negative, or zero. The constraint is enforced over each point in time for a machine where there is at least one task assigned.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The limit for a machine is either the maximum amount available at any given time (<emphasis>at_most</emphasis> = true), or else the least amount to be used (<emphasis>at_most</emphasis> = false).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>home</parametername>
</parameternamelist>
<parameterdescription>
<para>current space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="296">$ m_i $</formula> is the machine assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="298">$ s_i $</formula> is the start time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="299">$ p_i $</formula> is the processing time of task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="300">$ e_i $</formula> is the end time assigned to task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="301">$ u_i $</formula> is the amount of resources consumed by task <formula id="297">$ i $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="302">$ c_r $</formula> is the capacity, the amount of resource available for machine <formula id="303">$ r $</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>at_most</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>at_most</emphasis> tells if the amount of resources used for a machine should be less than the limit (<emphasis>at_most</emphasis> = true) or greater than the limit (<emphasis>at_most</emphasis> = false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icl</parametername>
</parameternamelist>
<parameterdescription>
<para>Supports value-consistency only (<emphasis>icl</emphasis> = ICL_VAL, default).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the sizes of the arguments representing tasks does not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if any numerical argument is larger than <ref refid="namespaceGecode_1_1Int_1_1Limits_1ad2fea399ca2de529a8b294fefe37e177" kindref="member">Int::Limits::max</ref> or less than <ref refid="namespaceGecode_1_1Int_1_1Limits_1a866b451d77425f6d442aa9f114e1424c" kindref="member">Int::Limits::min</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaa0f3653b3001bc88b9cb6115bdd8d2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const IntVarArgs &amp;s, const IntArgs &amp;p, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with start times <emphasis>s</emphasis> and processing times <emphasis>p</emphasis> on a unary resource. The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> and <emphasis>p</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>s</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis> contains an integer that is negative or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gad4a290dcf9cdbf41a422dd73e14c95bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const IntVarArgs &amp;s, const IntArgs &amp;p, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a unary resource. The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>s</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis> contains an integer that is negative or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2751" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gac691c987f7ce4056b74a8775f90a0469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a22162e3abb33bfc0709669e9e855dbc0" kindref="member">TaskTypeArgs</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with flexible times <emphasis>flex</emphasis> and fixed times <emphasis>fix</emphasis> on a unary resource. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> and <emphasis>p</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis> contains an integer that is negative for a task with type <computeroutput>TT_FIXP</computeroutput> or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2783" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga22d7fd0b24ef044d4b69885d09a3d7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a22162e3abb33bfc0709669e9e855dbc0" kindref="member">TaskTypeArgs</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule optional tasks with flexible times <emphasis>flex</emphasis>, fixed times <emphasis>fix</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a unary resource. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis> contains an integer that is negative for a task with type <computeroutput>TT_FIXP</computeroutput> or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga6272031c2406f9e872a845a110d8dafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, and end times <emphasis>e</emphasis> on a unary resource. The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para>The processing times are constrained to be non-negative.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> and <emphasis>p</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2841" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaf4cb91074d98e1791b0c88c0783073dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unary</definition>
        <argsstring>(Home home, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unary</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on unary resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, end times <emphasis>e</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a unary resource. The propagator uses the algorithms from: Petr Vilím, Global Constraints in Scheduling, PhD thesis, Charles University, Prague, Czech Republic, 2007.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The processing times are constrained to be non-negative.</para><para>The propagator performs overload checking, detectable precendence propagation, not-first-not-last propagation, and edge finding.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, or <emphasis>m</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2866" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga9186b1ea47755a1af7b45907f094467d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a22162e3abb33bfc0709669e9e855dbc0" kindref="member">TaskTypeArgs</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with flexible times <emphasis>flex</emphasis>, fixed times <emphasis>fix</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>t</emphasis>, <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaf8b8cbc843ec64f4a643ca0375da07e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a22162e3abb33bfc0709669e9e855dbc0" kindref="member">TaskTypeArgs</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling tasks on cumulative resources. Schedule tasks with flexible times <emphasis>flex</emphasis>, fixed times <emphasis>fix</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>t</emphasis>, <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga6a771542d318b5b597f3a6bcae680fce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a22162e3abb33bfc0709669e9e855dbc0" kindref="member">TaskTypeArgs</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with flexible times <emphasis>flex</emphasis>, fixed times <emphasis>fix</emphasis>, use capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>t</emphasis>, <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2955" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga654d7aab5be3f688ad5d24368cc87a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const TaskTypeArgs &amp;t, const IntVarArgs &amp;flex, const IntArgs &amp;fix, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceGecode_1a22162e3abb33bfc0709669e9e855dbc0" kindref="member">TaskTypeArgs</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>flex</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>fix</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. Schedule tasks with flexible times <emphasis>flex</emphasis>, fixed times <emphasis>fix</emphasis>, use capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>. For each task, it depends on <emphasis>t</emphasis> how the flexible and fix times are interpreted:<itemizedlist>
<listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXP</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the processing time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXS</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the end time and <computeroutput>fix[i]</computeroutput> is the start time.</para></listitem><listitem><para>If <computeroutput>t[i]</computeroutput> is <computeroutput>TT_FIXE</computeroutput>, then <computeroutput>flex[i]</computeroutput> is the start time and <computeroutput>fix[i]</computeroutput> is the end time.</para></listitem></itemizedlist>
</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>t</emphasis>, <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2963" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga70836414c40cac15451277379e9847a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2992" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga2de39228ece46ac9c94e98a8b484fc8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling tasks on cumulative resources. Schedule tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="2999" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaac9f0c48219459feea4bf6551017346a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, used capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3029" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1ga37ccf32f2bdda49db36871a2a7faa85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const IntVarArgs &amp;s, const IntArgs &amp;p, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, used capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3036" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gac6047a5a23eab84b537a2da87d0e4ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, end times <emphasis>e</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>u</emphasis> or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3068" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaf61e234827801b723d4790b4b8b31ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling tasks on cumulative resources. Schedule tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, end times <emphasis>e</emphasis>, and use capacity <emphasis>u</emphasis> on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis> <emphasis>p</emphasis>, or <emphasis>u</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>u</emphasis> or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3075" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gaabf651d32c8c7593e0ed9d8b8bb326a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, int c, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, end times <emphasis>e</emphasis>, used capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>u</emphasis> or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntScheduling_1gae003a727acb524a7970d5166965e683d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::cumulative</definition>
        <argsstring>(Home home, IntVar c, const IntVarArgs &amp;s, const IntVarArgs &amp;p, const IntVarArgs &amp;e, const IntArgs &amp;u, const BoolVarArgs &amp;m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>cumulative</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. </para>        </briefdescription>
        <detaileddescription>
<para>Post propagators for scheduling optional tasks on cumulative resources. Schedule optional tasks with start times <emphasis>s</emphasis>, processing times <emphasis>p</emphasis>, end times <emphasis>e</emphasis>, used capacity <emphasis>u</emphasis>, and whether a task is mandatory <emphasis>m</emphasis> (a task is mandatory if the Boolean variable is 1) on a cumulative resource with capacity <emphasis>c</emphasis>.</para><para>The propagator does not enforce <formula id="295">$s_i+p_i=e_i$</formula>, this constraint has to be posted in addition to ensure consistency of the task bounds.</para><para>The propagator performs time-tabling, overload checking, and edge-finding. It uses algorithms taken from:</para><para>Petr Vilím, Max Energy Filtering Algorithm for Discrete Cumulative Resources, in W. J. van Hoeve and J. N. Hooker, editors, CPAIOR, volume 5547 of LNCS, pages 294-308. Springer, 2009.</para><para>and</para><para>Petr Vilím, Edge finding filtering algorithm for discrete cumulative resources in O(kn log n). In I. P. Gent, editor, CP, volume 5732 of LNCS, pages 802-816. Springer, 2009.</para><para><itemizedlist>
<listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>s</emphasis>, <emphasis>p</emphasis>, <emphasis>u</emphasis>, or <emphasis>m</emphasis> are of different size.</para></listitem><listitem><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>u</emphasis> or <emphasis>c</emphasis> contain an integer that is not nonnegative, or that could generate an overflow. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1gaa47ac0ccce6fe5ca21a1b1410fb7a294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::circuit</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntConLevel icl=ICL_DEF)</argsstring>
        <name>circuit</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a circuit. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a circuit if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="305">$x_i=j$</formula> has a single cycle covering all nodes.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis>.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1gacec6666dd73e825ea242f7639ba00517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::circuit</definition>
        <argsstring>(Home home, int offset, const IntVarArgs &amp;x, IntConLevel icl=ICL_DEF)</argsstring>
        <name>circuit</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a circuit. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a circuit if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="306">$x_{i-\text{offset}}=j$</formula> has a single cycle covering all nodes.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis>.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>offset</emphasis> is negative. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1gab641498125baeb9112ef2dfbc882bd2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::circuit</definition>
        <argsstring>(Home home, const IntArgs &amp;c, const IntVarArgs &amp;x, const IntVarArgs &amp;y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>circuit</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a circuit with costs <emphasis>y</emphasis> and <emphasis>z</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a circuit if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="305">$x_i=j$</formula> has a single cycle covering all nodes. The integer array <emphasis>c</emphasis> gives the costs of all possible edges where <formula id="307">$c_{i*|x|+j}$</formula> is the cost of the edge <formula id="304">$i\to j$</formula>. The variable <emphasis>z</emphasis> is the cost of the entire circuit. The variables <emphasis>y</emphasis> define the cost of the edge in <emphasis>x:</emphasis> that is, if <formula id="305">$x_i=j$</formula> then <formula id="308">$y_i=c_{i*n+j}$</formula>.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis> for circuit.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements.</para></listitem><listitem><para>Int::ArgumentSizeMismacth, if <emphasis>x</emphasis> and <emphasis>y</emphasis> do not have the same size or if <formula id="309">$|x|\times|x|\neq|c|$</formula>. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1gaffa7182e0bd1ec349bb40e13b6b46f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::circuit</definition>
        <argsstring>(Home home, const IntArgs &amp;c, int offset, const IntVarArgs &amp;x, const IntVarArgs &amp;y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>circuit</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a circuit with costs <emphasis>y</emphasis> and <emphasis>z</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a circuit if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="306">$x_{i-\text{offset}}=j$</formula> has a single cycle covering all nodes. The integer array <emphasis>c</emphasis> gives the costs of all possible edges where <formula id="307">$c_{i*|x|+j}$</formula> is the cost of the edge <formula id="304">$i\to j$</formula>. The variable <emphasis>z</emphasis> is the cost of the entire circuit. The variables <emphasis>y</emphasis> define the cost of the edge in <emphasis>x:</emphasis> that is, if <formula id="305">$x_i=j$</formula> then <formula id="308">$y_i=c_{i*n+j}$</formula>.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis> for circuit.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements.</para></listitem><listitem><para>Int::ArgumentSizeMismacth, if <emphasis>x</emphasis> and <emphasis>y</emphasis> do not have the same size or if <formula id="309">$|x|\times|x|\neq|c|$</formula>.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>offset</emphasis> is negative. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1gac4c07858656c2f4636b4f41fcd2b24b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::circuit</definition>
        <argsstring>(Home home, const IntArgs &amp;c, const IntVarArgs &amp;x, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>circuit</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a circuit with cost <emphasis>z</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a circuit if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="305">$x_i=j$</formula> has a single cycle covering all nodes. The integer array <emphasis>c</emphasis> gives the costs of all possible edges where <formula id="307">$c_{i*|x|+j}$</formula> is the cost of the edge <formula id="304">$i\to j$</formula>. The variable <emphasis>z</emphasis> is the cost of the entire circuit.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis> for circuit.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements.</para></listitem><listitem><para>Int::ArgumentSizeMismacth, if <formula id="309">$|x|\times|x|\neq|c|$</formula>. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1gaf23478dbb1da434e76ab0392ce29115a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::circuit</definition>
        <argsstring>(Home home, const IntArgs &amp;c, int offset, const IntVarArgs &amp;x, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>circuit</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a circuit with cost <emphasis>z</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a circuit if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="306">$x_{i-\text{offset}}=j$</formula> has a single cycle covering all nodes. The integer array <emphasis>c</emphasis> gives the costs of all possible edges where <formula id="307">$c_{i*|x|+j}$</formula> is the cost of the edge <formula id="304">$i\to j$</formula>. The variable <emphasis>z</emphasis> is the cost of the entire circuit.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis> for circuit.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements.</para></listitem><listitem><para>Int::ArgumentSizeMismacth, if <formula id="309">$|x|\times|x|\neq|c|$</formula>.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>offset</emphasis> is negative. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1gae5733c359a61d5e3532265e3b5f187da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::path</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar s, IntVar e, IntConLevel icl=ICL_DEF)</argsstring>
        <name>path</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a Hamiltonian path. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a Hamiltonian path if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="305">$x_i=j$</formula> visits all nodes exactly once. The path starts at node <emphasis>s</emphasis> and the successor of the last node <emphasis>e</emphasis> is equal to <formula id="310">$|x|$</formula>.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis>.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1ga3e0334f228e730d23b4fac296038bc89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::path</definition>
        <argsstring>(Home home, int offset, const IntVarArgs &amp;x, IntVar s, IntVar e, IntConLevel icl=ICL_DEF)</argsstring>
        <name>path</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a Hamiltonian path. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a Hamiltonian path if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="306">$x_{i-\text{offset}}=j$</formula> visits all nodes exactly once. The path starts at node <emphasis>s</emphasis> and the successor of the last node <emphasis>e</emphasis> is equal to <formula id="311">$|x|+\text{offset}$</formula>.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis>.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>offset</emphasis> is negative. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1ga1bfb15c4243bc93ead7aa745f241039d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::path</definition>
        <argsstring>(Home home, const IntArgs &amp;c, const IntVarArgs &amp;x, IntVar s, IntVar e, const IntVarArgs &amp;y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>path</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a Hamiltonian path with costs <emphasis>y</emphasis> and <emphasis>z</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a Hamiltonian path if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="305">$x_i=j$</formula> visits all nodes exactly once. The path starts at node <emphasis>s</emphasis> and the successor of the last node <emphasis>e</emphasis> is equal to <formula id="310">$|x|$</formula>. The integer array <emphasis>c</emphasis> gives the costs of all possible edges where <formula id="307">$c_{i*|x|+j}$</formula> is the cost of the edge <formula id="304">$i\to j$</formula>. The variable <emphasis>z</emphasis> is the cost of the entire path. The variables <emphasis>y</emphasis> define the cost of the edge in <emphasis>x:</emphasis> that is, if <formula id="305">$x_i=j$</formula> then <formula id="308">$y_i=c_{i*n+j}$</formula>.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis> for circuit.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements.</para></listitem><listitem><para>Int::ArgumentSizeMismacth, if <emphasis>x</emphasis> and <emphasis>y</emphasis> do not have the same size or if <formula id="309">$|x|\times|x|\neq|c|$</formula>. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1gaaaa9301a87a6536f62cd2ac480c5d657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::path</definition>
        <argsstring>(Home home, const IntArgs &amp;c, int offset, const IntVarArgs &amp;x, IntVar s, IntVar e, const IntVarArgs &amp;y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>path</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a Hamiltonian path with costs <emphasis>y</emphasis> and <emphasis>z</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a Hamiltonian path if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="306">$x_{i-\text{offset}}=j$</formula> visits all nodes exactly once. The path starts at node <emphasis>s</emphasis> and the successor of the last node <emphasis>e</emphasis> is equal to <formula id="311">$|x|+\text{offset}$</formula>. The integer array <emphasis>c</emphasis> gives the costs of all possible edges where <formula id="307">$c_{i*|x|+j}$</formula> is the cost of the edge <formula id="304">$i\to j$</formula>. The variable <emphasis>z</emphasis> is the cost of the entire path. The variables <emphasis>y</emphasis> define the cost of the edge in <emphasis>x:</emphasis> that is, if <formula id="305">$x_i=j$</formula> then <formula id="308">$y_i=c_{i*n+j}$</formula>.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis> for circuit.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements.</para></listitem><listitem><para>Int::ArgumentSizeMismacth, if <emphasis>x</emphasis> and <emphasis>y</emphasis> do not have the same size or if <formula id="309">$|x|\times|x|\neq|c|$</formula>.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>offset</emphasis> is negative. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1ga9874141a0d059b57b156c8f119b92489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::path</definition>
        <argsstring>(Home home, const IntArgs &amp;c, const IntVarArgs &amp;x, IntVar s, IntVar e, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>path</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a Hamiltonian path with cost <emphasis>z</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a Hamiltonian path if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="305">$x_i=j$</formula> visits all nodes exactly once. The path starts at node <emphasis>s</emphasis> and the successor of the last node <emphasis>e</emphasis> is equal to <formula id="310">$|x|$</formula>. The integer array <emphasis>c</emphasis> gives the costs of all possible edges where <formula id="307">$c_{i*|x|+j}$</formula> is the cost of the edge <formula id="304">$i\to j$</formula>. The variable <emphasis>z</emphasis> is the cost of the entire path.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis> for circuit.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements.</para></listitem><listitem><para>Int::ArgumentSizeMismacth, if <formula id="309">$|x|\times|x|\neq|c|$</formula>. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntGraph_1ga9fa7da9ca8b7cbec7d5dcaa241df5ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::path</definition>
        <argsstring>(Home home, const IntArgs &amp;c, int offset, const IntVarArgs &amp;x, IntVar s, IntVar e, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>path</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post propagator such that <emphasis>x</emphasis> forms a Hamiltonian path with cost <emphasis>z</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> forms a Hamiltonian path if the graph with edges <formula id="304">$i\to j$</formula> where <formula id="306">$x_{i-\text{offset}}=j$</formula> visits all nodes exactly once. The path starts at node <emphasis>s</emphasis> and the successor of the last node <emphasis>e</emphasis> is equal to <formula id="311">$|x|+\text{offset}$</formula>. The integer array <emphasis>c</emphasis> gives the costs of all possible edges where <formula id="307">$c_{i*|x|+j}$</formula> is the cost of the edge <formula id="304">$i\to j$</formula>. The variable <emphasis>z</emphasis> is the cost of the entire circuit.</para><para>Supports domain (<emphasis>icl</emphasis> = ICL_DOM) and value propagation (all other values for <emphasis>icl</emphasis>), where this refers to whether value or domain consistent distinct in enforced on <emphasis>x</emphasis> for circuit.</para><para>Throws the following exceptions:<itemizedlist>
<listitem><para><ref refid="classGecode_1_1Int_1_1ArgumentSame" kindref="compound">Int::ArgumentSame</ref>, if <emphasis>x</emphasis> contains the same unassigned variable multiply.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1TooFewArguments" kindref="compound">Int::TooFewArguments</ref>, if <emphasis>x</emphasis> has no elements.</para></listitem><listitem><para>Int::ArgumentSizeMismacth, if <formula id="309">$|x|\times|x|\neq|c|$</formula>.</para></listitem><listitem><para><ref refid="classGecode_1_1Int_1_1OutOfLimits" kindref="compound">Int::OutOfLimits</ref>, if <emphasis>offset</emphasis> is negative. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExec_1gaf5a69c8b08806d62fd4371d45ac6ddc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::wait</definition>
        <argsstring>(Home home, IntVar x, void(*c)(Space &amp;home), IntConLevel icl=ICL_DEF)</argsstring>
        <name>wait</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Execute <emphasis>c</emphasis> when <emphasis>x</emphasis> becomes assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExec_1ga589976959021b32c5e1220e23db76593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::wait</definition>
        <argsstring>(Home home, BoolVar x, void(*c)(Space &amp;home), IntConLevel icl=ICL_DEF)</argsstring>
        <name>wait</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Execute <emphasis>c</emphasis> when <emphasis>x</emphasis> becomes assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExec_1ga305cc0fa1cffd6b7807460e3ddd69a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::wait</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, void(*c)(Space &amp;home), IntConLevel icl=ICL_DEF)</argsstring>
        <name>wait</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Execute <emphasis>c</emphasis> when all variables in <emphasis>x</emphasis> become assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExec_1ga0b6ebbc94538ba9eb208cd2e17826ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::wait</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, void(*c)(Space &amp;home), IntConLevel icl=ICL_DEF)</argsstring>
        <name>wait</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Execute <emphasis>c</emphasis> when all variables in <emphasis>x</emphasis> become assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntExec_1gaf90cf579612347def2ebcaff3a8abb9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::when</definition>
        <argsstring>(Home home, BoolVar x, void(*t)(Space &amp;home), void(*e)(Space &amp;home)=NULL, IntConLevel icl=ICL_DEF)</argsstring>
        <name>when</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>e</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Execute <emphasis>t</emphasis> (then) when <emphasis>x</emphasis> is assigned one, and <emphasis>e</emphasis> (else) otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntUnshare_1ga5dbecdc9ae058e35d916a8bc38870876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unshare</definition>
        <argsstring>(Home home, IntVarArgs &amp;x, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unshare</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Replace multiple variable occurences in <emphasis>x</emphasis> by fresh variables. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistency (<emphasis>icl</emphasis> = ICL_DOM, default) and bounds consistency (<emphasis>icl</emphasis> = ICL_BND). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3471" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntUnshare_1ga71093cc79dabacaef89236452862e60a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT void</type>
        <definition>GECODE_INT_EXPORT void Gecode::unshare</definition>
        <argsstring>(Home home, BoolVarArgs &amp;x, IntConLevel icl=ICL_DEF)</argsstring>
        <name>unshare</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Replace multiple variable occurences in <emphasis>x</emphasis> by fresh variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="3475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaf9f9bd8c7bdd56bc09e9da2c53d75cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVarBranch vars, IntValBranch vals, IntBranchFilter bf=NULL, IntVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga6791eb13b8bcf30a45a31ecec43e6e03" kindref="member">IntBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a623fea8dd944c5caa09f5f8b906819ae" kindref="member">IntVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4073" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gac6843672a82e6413f507fde220e785a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, TieBreak&lt; IntVarBranch &gt; vars, IntValBranch vals, IntBranchFilter bf=NULL, IntVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref> &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga6791eb13b8bcf30a45a31ecec43e6e03" kindref="member">IntBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a623fea8dd944c5caa09f5f8b906819ae" kindref="member">IntVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4083" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaa82326c8f46725c9a48e7fbaa4be191f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, IntVar x, IntValBranch vals, IntVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a623fea8dd944c5caa09f5f8b906819ae" kindref="member">IntVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4093" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaf61d652bb6737b2589349142159e4ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntVarBranch vars, IntValBranch vals, BoolBranchFilter bf=NULL, BoolVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1gaa1878ecc1c1404a0a27f6642549a3863" kindref="member">BoolBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a07c72dd8cd5d8163adedd8e8fe506ef6" kindref="member">BoolVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gafb58c854fddc02bef834305943b3ad33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, TieBreak&lt; IntVarBranch &gt; vars, IntValBranch vals, BoolBranchFilter bf=NULL, BoolVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref> &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1gaa1878ecc1c1404a0a27f6642549a3863" kindref="member">BoolBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a07c72dd8cd5d8163adedd8e8fe506ef6" kindref="member">BoolVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1ga328e4109d795e10d9c076fe7c3eedb36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, BoolVar x, IntValBranch vals, BoolVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a07c72dd8cd5d8163adedd8e8fe506ef6" kindref="member">BoolVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaf75a0bb5132824aecb4ce11350cd370b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntAssign vals, IntBranchFilter ibf=NULL, IntVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntAssign" kindref="compound">IntAssign</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga6791eb13b8bcf30a45a31ecec43e6e03" kindref="member">IntBranchFilter</ref></type>
          <declname>ibf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a623fea8dd944c5caa09f5f8b906819ae" kindref="member">IntVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign all <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1ga76c6b137e208eefe00f278df63ef19cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, IntVar x, IntAssign vals, IntVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntAssign" kindref="compound">IntAssign</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a623fea8dd944c5caa09f5f8b906819ae" kindref="member">IntVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gadebb156af05ca82aa9a90516a33bfe8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntAssign vals, BoolBranchFilter bbf=NULL, BoolVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntAssign" kindref="compound">IntAssign</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1gaa1878ecc1c1404a0a27f6642549a3863" kindref="member">BoolBranchFilter</ref></type>
          <declname>bbf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a07c72dd8cd5d8163adedd8e8fe506ef6" kindref="member">BoolVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign all <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gac56e4c176c09c16f089512b4d49782d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, BoolVar x, IntAssign vals, BoolVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntAssign" kindref="compound">IntAssign</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a07c72dd8cd5d8163adedd8e8fe506ef6" kindref="member">BoolVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1ga65913c3e69262087b50010d5d8c41687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::VariableSymmetry</definition>
        <argsstring>(const IntVarArgs &amp;x)</argsstring>
        <name>VariableSymmetry</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Variables in <emphasis>x</emphasis> are interchangeable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1gae4f3baa5c9ac6cf124a20ec77dc449fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::VariableSymmetry</definition>
        <argsstring>(const BoolVarArgs &amp;x)</argsstring>
        <name>VariableSymmetry</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Variables in <emphasis>x</emphasis> are interchangeable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1gaa1afd6244746b861271c3686387a4e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::VariableSymmetry</definition>
        <argsstring>(const IntVarArgs &amp;x, const IntArgs &amp;indices)</argsstring>
        <name>VariableSymmetry</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Specified variables in <emphasis>x</emphasis> are interchangeable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1ga87eba9cbefa192f5343a0adb62cab42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::ValueSymmetry</definition>
        <argsstring>(const IntArgs &amp;v)</argsstring>
        <name>ValueSymmetry</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Values in <emphasis>v</emphasis> are interchangeable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1ga3159c9df440fac56bac27da290a366cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::ValueSymmetry</definition>
        <argsstring>(const IntSet &amp;v)</argsstring>
        <name>ValueSymmetry</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Values in <emphasis>v</emphasis> are interchangeable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1ga56b2e767f9ad086fd178644d4f8345dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::ValueSymmetry</definition>
        <argsstring>(IntVar vars)</argsstring>
        <name>ValueSymmetry</name>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>vars</declname>
        </param>
        <briefdescription>
<para>All values in the domain of the given variable are interchangeable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1gaabb552d4c34a90e89b71096063aee7ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::VariableSequenceSymmetry</definition>
        <argsstring>(const IntVarArgs &amp;x, int ss)</argsstring>
        <name>VariableSequenceSymmetry</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
<para>Variable sequences in <emphasis>x</emphasis> of size <emphasis>ss</emphasis> are interchangeable. </para>        </briefdescription>
        <detaileddescription>
<para>The size of <emphasis>x</emphasis> must be a multiple of <emphasis>ss</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1gaec53dbb4b4bad7dfbcf518df79cc0a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::VariableSequenceSymmetry</definition>
        <argsstring>(const BoolVarArgs &amp;x, int ss)</argsstring>
        <name>VariableSequenceSymmetry</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
<para>Variable sequences in <emphasis>x</emphasis> of size <emphasis>ss</emphasis> are interchangeable. </para>        </briefdescription>
        <detaileddescription>
<para>The size of <emphasis>x</emphasis> must be a multiple of <emphasis>ss</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1ga2a1c0efd5a3d9c8e200137b7fa202ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::ValueSequenceSymmetry</definition>
        <argsstring>(const IntArgs &amp;v, int ss)</argsstring>
        <name>ValueSequenceSymmetry</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
<para>Value sequences in <emphasis>v</emphasis> of size <emphasis>ss</emphasis> are interchangeable. </para>        </briefdescription>
        <detaileddescription>
<para>The size of <emphasis>v</emphasis> must be a multiple of <emphasis>ss</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1ga703883d775e323ff56d8b573f25f5c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::values_reflect</definition>
        <argsstring>(int lower, int upper)</argsstring>
        <name>values_reflect</name>
        <param>
          <type>int</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
<para>The values from <emphasis>lower</emphasis> to <emphasis>upper</emphasis> (inclusive) can be reflected. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranchSymm_1ga3f691e7a0c6d6201f7ed3656ac927902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_INT_EXPORT SymmetryHandle Gecode::values_reflect</definition>
        <argsstring>(IntVar x)</argsstring>
        <name>values_reflect</name>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The values in the domain of  can be reflected. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaed06b2c0d92c0411a3e5eb0967a72a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVarBranch vars, IntValBranch vals, const Symmetries &amp;syms, IntBranchFilter bf=NULL, IntVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Symmetries" kindref="compound">Symmetries</ref> &amp;</type>
          <declname>syms</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga6791eb13b8bcf30a45a31ecec43e6e03" kindref="member">IntBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a623fea8dd944c5caa09f5f8b906819ae" kindref="member">IntVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis> with symmetry breaking. </para>        </briefdescription>
        <detaileddescription>
<para>Throws LDSBBadValueSelection exception if <emphasis>vals</emphasis> is any of SEL_SPLIT_MIN, SEL_SPLIT_MAX, SEL_RANGE_MIN, SEL_RANGE_MAX, SEL_VALUES_MIN, and SEL_VALUES_MAX, or if <emphasis>vals</emphasis> is SEL_VAL_COMMIT with a custom commit function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1ga3cfb2fd9f2b09bb36dc56826ab7a84a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, TieBreak&lt; IntVarBranch &gt; vars, IntValBranch vals, const Symmetries &amp;syms, IntBranchFilter bf=NULL, IntVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref> &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Symmetries" kindref="compound">Symmetries</ref> &amp;</type>
          <declname>syms</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1ga6791eb13b8bcf30a45a31ecec43e6e03" kindref="member">IntBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a623fea8dd944c5caa09f5f8b906819ae" kindref="member">IntVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis> with symmetry breaking. </para>        </briefdescription>
        <detaileddescription>
<para>Throws LDSBBadValueSelection exception if <emphasis>vals</emphasis> is any of SEL_SPLIT_MIN, SEL_SPLIT_MAX, SEL_RANGE_MIN, SEL_RANGE_MAX, SEL_VALUES_MIN, and SEL_VALUES_MAX, or if <emphasis>vals</emphasis> is SEL_VAL_COMMIT with a custom commit function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1ga46172acf27d49d9bfc0d3ad0fd7434f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntVarBranch vars, IntValBranch vals, const Symmetries &amp;syms, BoolBranchFilter bf=NULL, BoolVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref></type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Symmetries" kindref="compound">Symmetries</ref> &amp;</type>
          <declname>syms</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1gaa1878ecc1c1404a0a27f6642549a3863" kindref="member">BoolBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a07c72dd8cd5d8163adedd8e8fe506ef6" kindref="member">BoolVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis> with symmetry breaking. </para>        </briefdescription>
        <detaileddescription>
<para>Throws LDSBBadValueSelection exception if <emphasis>vals</emphasis> is any of SEL_SPLIT_MIN, SEL_SPLIT_MAX, SEL_RANGE_MIN, SEL_RANGE_MAX, SEL_VALUES_MIN, and SEL_VALUES_MAX, or if <emphasis>vals</emphasis> is SEL_VAL_COMMIT with a custom commit function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelIntBranch_1gaa3fbe2526f9a50f168a14204af3f0baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_INT_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_INT_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, TieBreak&lt; IntVarBranch &gt; vars, IntValBranch vals, const Symmetries &amp;syms, BoolBranchFilter bf=NULL, BoolVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1IntVarBranch" kindref="compound">IntVarBranch</ref> &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntValBranch" kindref="compound">IntValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Symmetries" kindref="compound">Symmetries</ref> &amp;</type>
          <declname>syms</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntBranch_1gaa1878ecc1c1404a0a27f6642549a3863" kindref="member">BoolBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a07c72dd8cd5d8163adedd8e8fe506ef6" kindref="member">BoolVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis> with symmetry breaking. </para>        </briefdescription>
        <detaileddescription>
<para>Throws LDSBBadValueSelection exception if <emphasis>vals</emphasis> is any of SEL_SPLIT_MIN, SEL_SPLIT_MAX, SEL_RANGE_MIN, SEL_RANGE_MAX, SEL_VALUES_MIN, and SEL_VALUES_MAX, or if <emphasis>vals</emphasis> is SEL_VAL_COMMIT with a custom commit function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/int.hh" line="4333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aa6ae5a451ec5d974da6f48cd5e49d645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const Activity &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Activity" kindref="compound">Activity</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/activity.hpp" line="352" column="1" bodyfile="/usr/include/gecode/kernel/activity.hpp" bodystart="361" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a06f10f2f08bf68f31452d984bf2c9bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const AFC &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1AFC" kindref="compound">AFC</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/afc.hpp" line="174" column="1" bodyfile="/usr/include/gecode/kernel/afc.hpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a655b391d18c5bfb29089f6cf768391a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::operator==</definition>
        <argsstring>(space_allocator&lt; T1 &gt; const &amp;al1, space_allocator&lt; T2 &gt; const &amp;al2)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator" kindref="compound">space_allocator</ref>&lt; T1 &gt; const &amp;</type>
          <declname>al1</declname>
        </param>
        <param>
          <type><ref refid="structGecode_1_1space__allocator" kindref="compound">space_allocator</ref>&lt; T2 &gt; const &amp;</type>
          <declname>al2</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
<para>Tests two space allocators for equality. </para>        </briefdescription>
        <detaileddescription>
<para>Two allocators are equal when each can release storage allocated from the other. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="292" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ae717113d7e992afed76772e2f73d9d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::operator!=</definition>
        <argsstring>(space_allocator&lt; T1 &gt; const &amp;al1, space_allocator&lt; T2 &gt; const &amp;al2)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structGecode_1_1space__allocator" kindref="compound">space_allocator</ref>&lt; T1 &gt; const &amp;</type>
          <declname>al1</declname>
        </param>
        <param>
          <type><ref refid="structGecode_1_1space__allocator" kindref="compound">space_allocator</ref>&lt; T2 &gt; const &amp;</type>
          <declname>al2</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
<para>Tests two space allocators for inequality. </para>        </briefdescription>
        <detaileddescription>
<para>Two allocators are equal when each can release storage allocated from the other. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="304" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a602999e04d04ad1c90df33b3540ce0e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::operator==</definition>
        <argsstring>(region_allocator&lt; T1 &gt; const &amp;al1, region_allocator&lt; T2 &gt; const &amp;al2)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structGecode_1_1region__allocator" kindref="compound">region_allocator</ref>&lt; T1 &gt; const &amp;</type>
          <declname>al1</declname>
        </param>
        <param>
          <type><ref refid="structGecode_1_1region__allocator" kindref="compound">region_allocator</ref>&lt; T2 &gt; const &amp;</type>
          <declname>al2</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="457" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="457" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a740a039e8d47250b3bc440d9c40f2c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::operator!=</definition>
        <argsstring>(region_allocator&lt; T1 &gt; const &amp;al1, region_allocator&lt; T2 &gt; const &amp;al2)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structGecode_1_1region__allocator" kindref="compound">region_allocator</ref>&lt; T1 &gt; const &amp;</type>
          <declname>al1</declname>
        </param>
        <param>
          <type><ref refid="structGecode_1_1region__allocator" kindref="compound">region_allocator</ref>&lt; T2 &gt; const &amp;</type>
          <declname>al2</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/allocators.hpp" line="469" column="1" bodyfile="/usr/include/gecode/kernel/allocators.hpp" bodystart="469" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a7ea75bbafeece5a45ce39227a20023c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(Archive &amp;e, unsigned int i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="198" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a6181a9eeff7ad9ff5b3c9b0837a25e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(Archive &amp;e, int i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="203" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a313f9e1c74f600e7c27921b7970b8f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(Archive &amp;e, unsigned short i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="208" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aa47bd5664b4f30590cab02c7a87f77d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(Archive &amp;e, short i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>short</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="213" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a419b745ae7bdaa688df20083117a24cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(Archive &amp;e, unsigned char i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="218" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a7532a0b4920965ba169a93556db5d43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(Archive &amp;e, char i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>char</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="223" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a0b575c650e65a3900c90521fb16c918b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(Archive &amp;e, bool i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="228" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a7895d0bf3b26b01c5b78e1700d627949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(Archive &amp;e, float d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>float</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="233" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="234" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1adb05af536ca86cd87e7ea02260d5d311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(Archive &amp;e, double d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="239" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="240" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a8415a75c65ae572bd660845c88240ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&gt;&gt;</definition>
        <argsstring>(Archive &amp;e, unsigned int &amp;i)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="247" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a2470288dac34940f0359a876ee0f297f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&gt;&gt;</definition>
        <argsstring>(Archive &amp;e, int &amp;i)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="252" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a4f0dc890cffc4d21018416f25434e33d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&gt;&gt;</definition>
        <argsstring>(Archive &amp;e, unsigned short &amp;i)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>unsigned short &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="257" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1afe117d28a72f3b38f1cb94509393c488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&gt;&gt;</definition>
        <argsstring>(Archive &amp;e, short &amp;i)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>short &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="262" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a4db448d085cc30439f074078b6f6ef78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&gt;&gt;</definition>
        <argsstring>(Archive &amp;e, unsigned char &amp;i)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>unsigned char &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="267" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a081b078ac737d092d415ea9f2210ee3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&gt;&gt;</definition>
        <argsstring>(Archive &amp;e, char &amp;i)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>char &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="272" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aa7d5db04d2f979886009949aa272e167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&gt;&gt;</definition>
        <argsstring>(Archive &amp;e, bool &amp;i)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="277" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a6f09e5f91986b3a260541ae0429756ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&gt;&gt;</definition>
        <argsstring>(Archive &amp;e, float &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="282" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="282" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a7e6467d6d4f672af2bab8ec8fe583d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline <ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
        <definition>forceinline Archive&amp; Gecode::operator&gt;&gt;</definition>
        <argsstring>(Archive &amp;e, double &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classGecode_1_1Archive" kindref="compound">Archive</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/archive.hpp" line="289" column="1" bodyfile="/usr/include/gecode/kernel/archive.hpp" bodystart="289" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a0ff1d947cbe625752b0272edd94a53d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;VarArray&lt;Var&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const VarArray&lt; Var &gt; &amp;x, const VarArray&lt; Var &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1105" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1105" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a2158d84b229b6d4b265ce81fd49f2aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;VarArray&lt;Var&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const VarArray&lt; Var &gt; &amp;x, const VarArgArray&lt; Var &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1116" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1116" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a4b34954faa86380ba1249744bf365abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;VarArray&lt;Var&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const VarArgArray&lt; Var &gt; &amp;x, const VarArray&lt; Var &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1127" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1127" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a43c32aa7634d13d9ceae7951675d9d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;VarArray&lt;Var&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const VarArray&lt; Var &gt; &amp;x, const Var &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1138" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1138" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aeddc0fab0b2813d447d9401f4e7ee5dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;VarArray&lt;Var&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const Var &amp;x, const VarArray&lt; Var &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1148" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1148" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a222971fc2f4ea45be6377df1d58a3f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::__before</definition>
        <argsstring>(const View &amp;x, const View &amp;y)</argsstring>
        <name>__before</name>
        <param>
          <type>const View &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const View &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1438" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1438" bodyend="1440"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ae52913935e07b88a1f1404a5a4e1c37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::__same</definition>
        <argsstring>(const X &amp;x, const Y &amp;y)</argsstring>
        <name>__same</name>
        <param>
          <type>const X &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Y &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1457" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1457" bodyend="1459"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a9f6a9a03ddf38063a7aaf578a6842bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::__shared</definition>
        <argsstring>(const X &amp;x, const Y &amp;y)</argsstring>
        <name>__shared</name>
        <param>
          <type>const X &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Y &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1462" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1462" bodyend="1464"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a11177810342e79b1848e7d59d8ee2d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1PrimArgArray" kindref="compound">PrimArgArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;PrimArgArray&lt;T&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const PrimArgArray&lt; T &gt; &amp;x, const PrimArgArray&lt; T &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1PrimArgArray" kindref="compound">PrimArgArray</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1PrimArgArray" kindref="compound">PrimArgArray</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1881" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1881" bodyend="1884"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a8ee6c07708d91d893278152f26e52071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1PrimArgArray" kindref="compound">PrimArgArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;PrimArgArray&lt;T&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const PrimArgArray&lt; T &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1PrimArgArray" kindref="compound">PrimArgArray</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1888" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1888" bodyend="1891"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aca8dd640b5821bd58295ab019aee270f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1PrimArgArray" kindref="compound">PrimArgArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;PrimArgArray&lt;T&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const T &amp;x, const PrimArgArray&lt; T &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1PrimArgArray" kindref="compound">PrimArgArray</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1895" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1895" bodyend="1898"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a77d55530de1857f4c292f2b9bc8ba708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1ArgArray" kindref="compound">ArgArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;ArgArray&lt;T&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const ArgArray&lt; T &gt; &amp;x, const ArgArray&lt; T &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1ArgArray" kindref="compound">ArgArray</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ArgArray" kindref="compound">ArgArray</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1963" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1963" bodyend="1966"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ad8e545ac2cb793deb99c5ad86ff75925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1ArgArray" kindref="compound">ArgArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;ArgArray&lt;T&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const ArgArray&lt; T &gt; &amp;x, const T &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1ArgArray" kindref="compound">ArgArray</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1970" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1970" bodyend="1973"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ab58ddd9349ac291921cdfb45747bca6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1ArgArray" kindref="compound">ArgArray</ref>&lt; T &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;ArgArray&lt;T&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const T &amp;x, const ArgArray&lt; T &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ArgArray" kindref="compound">ArgArray</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="1977" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="1977" bodyend="1982"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a0be509b9fbc1c8ae1197fbc033eeb006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;VarArgArray&lt;Var&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const VarArgArray&lt; Var &gt; &amp;x, const VarArgArray&lt; Var &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="2047" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="2047" bodyend="2050"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1adae122bf68da1fac014278ecf64165c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;VarArgArray&lt;Var&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const VarArgArray&lt; Var &gt; &amp;x, const Var &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="2054" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="2054" bodyend="2057"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a02f12212a0ccc5546fcc1d712679b301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &gt;::ArgsType</type>
        <definition>ArrayTraits&lt;VarArgArray&lt;Var&gt; &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const Var &amp;x, const VarArgArray&lt; Var &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArgArray" kindref="compound">VarArgArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="2061" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="2061" bodyend="2066"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a0c2cc431c5711d5283c4001cc443882e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const VarArray&lt; Var &gt; &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarArray" kindref="compound">VarArray</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="2149" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="2167" bodyend="2179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a25dd0f0d567692760b46461d6e1395ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const ViewArray&lt; View &gt; &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ViewArray" kindref="compound">ViewArray</ref>&lt; View &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="2149" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="2183" bodyend="2195"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a0982bb52c27ee63737c0410f7b862dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const ArgArrayBase&lt; T &gt; &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ArgArrayBase" kindref="compound">ArgArrayBase</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/array.hpp" line="2149" column="1" bodyfile="/usr/include/gecode/kernel/array.hpp" bodystart="2199" bodyend="2211"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelBranchTieBreak_1ga438217725cfd902cc9eeac62e9ea2216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class VarBranch</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref> &gt;</type>
        <definition>TieBreak&lt;VarBranch&gt; Gecode::tiebreak</definition>
        <argsstring>(VarBranch a, VarBranch b)</argsstring>
        <name>tiebreak</name>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Combine variable selection criteria <emphasis>a</emphasis> and <emphasis>b</emphasis> for tie-breaking. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/branch-tiebreak.hpp" line="62" column="1" bodyfile="/usr/include/gecode/kernel/branch-tiebreak.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelBranchTieBreak_1ga3327ee5087e60c0b218133b430e6aede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class VarBranch</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref> &gt;</type>
        <definition>TieBreak&lt;VarBranch&gt; Gecode::tiebreak</definition>
        <argsstring>(VarBranch a, VarBranch b, VarBranch c)</argsstring>
        <name>tiebreak</name>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Combine variable selection criteria <emphasis>a</emphasis>, <emphasis>b</emphasis>, and <emphasis>c</emphasis> for tie-breaking. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/branch-tiebreak.hpp" line="66" column="1" bodyfile="/usr/include/gecode/kernel/branch-tiebreak.hpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelBranchTieBreak_1ga9cfcd5624baee30967ecd3a951dbb5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class VarBranch</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref> &gt;</type>
        <definition>TieBreak&lt;VarBranch&gt; Gecode::tiebreak</definition>
        <argsstring>(VarBranch a, VarBranch b, VarBranch c, VarBranch d)</argsstring>
        <name>tiebreak</name>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Combine variable selection criteria <emphasis>a</emphasis>, <emphasis>b</emphasis>, <emphasis>c</emphasis>, and <emphasis>d</emphasis> for tie-breaking. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/branch-tiebreak.hpp" line="70" column="1" bodyfile="/usr/include/gecode/kernel/branch-tiebreak.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelBranchTieBreak_1ga438217725cfd902cc9eeac62e9ea2216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class VarBranch</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref> &gt;</type>
        <definition>forceinline TieBreak&lt;VarBranch&gt; Gecode::tiebreak</definition>
        <argsstring>(VarBranch a, VarBranch b)</argsstring>
        <name>tiebreak</name>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Combine variable selection criteria <emphasis>a</emphasis> and <emphasis>b</emphasis> for tie-breaking. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/branch-tiebreak.hpp" line="84" column="1" bodyfile="/usr/include/gecode/kernel/branch-tiebreak.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelBranchTieBreak_1ga3327ee5087e60c0b218133b430e6aede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class VarBranch</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref> &gt;</type>
        <definition>forceinline TieBreak&lt;VarBranch&gt; Gecode::tiebreak</definition>
        <argsstring>(VarBranch a, VarBranch b, VarBranch c)</argsstring>
        <name>tiebreak</name>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Combine variable selection criteria <emphasis>a</emphasis>, <emphasis>b</emphasis>, and <emphasis>c</emphasis> for tie-breaking. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/branch-tiebreak.hpp" line="91" column="1" bodyfile="/usr/include/gecode/kernel/branch-tiebreak.hpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelBranchTieBreak_1ga9cfcd5624baee30967ecd3a951dbb5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class VarBranch</type>
          </param>
        </templateparamlist>
        <type>forceinline <ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref> &gt;</type>
        <definition>forceinline TieBreak&lt;VarBranch&gt; Gecode::tiebreak</definition>
        <argsstring>(VarBranch a, VarBranch b, VarBranch c, VarBranch d)</argsstring>
        <name>tiebreak</name>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1VarBranch" kindref="compound">VarBranch</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Combine variable selection criteria <emphasis>a</emphasis>, <emphasis>b</emphasis>, <emphasis>c</emphasis>, and <emphasis>d</emphasis> for tie-breaking. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/branch-tiebreak.hpp" line="98" column="1" bodyfile="/usr/include/gecode/kernel/branch-tiebreak.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a93e4dea4e5e021b4f58d0ccc78ac1523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::me_failed</definition>
        <argsstring>(ModEvent me)</argsstring>
        <name>me_failed</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <briefdescription>
<para>Check whether modification event <emphasis>me</emphasis> is failed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/modevent.hpp" line="44" column="1" bodyfile="/usr/include/gecode/kernel/modevent.hpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ab0c2b67fac58a0d289893450d8a9b2bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>forceinline bool Gecode::me_modified</definition>
        <argsstring>(ModEvent me)</argsstring>
        <name>me_modified</name>
        <param>
          <type><ref refid="group__TaskVarMEPC_1gafa985ae465bd12df08e29252cdb7519b" kindref="member">ModEvent</ref></type>
          <declname>me</declname>
        </param>
        <briefdescription>
<para>Check whether modification event <emphasis>me</emphasis> describes variable modification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/modevent.hpp" line="49" column="1" bodyfile="/usr/include/gecode/kernel/modevent.hpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a5d66ace4089c080a5108f2b47224cede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const SharedArray&lt; T &gt; &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SharedArray" kindref="compound">SharedArray</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/shared-array.hpp" line="354" column="1" bodyfile="/usr/include/gecode/kernel/shared-array.hpp" bodystart="361" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a5430dfdb1866d9506626cb0e838f0e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::shared</definition>
        <argsstring>(const ConstView&lt; ViewA &gt; &amp;, const ConstView&lt; ViewB &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewA &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewB &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="289" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="662" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ab4d86861a334b33fef662c4de53ecc42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::shared</definition>
        <argsstring>(const VarImpView&lt; Var &gt; &amp;, const ConstView&lt; View &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; View &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="295" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="667" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a043be1ea2cbedbd07ea791ed366c578d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::shared</definition>
        <argsstring>(const DerivedView&lt; ViewA &gt; &amp;, const ConstView&lt; ViewB &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewA &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewB &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="301" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="672" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a8d509ae54be0fe05bbb34b43b57c5b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::shared</definition>
        <argsstring>(const ConstView&lt; View &gt; &amp;, const VarImpView&lt; Var &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; View &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="307" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="677" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a96a249d6626e18ddd066fd11cbda7512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::shared</definition>
        <argsstring>(const ConstView&lt; ViewA &gt; &amp;, const DerivedView&lt; ViewB &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewA &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewB &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="313" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="682" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ab189616445917a381b5f166db172f4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class VarA</type>
          </param>
          <param>
            <type>class VarB</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::shared</definition>
        <argsstring>(const VarImpView&lt; VarA &gt; &amp;, const VarImpView&lt; VarB &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; VarA &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; VarB &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="319" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="687" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a278a74dfe272c1d9b6cc87a6f7e387d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::shared</definition>
        <argsstring>(const VarImpView&lt; Var &gt; &amp;, const DerivedView&lt; View &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; View &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="325" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="693" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a0aab796bd4dfa695e99db0d271a01628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::shared</definition>
        <argsstring>(const DerivedView&lt; View &gt; &amp;, const VarImpView&lt; Var &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; View &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="331" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="700" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a827b7cad1d5104a5752aece81a3bcb48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Gecode::shared</definition>
        <argsstring>(const DerivedView&lt; ViewA &gt; &amp;, const DerivedView&lt; ViewB &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewA &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewB &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="337" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="707" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ac39fd7326a3f6b96950c67c54307c6d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::same</definition>
        <argsstring>(const ConstView&lt; ViewA &gt; &amp;, const ConstView&lt; ViewB &gt; &amp;)</argsstring>
        <name>same</name>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewA &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewB &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether two views are the same. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="603" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="603" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a41bcd5f84db4f4967723112088ebba6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::same</definition>
        <argsstring>(const VarImpView&lt; Var &gt; &amp;, const ConstView&lt; View &gt; &amp;)</argsstring>
        <name>same</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; View &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether two views are the same. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="609" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="609" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a6fb8950fe850d7afaf7df4bb8ab31bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::same</definition>
        <argsstring>(const ConstView&lt; ViewA &gt; &amp;, const DerivedView&lt; ViewB &gt; &amp;)</argsstring>
        <name>same</name>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewA &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewB &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether two views are the same. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="615" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="615" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a4a77886758b3823826308c43f4b80811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::same</definition>
        <argsstring>(const VarImpView&lt; Var &gt; &amp;, const DerivedView&lt; View &gt; &amp;)</argsstring>
        <name>same</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; View &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether two views are the same. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="621" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="621" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ab1bd0e29607613796f624fe14de5bfdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::same</definition>
        <argsstring>(const DerivedView&lt; View &gt; &amp;, const VarImpView&lt; Var &gt; &amp;)</argsstring>
        <name>same</name>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; View &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether two views are the same. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="627" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="627" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a234eb53b43d21abba686fa8688bec9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::same</definition>
        <argsstring>(const VarImpView&lt; Var &gt; &amp;x, const VarImpView&lt; Var &gt; &amp;y)</argsstring>
        <name>same</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether two views are the same. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="633" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="633" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a614c8efcf0d03776ffc8d9044612c79f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::same</definition>
        <argsstring>(const DerivedView&lt; ViewA &gt; &amp;x, const DerivedView&lt; ViewB &gt; &amp;y)</argsstring>
        <name>same</name>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewA &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewB &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether two views are the same. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="639" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="639" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a52add8134922695381c5e4e937bcb5cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::before</definition>
        <argsstring>(const ViewA &amp;x, const ViewB &amp;y)</argsstring>
        <name>before</name>
        <param>
          <type>const ViewA &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const ViewB &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="650" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="650" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a9a7f95ba597e055234abccb2aa8738f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::shared</definition>
        <argsstring>(const ConstView&lt; ViewA &gt; &amp;, const ConstView&lt; ViewB &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewA &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewB &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="662" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="662" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1add5c1c143034570f4327e93176852521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::shared</definition>
        <argsstring>(const VarImpView&lt; Var &gt; &amp;, const ConstView&lt; View &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; View &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="667" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="667" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a06676970ff159401246026067a279650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::shared</definition>
        <argsstring>(const DerivedView&lt; ViewA &gt; &amp;, const ConstView&lt; ViewB &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewA &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewB &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="672" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="672" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a2d0f0453321f91c2dd366574fd3fa52d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::shared</definition>
        <argsstring>(const ConstView&lt; View &gt; &amp;, const VarImpView&lt; Var &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; View &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="677" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="677" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a4e9c2a8b280d6082f8868f0caaa86214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::shared</definition>
        <argsstring>(const ConstView&lt; ViewA &gt; &amp;, const DerivedView&lt; ViewB &gt; &amp;)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1ConstView" kindref="compound">ConstView</ref>&lt; ViewA &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewB &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="682" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="682" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a3a94afcef27c7e59770c170ccca6c664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class VarA</type>
          </param>
          <param>
            <type>class VarB</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::shared</definition>
        <argsstring>(const VarImpView&lt; VarA &gt; &amp;x, const VarImpView&lt; VarB &gt; &amp;y)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; VarA &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; VarB &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="687" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="687" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a75be57254726205808309ec1ae272592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Var</type>
          </param>
          <param>
            <type>class View</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::shared</definition>
        <argsstring>(const VarImpView&lt; Var &gt; &amp;x, const DerivedView&lt; View &gt; &amp;y)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; View &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="693" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="693" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ab5609871fda14a2b6c60d8fa98f0e113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View</type>
          </param>
          <param>
            <type>class Var</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::shared</definition>
        <argsstring>(const DerivedView&lt; View &gt; &amp;x, const VarImpView&lt; Var &gt; &amp;y)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; View &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1VarImpView" kindref="compound">VarImpView</ref>&lt; <ref refid="classGecode_1_1Var" kindref="compound">Var</ref> &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="700" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="700" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1abded37ffbdecd720c42ec18f23bfd152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ViewA</type>
          </param>
          <param>
            <type>class ViewB</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::shared</definition>
        <argsstring>(const DerivedView&lt; ViewA &gt; &amp;x, const DerivedView&lt; ViewB &gt; &amp;y)</argsstring>
        <name>shared</name>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewA &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1DerivedView" kindref="compound">DerivedView</ref>&lt; ViewB &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Test whether views share same variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel/view.hpp" line="707" column="1" bodyfile="/usr/include/gecode/kernel/view.hpp" bodystart="707" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelBranchExec_1ga2ec611eebdbabb3ae1f6a7e89f10f036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_KERNEL_EXPORT void</type>
        <definition>GECODE_KERNEL_EXPORT void Gecode::branch</definition>
        <argsstring>(Home home, void(*f)(Space &amp;home))</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Call the function <emphasis>f</emphasis> (with the current space as argument) for branching. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/kernel.hh" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a95ae0c658a5005f6353dd92fae2b2da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>SymmetryHandle Gecode::rows_interchange</definition>
        <argsstring>(const Matrix&lt; A &gt; &amp;m)</argsstring>
        <name>rows_interchange</name>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; A &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Interchangeable rows symmetry specification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/ldsb.hpp" line="44" column="1" bodyfile="/usr/include/gecode/minimodel/ldsb.hpp" bodystart="44" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1afe5e455905440d5418cc2262b628df6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>SymmetryHandle Gecode::columns_interchange</definition>
        <argsstring>(const Matrix&lt; A &gt; &amp;m)</argsstring>
        <name>columns_interchange</name>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; A &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Interchangeable columns symmetry specification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/ldsb.hpp" line="55" column="1" bodyfile="/usr/include/gecode/minimodel/ldsb.hpp" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a2e8fe0b7d12a576e3bddf1eec484d3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>SymmetryHandle Gecode::rows_reflect</definition>
        <argsstring>(const Matrix&lt; A &gt; &amp;m)</argsstring>
        <name>rows_reflect</name>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; A &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Reflect rows symmetry specification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/ldsb.hpp" line="66" column="1" bodyfile="/usr/include/gecode/minimodel/ldsb.hpp" bodystart="66" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a86021d1aeb6aa901e15040760b2d0efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>SymmetryHandle Gecode::columns_reflect</definition>
        <argsstring>(const Matrix&lt; A &gt; &amp;m)</argsstring>
        <name>columns_reflect</name>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; A &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Reflect columns symmetry specification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/ldsb.hpp" line="89" column="1" bodyfile="/usr/include/gecode/minimodel/ldsb.hpp" bodystart="89" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1adf66bd3fa7af1b80ed1a47e996ed5696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>SymmetryHandle Gecode::diagonal_reflect</definition>
        <argsstring>(const Matrix&lt; A &gt; &amp;m)</argsstring>
        <name>diagonal_reflect</name>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; A &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Reflect around main diagonal symmetry specification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/ldsb.hpp" line="112" column="1" bodyfile="/usr/include/gecode/minimodel/ldsb.hpp" bodystart="112" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a4e7c11ec4ce0005fc88fcdbf2f7eaeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt;::ArgsType</type>
        <definition>Slice&lt; A &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const Slice&lt; A &gt; &amp;x, const Slice&lt; A &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Concatenate <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="95" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aae7517eb192526221f78f771e6f09a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt;::ArgsType</type>
        <definition>Slice&lt; A &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const Slice&lt; A &gt; &amp;x, const typename ArrayTraits&lt; A &gt;::ArgsType &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const typename <ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; A &gt;::ArgsType &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Concatenate <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="103" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a55d6f86ac6ac05a5c3c7380bde70236f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt;::ArgsType</type>
        <definition>Slice&lt; A &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const typename ArrayTraits&lt; A &gt;::ArgsType &amp;x, const Slice&lt; A &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const typename <ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; A &gt;::ArgsType &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Concatenate <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="110" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aaeda0ee450f60f8ec8b742a7b223f18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt;::ArgsType</type>
        <definition>Slice&lt; A &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const Slice&lt; A &gt; &amp;x, const typename ArrayTraits&lt; A &gt;::ValueType &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const typename <ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; A &gt;::ValueType &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Concatenate <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="117" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ac87ca75094de5f718ca5ec24ac9986dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt;::ArgsType</type>
        <definition>Slice&lt; A &gt;::ArgsType Gecode::operator+</definition>
        <argsstring>(const typename ArrayTraits&lt; A &gt;::ValueType &amp;x, const Slice&lt; A &gt; &amp;y)</argsstring>
        <name>operator+</name>
        <param>
          <type>const typename <ref refid="classGecode_1_1ArrayTraits" kindref="compound">ArrayTraits</ref>&lt; A &gt;::ValueType &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Concatenate <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="124" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a20f9c2fc465527add161d6ab61aaecf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const Matrix&lt; A &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; A &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="187" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="193" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1af635616f63bdb165c1cca6bca42b7ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const Slice&lt; A &gt; &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; A &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="187" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a23d5dbfd6e909e241a9d7b4c322fe67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline void</type>
        <definition>forceinline void Gecode::element</definition>
        <argsstring>(Home home, const Matrix&lt; IntArgs &gt; &amp;m, IntVar x, IntVar y, IntVar z, IntConLevel icl)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="212" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a0a855fec0aa18e22d7ea37973f3a3f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline void</type>
        <definition>forceinline void Gecode::element</definition>
        <argsstring>(Home home, const Matrix&lt; IntArgs &gt; &amp;m, IntVar x, IntVar y, BoolVar z, IntConLevel icl)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="217" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ad911217d6500952fa00423c2f517d2ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline void</type>
        <definition>forceinline void Gecode::element</definition>
        <argsstring>(Home home, const Matrix&lt; IntVarArgs &gt; &amp;m, IntVar x, IntVar y, IntVar z, IntConLevel icl)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="222" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ae41f0bb31e15458ef30d8f797adeffc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>forceinline void</type>
        <definition>forceinline void Gecode::element</definition>
        <argsstring>(Home home, const Matrix&lt; BoolVarArgs &gt; &amp;m, IntVar x, IntVar y, BoolVar z, IntConLevel icl)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/matrix.hpp" line="227" column="1" bodyfile="/usr/include/gecode/minimodel/matrix.hpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1af079a420497f2c4974b3e911eec632f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const REG &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1REG" kindref="compound">REG</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel/reg.hpp" line="78" column="1" bodyfile="/usr/include/gecode/minimodel/reg.hpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga3dae225cf80797e339ea88aeb334cddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(int, const IntVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga81405b7a69d427722a5b97e555fcceec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(int, const BoolVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga91b624b3ece76bcb30f0ea8807a9805e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(int, const LinIntExpr &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gae17f3cb4c9b6011618511a384e0d6cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const IntVar &amp;, int)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gab241252d9d78c0b19685e8008c708b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const BoolVar &amp;, int)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6b82f7c6d2638ccb696cfa3bd7087c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const LinIntExpr &amp;, int)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga1aac95f3d1b91f43f06a644d4d89dbd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const IntVar &amp;, const IntVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga37e5dea450fa3c2166afcaa12dc3fc5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const IntVar &amp;, const BoolVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaafce29b63d9d2786f49b7ea52ab03efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const BoolVar &amp;, const IntVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga4ef610b960f34664bbb3f802db84fd21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const BoolVar &amp;, const BoolVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga46680a2c0b67989b55abe6e81309305a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const IntVar &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga1b88d561373701be9ce30e33145adaee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const BoolVar &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga24ca047ee14bdef8dffb504a727e282d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const LinIntExpr &amp;, const IntVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga618d8549da20db2a3bafeff198064860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const LinIntExpr &amp;, const BoolVar &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa345325d3284d8215d0c8657ed249338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator+</definition>
        <argsstring>(const LinIntExpr &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8b0d6eeb08aa3c1dc771092d7ce1e5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(int, const IntVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaba60f87fbad9cd4b73f9aafed3a69df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(int, const BoolVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8b3db39f8f55fe8f0d3704e33ce32339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(int, const LinIntExpr &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaf4ccef7f2f9be0204389277ca140b1f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const IntVar &amp;, int)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga0ef5fbba8cda61a8cb98d61403f9c722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const BoolVar &amp;, int)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga126f90b5f334d0ff41d39117c03d8dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const LinIntExpr &amp;, int)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaf2e774826b69f7b30a7bfadd33a7820d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const IntVar &amp;, const IntVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga70375f818b2c105622230c44a7b44410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const IntVar &amp;, const BoolVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gab09fccb4be57b1e3d9d80c92aebfd11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const BoolVar &amp;, const IntVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8f4cdfa2e79f4be2fe2b51db037d3842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const BoolVar &amp;, const BoolVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga660cb78a5ce60e6153426f32eb2fc6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const IntVar &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variable and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga712ddfafbda4094cbcdddfe883fee898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const BoolVar &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variable and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6812c652b280b4c22aa793e46489c6e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const LinIntExpr &amp;, const IntVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8135b2344654c0c0c4975d274aeefa92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const LinIntExpr &amp;, const BoolVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expression and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga5555668953625fb12954ee992ae0c9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const LinIntExpr &amp;, const LinIntExpr &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of linear expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaefbad399f175a74ffc0ca6b9214ff665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const IntVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as negative of integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa79c152ae5275a993d4d12f888ba2cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const BoolVar &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as negative of Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gafa503423ac9ce8c1415519b24f6cb468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator-</definition>
        <argsstring>(const LinIntExpr &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as negative of linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaca3bb47a1cc9129b556c96ddd57ae19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(int, const IntVar &amp;)</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga69e9172fbf900c0801897984d136e262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(int, const BoolVar &amp;)</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6a2b4157bc05dbe42b1fe0efdc56b31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(const IntVar &amp;, int)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and integer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gade996ba9e2ddfeef3fb5067e5172428a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(const BoolVar &amp;, int)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and Boolean variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga51a54498dd755cca66d14f29a0affce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(const LinIntExpr &amp;, int)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gabf822d9aaf2b14dcb6ab7f42335257c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(int, const LinIntExpr &amp;)</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct linear expression as product of integer coefficient and linear expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8c3d837827d68f719e11213e95da6db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const IntVarArgs &amp;x)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga5ce88d6690c43267eb0fde72386f5199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const IntArgs &amp;a, const IntVarArgs &amp;x)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of integer variables with coefficients. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gae3c3644c11666413e125f25ed9097717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const BoolVarArgs &amp;x)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gabcf80a1683f15f44768a6cbaca441d72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const IntArgs &amp;a, const BoolVarArgs &amp;x)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of Boolean variables with coefficients. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gab9c1bf702e1a015949533ca5c7c66f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const IntArgs &amp;args)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6095e71acafa0a71ff3b6c021cfa0ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga3c175f84fc1271856eefee7ce8cb1f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa8e59cb4c76b2fc88cccf306b65ace7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaca8ce091e769560b213a3c6a3863622b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga490b0aa18a1c7f047b8cadfb4362b832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gac63f76b2737d70c4d5a729ab19057c77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gad60fd62890ee2d13254c6d0a17548681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gacf4cc07a79aae7317b9c648e29e31658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa09f019cfcfcf0e7cdd1de0e7ca8e094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gae92a5a3d14d3a46e502b793ffea2f2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga7894c4050b5b30481e660561f24f5365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga82830f4faf7e4f5e62488445bb48e218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga1dabc79475b6593bfd9b876a358c9a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga7898414e7145e5ad1eea483724715e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga34418f44acb7d02b7b41b202087a002a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator==</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear equality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga64786781fae4ff3bc2d902c63cfaa04f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gad58241231aceb718408b31d6a5bb9ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga19372ceb837c77db23b8b92fb0e135f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8acba9e3c38f6b51c00737a2b8975135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga594f7fdc4cf5f07d16424bc7100c6a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga68359d8b2ca970c70f153674aa00a8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gacf07e05e7022a2f08207249ef0bc3257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8332138b52a1d4073a7b110043115221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga176efabf56464e1ec8243df14bd02853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gab6d5b87421bfafab8e8c518ce423fe1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga81e74e876468aec6fd1ad21195d92027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga20fe57567c767ba4d5879215a29168d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gac0f0e3c5732d17e6a5773e5c248b3eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga3efada6b029f8ec8dc08efcab4b89398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga8585bba1d384902bc3e9e00fb0f0301c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator!=</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear disequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6a1534f72acc0cc96c11dd5adfa83534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga38a9223929ca712dc1fb3599a3e25dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6710ded20bcf95b37a3d6c3ac1bf5143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga2847d4efe555533e33e9ef52c883e871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaf3b69fd26f30d57f8898c98f5b778187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gad2aedec8a5fe0079564f0437d8085992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga44a1173211573eeadd7478463354672e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga1c92a7fea30b9bc042016db216446091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa0e56b70bba7eed3a43b295d96c8c043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gad6657b81a14550a44bbc360ff52d5261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga605d526d50e6e094c50c510b3533a692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gabf1a9345d847d18a777294fb4f3ee224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga822541836df96be52c3a9decab2f488f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gae1ad119d597f7100da0a6e5c5de80fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="538" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga92d9d4356bc985064413bb7755b5a7ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga456fbc4ed8d2bfba22e0a7008dbd6af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga9f53aa1dcfb4ca9a6f7b479149f18f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga6c17087ce2ae8f6caed800b89766e165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga29b38cca296cb92e0709f579bb3700e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga12f924f294026f82162d221084cc8bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaece7129a653e281373939768914050cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga86b3d42a885b02a53817c7fd7c68142d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga71bd656f1be70e73adea3e11329baf4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaeeaeecfa464794aeef95a8039ac64d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga47f28785fc5f505e2547e7da87517128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga9e58b32ade3ea083ec80a0e55a828ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="575" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gab7b351be8253c13256fd34f7f16024b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga08b4ffa67605679c4c192b168fb7df86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga1b7b3c9ec069010727f66f31b3101652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga76808fc1200b20b7f97a875e8f4c9a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&lt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga2f20bafbf9ca125cf5be1404bc443ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="592" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa34decac86f7dd7db1fe93a76d1d8ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gabfc4a91a38ef013b9762a7ab9cf6ff76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaec42e3df52fbe004d1650c25ad72c550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga35a670daaa7b3057a4894206d27e29c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaca3303958ca8b4707ec89c3e3f380af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="607" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga5e51836cbaf1582574a6aae0c4d4b24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga901084f0a8564c8a7a2addb724190ddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="613" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga62a69f0c59ad3f6f0d56b32712c4f805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="616" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga9c0b854ca41e9edf0c9ba836a2580aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="619" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga084848c2c35b1a25f31be640de1fc0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaf407de2fdda2f23ed15210ced0722923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gacea90ae01f6facb9dcd496bbc2c4e5a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gadc5c10c56bcc834d79e00fd450bec24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="631" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga7920566b0fe55112939a1bc8a7cc6df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="634" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaaf2c1688fe50735366b9df02278a9e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(int l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="638" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga14ef94ec043c291d62b30d64d4f4217b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(int l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="641" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga5a5ef28b3056302dbbd2a0fed42f8dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(int l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga44cf58ddb63e6297c55a294c6bd7cb07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const IntVar &amp;l, int r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="647" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga9a5c815bfcb00a0504c3146b30fc4511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const BoolVar &amp;l, int r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga60f1b7fca1c015f32ce0c80d7697e3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, int r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gac9bb0bc98537e6a7bcc26729ec830a07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const IntVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga54ff33662f68fc628ff9562992e55403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const IntVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="659" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gaa28fd3fe6a771c5732f669bf5aed627b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const BoolVar &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga288cdccfe0e59e4607f6bea9c1ecc626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const BoolVar &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="665" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga5a2efb5a816df398c8eaee13d1c84a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const IntVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="668" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga612cf829dda1861c0961521b050b1573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const BoolVar &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga56038c8a7b700d83a7ee1aabf4093a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const IntVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1ga452f7e76fd78fb0cbb4468078b7ca92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const BoolVar &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelLin_1gadc0ee868de71454ee3cb6faa4c73ba13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntRel" kindref="compound">LinIntRel</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntRel Gecode::operator&gt;=</definition>
        <argsstring>(const LinIntExpr &amp;l, const LinIntExpr &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct linear inequality relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelBool_1gabccb898815dbb7cae4e70dc24d676fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT BoolExpr Gecode::operator!</definition>
        <argsstring>(const BoolExpr &amp;)</argsstring>
        <name>operator!</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Negated Boolean expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelBool_1ga213da66c75b893acda25e597820bac25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT BoolExpr Gecode::operator&amp;&amp;</definition>
        <argsstring>(const BoolExpr &amp;, const BoolExpr &amp;)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Conjunction of Boolean expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelBool_1ga07d7b202ea241d4deafa072fb9f90da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT BoolExpr Gecode::operator||</definition>
        <argsstring>(const BoolExpr &amp;, const BoolExpr &amp;)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Disjunction of Boolean expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelBool_1ga2f52baeb06ef25eb79a4ea83a77f8f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT BoolExpr Gecode::operator^</definition>
        <argsstring>(const BoolExpr &amp;, const BoolExpr &amp;)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Exclusive-or of Boolean expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelBool_1gae24158e9eaca93c103298cc5959125d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT BoolExpr Gecode::operator!=</definition>
        <argsstring>(const BoolExpr &amp;, const BoolExpr &amp;)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Non-equivalence of Boolean expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelBool_1ga18157a135a27c94d1fb83b413b58fc6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT BoolExpr Gecode::operator==</definition>
        <argsstring>(const BoolExpr &amp;, const BoolExpr &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Equivalence of Boolean expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelBool_1gac3b01cfee49d087d674d1715fd3539fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT BoolExpr Gecode::operator&gt;&gt;</definition>
        <argsstring>(const BoolExpr &amp;, const BoolExpr &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Implication of Boolean expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelBool_1gaa188ee83fe078f07244a06c16cd05c77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT BoolExpr Gecode::operator&lt;&lt;</definition>
        <argsstring>(const BoolExpr &amp;, const BoolExpr &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Reverse implication of Boolean expressions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelPost_1ga23d2837ab202a1fad55a517913a62129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT IntVar Gecode::expr</definition>
        <argsstring>(Home home, const LinIntExpr &amp;e, IntConLevel icl=ICL_DEF)</argsstring>
        <name>expr</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post linear expression and return its value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelPost_1ga785a4489573cad9ddda0e5694a59776c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT BoolVar Gecode::expr</definition>
        <argsstring>(Home home, const BoolExpr &amp;e, IntConLevel icl=ICL_DEF)</argsstring>
        <name>expr</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post Boolean expression and return its value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelPost_1ga638737222fb85d10d7adea10484a1767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT void</type>
        <definition>GECODE_MINIMODEL_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const BoolExpr &amp;e, IntConLevel icl=ICL_DEF)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post Boolean relation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga401d3dd65573d724092ae8d514fb052a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::abs</definition>
        <argsstring>(const LinIntExpr &amp;e)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="317">$|e|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga8f8117e06722cb2d4eed90dad67d9be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::min</definition>
        <argsstring>(const LinIntExpr &amp;x, const LinIntExpr &amp;y)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="318">$\min(x,y)$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga1908d02cb49f242ca7017f3a183d7384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::min</definition>
        <argsstring>(const IntVarArgs &amp;x)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="319">$\min(x)$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga6b5925eaca8625e217a1118d21d0e3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::max</definition>
        <argsstring>(const LinIntExpr &amp;x, const LinIntExpr &amp;y)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="320">$\max(x,y)$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga810c7b5aad44e631c7792fa07b856b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::max</definition>
        <argsstring>(const IntVarArgs &amp;x)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="321">$\max(x)$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1gaf974b49ad90ef31739b86603e55fe3f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator*</definition>
        <argsstring>(const LinIntExpr &amp;x, const LinIntExpr &amp;y)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="322">$x\cdot y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga604258cd35486366f28378c0e9ddc4fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator/</definition>
        <argsstring>(const LinIntExpr &amp;x, const LinIntExpr &amp;y)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="323">$x\ \mathrm{div}\ y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga0b1935a8cab3f15566c717f4687d6828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::operator%</definition>
        <argsstring>(const LinIntExpr &amp;x, const LinIntExpr &amp;y)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="324">$x\ \mathrm{mod}\ y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga824e95c14c48cdbde349aa0d3a18f544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sqr</definition>
        <argsstring>(const LinIntExpr &amp;x)</argsstring>
        <name>sqr</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="88">$x^2$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1gae9acc022ddb722670c47fcf5052f24a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sqrt</definition>
        <argsstring>(const LinIntExpr &amp;x)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="325">$\lfloor\sqrt{x}\rfloor$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1gab7319c2c59c9323b50973f9376a8a32c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::pow</definition>
        <argsstring>(const LinIntExpr &amp;x, int n)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="94">$x^n$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1gacfbdaac9c7e8d76d83cf49d555636d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::nroot</definition>
        <argsstring>(const LinIntExpr &amp;x, int n)</argsstring>
        <name>nroot</name>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="326">$\lfloor\sqrt[n]{x}\rfloor$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga7bb296cb21af749c5e9479b978d75de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::element</definition>
        <argsstring>(const IntVarArgs &amp;x, const LinIntExpr &amp;y)</argsstring>
        <name>element</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="327">$x[y]$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1gac74f8e1c41a45e02fcc5a963a4055f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT BoolExpr Gecode::element</definition>
        <argsstring>(const BoolVarArgs &amp;x, const LinIntExpr &amp;y)</argsstring>
        <name>element</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="327">$x[y]$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga65b46dd3ac46a2b0f9b8e4d2eb81a1ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::element</definition>
        <argsstring>(const IntArgs &amp;x, const LinIntExpr &amp;y)</argsstring>
        <name>element</name>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return expression for <formula id="327">$x[y]$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelArith_1ga2fd11f9414e6e4a84e7f85fbb57e38c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::ite</definition>
        <argsstring>(const BoolExpr &amp;b, const LinIntExpr &amp;x, const LinIntExpr &amp;y)</argsstring>
        <name>ite</name>
        <param>
          <type>const <ref refid="classGecode_1_1BoolExpr" kindref="compound">BoolExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Return expression for if-then-else <formula id="328">$b?x:y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelChannel_1ga90a82817841f1548fe3c764edcd507c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
        <definition>BoolVar Gecode::channel</definition>
        <argsstring>(Home home, IntVar x, IntConLevel icl=ICL_DEF)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Return Boolean variable equal to <formula id="31">$x$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1616" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1616" bodyend="1621"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelChannel_1gaf112cd4bdbd86db0220b7a17b60799b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
        <definition>IntVar Gecode::channel</definition>
        <argsstring>(Home home, BoolVar b, IntConLevel icl=ICL_DEF)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1BoolVar" kindref="compound">BoolVar</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Return integer variable equal to <formula id="146">$b$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1624" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1624" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga69f07c384f2b43fff58648bfb3522187" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atmost</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int n, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atmost</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="329">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=n\}\leq m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1675" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1675" bodyend="1678"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga46cdc3499e9b953cb6b3b6c28e89d97b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atmost</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atmost</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="330">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y\}\leq m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1684" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1684" bodyend="1687"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1gad638750dbdcbbf40db4855c833886317" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atmost</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;y, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atmost</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="331">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y_i\}\leq m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1696" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1696" bodyend="1699"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga97ef0b5c7871c4cb7dcf5c5af5a48c96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atmost</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int n, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atmost</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="332">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=n\}\leq z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1705" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1705" bodyend="1708"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga0e42328f0267b954e3ff9d811facb5d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atmost</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atmost</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="333">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y\}\leq z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1714" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1714" bodyend="1717"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga7ad1ef027383013731ecbef98ba119a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atmost</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atmost</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="334">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y_i\}\leq z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1726" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1726" bodyend="1729"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1gab71034829f9008e332a406d7825a9ea3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atleast</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int n, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atleast</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="335">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=n\}\geq m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1736" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1736" bodyend="1739"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga0eb65a55ed75c57a95af9ceb4f5b623b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atleast</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atleast</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="336">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y\}\geq m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1745" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1745" bodyend="1748"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1gac3966869f841811cf64efbc44cd2e0a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atleast</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;y, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atleast</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="337">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y_i\}\geq m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1757" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1757" bodyend="1760"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1gac373f14f2fd84a50dc30feaa4962fcb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atleast</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int n, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atleast</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="338">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=n\}\geq z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1766" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1766" bodyend="1769"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga8edd04a94fc63ce2ab838ca2b7eee075" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atleast</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atleast</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="339">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y\}\geq z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1775" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1775" bodyend="1778"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga599e8330374a5ea9740b76e639470639" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::atleast</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>atleast</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="340">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y_i\}\geq z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1787" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1787" bodyend="1790"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1gadc52f4ca87e85283ec3a2a392500b347" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::exactly</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int n, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>exactly</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="341">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=n\}=m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1797" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1797" bodyend="1800"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1gae6b8cde090f8cdd0c3c572ead51620e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::exactly</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>exactly</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="342">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y\}=m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1806" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1806" bodyend="1809"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga180da2f81c64a4aeb2e382f2498e820f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::exactly</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;y, int m, IntConLevel icl=ICL_DEF)</argsstring>
        <name>exactly</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="343">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y_i\}=m$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1818" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1818" bodyend="1821"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1gaad3bce5a90b320be7c017ba1af14de80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::exactly</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, int n, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>exactly</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="344">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=n\}=z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1827" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1827" bodyend="1830"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1gaa0f1309cc735623ab06a05e0522b47db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::exactly</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntVar y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>exactly</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="345">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y\}=z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1836" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1836" bodyend="1839"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga8c75768e09a1449dea4755955b4caa00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::exactly</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const IntArgs &amp;y, IntVar z, IntConLevel icl=ICL_DEF)</argsstring>
        <name>exactly</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="346">$\#\{i\in\{0,\ldots,|x|-1\}\;|\;x_i=y_i\}=z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Supports domain consistent propagation only.</para><para>Throws an exception of type <ref refid="classGecode_1_1Int_1_1ArgumentSizeMismatch" kindref="compound">Int::ArgumentSizeMismatch</ref>, if <emphasis>x</emphasis> and <emphasis>y</emphasis> are of different size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1848" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1848" bodyend="1851"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga70b332a6bb1c6fa6f1cbec83c74f4d81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::lex</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntRelType r, const IntVarArgs &amp;y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>lex</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post lexical order between <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1855" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1855" bodyend="1858"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga43a2c5fac05c3023718a73fad03bc6f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::lex</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, IntRelType r, const BoolVarArgs &amp;y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>lex</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post lexical order between <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1862" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1862" bodyend="1865"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelMiniModelIntAlias_1ga3132bb6ef494147e4400eb0e163425b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Gecode::values</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, IntSet y, IntConLevel icl=ICL_DEF)</argsstring>
        <name>values</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247ad" kindref="member">IntConLevel</ref></type>
          <declname>icl</declname>
          <defval><ref refid="namespaceGecode_1a22c1363cbf5a7e6fa6c250ae813247adace6cc5f677c3366b58e30b854c455472" kindref="member">ICL_DEF</ref></defval>
        </param>
        <briefdescription>
<para>Post constraint <formula id="347">$\{x_0,\dots,x_{n-1}\}=y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="1869" column="1" bodyfile="/usr/include/gecode/minimodel.hh" bodystart="1869" bodyend="1873"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a89aa914bcc3ec4209c6c7676b516edb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const Slice&lt; IntArgs &gt; &amp;slice)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref>&lt; <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &gt; &amp;</type>
          <declname>slice</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> <ref refid="classGecode_1_1Slice" kindref="compound">Slice</ref> elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="2184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1adfb1ad5b296130e2c71bd68ce1aebde2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_MINIMODEL_EXPORT <ref refid="classGecode_1_1LinIntExpr" kindref="compound">LinIntExpr</ref></type>
        <definition>GECODE_MINIMODEL_EXPORT LinIntExpr Gecode::sum</definition>
        <argsstring>(const Matrix&lt; IntArgs &gt; &amp;matrix)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Construct linear expression as sum of <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> <ref refid="classGecode_1_1Matrix" kindref="compound">Matrix</ref> elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/minimodel.hh" line="2187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a7562737136818915678a29861083c357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * Gecode::bab</definition>
        <argsstring>(T *s, const Search::Options &amp;o=Search::Options::def)</argsstring>
        <name>bab</name>
        <param>
          <type>T *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Search_1_1Options" kindref="compound">Search::Options</ref> &amp;</type>
          <declname>o</declname>
          <defval><ref refid="classGecode_1_1Search_1_1Options_1a728fe5135c29f829246e5db81bc81f7f" kindref="member">Search::Options::def</ref></defval>
        </param>
        <briefdescription>
<para>Perform depth-first branch-and-bound search for subclass <emphasis>T</emphasis> of space <emphasis>s</emphasis> and options <emphasis>o</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Additionally, <emphasis>s</emphasis> must implement a member function <programlisting><codeline><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>constrain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)<sp/></highlight></codeline>
</programlisting> Whenever exploration requires to add a constraint to the space <emphasis>c</emphasis> currently being explored, the engine executes <computeroutput>c.constrain(t)</computeroutput> where <emphasis>t</emphasis> is the so-far best solution. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/search/bab.hpp" line="81" column="1" bodyfile="/usr/include/gecode/search/bab.hpp" bodystart="81" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1af1255da35a19102a9671cdaa2bdbfc13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>forceinline T *</type>
        <definition>forceinline T* Gecode::dfs</definition>
        <argsstring>(T *s, const Search::Options &amp;o)</argsstring>
        <name>dfs</name>
        <param>
          <type>T *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Search_1_1Options" kindref="compound">Search::Options</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Invoke depth-first search engine for subclass <emphasis>T</emphasis> of space <emphasis>s</emphasis> with options <emphasis>o</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/search/dfs.hpp" line="77" column="1" bodyfile="/usr/include/gecode/search/dfs.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a7fc0f6f64289b345e4e860b45da06b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>forceinline T *</type>
        <definition>forceinline T* Gecode::rbs</definition>
        <argsstring>(T *s, const Search::Options &amp;o)</argsstring>
        <name>rbs</name>
        <param>
          <type>T *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Search_1_1Options" kindref="compound">Search::Options</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Perform restart-based search. </para>        </briefdescription>
        <detaileddescription>
<para>The engine uses the Cutoff sequence supplied in the options <emphasis>o</emphasis> to periodically restart the search of an engine of type <emphasis>E</emphasis>.</para><para>The class <emphasis>T</emphasis> can implement member functions <programlisting><codeline><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>master(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Space*<sp/>s)<sp/></highlight></codeline>
</programlisting> and <programlisting><codeline><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>slave(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Space*<sp/>s)<sp/></highlight></codeline>
</programlisting></para><para>Whenever exploration restarts or a solution is found, the engine executes the functions on the master and slave space. For more details, consult &quot;Modeling and Programming
with Gecode&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/search/rbs.hpp" line="98" column="1" bodyfile="/usr/include/gecode/search/rbs.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a9f0bad0299b6efebdd316d8c7613ec16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* Gecode::dfs</definition>
        <argsstring>(T *s, const Search::Options &amp;o=Search::Options::def)</argsstring>
        <name>dfs</name>
        <param>
          <type>T *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Search_1_1Options" kindref="compound">Search::Options</ref> &amp;</type>
          <declname>o</declname>
          <defval><ref refid="classGecode_1_1Search_1_1Options_1a728fe5135c29f829246e5db81bc81f7f" kindref="member">Search::Options::def</ref></defval>
        </param>
        <briefdescription>
<para>Invoke depth-first search engine for subclass <emphasis>T</emphasis> of space <emphasis>s</emphasis> with options <emphasis>o</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/search.hh" line="505" column="1" bodyfile="/usr/include/gecode/search/dfs.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aa45763f8969b8e6a5fcab48e92f1d7f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* Gecode::rbs</definition>
        <argsstring>(T *s, const Search::Options &amp;o)</argsstring>
        <name>rbs</name>
        <param>
          <type>T *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Search_1_1Options" kindref="compound">Search::Options</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Perform restart-based search. </para>        </briefdescription>
        <detaileddescription>
<para>The engine uses the Cutoff sequence supplied in the options <emphasis>o</emphasis> to periodically restart the search of an engine of type <emphasis>E</emphasis>.</para><para>The class <emphasis>T</emphasis> can implement member functions <programlisting><codeline><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>master(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Space*<sp/>s)<sp/></highlight></codeline>
</programlisting> and <programlisting><codeline><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>slave(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Space*<sp/>s)<sp/></highlight></codeline>
</programlisting></para><para>Whenever exploration restarts or a solution is found, the engine executes the functions on the master and slave space. For more details, consult &quot;Modeling and Programming
with Gecode&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/search.hh" line="610" column="1" bodyfile="/usr/include/gecode/search/rbs.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchAssign_1gac14d6f306a7457a6bc112ce8dcc41e4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
        <definition>SetAssign Gecode::SET_ASSIGN_MIN_INC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_ASSIGN_MIN_INC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Include smallest element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/assign.hpp" line="59" column="1" bodyfile="/usr/include/gecode/set/branch/assign.hpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchAssign_1gac03f391b1d07aaacb2c71440051dfed8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
        <definition>SetAssign Gecode::SET_ASSIGN_MIN_EXC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_ASSIGN_MIN_EXC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Exclude smallest element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/assign.hpp" line="64" column="1" bodyfile="/usr/include/gecode/set/branch/assign.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchAssign_1ga5a83a1e725bdd842727a9aa5c4685d3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
        <definition>SetAssign Gecode::SET_ASSIGN_MED_INC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_ASSIGN_MED_INC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Include median element (rounding downwards) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/assign.hpp" line="69" column="1" bodyfile="/usr/include/gecode/set/branch/assign.hpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchAssign_1ga55b9190ca348b9505dd6fe9419f3077d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
        <definition>SetAssign Gecode::SET_ASSIGN_MED_EXC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_ASSIGN_MED_EXC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Exclude median element (rounding downwards) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/assign.hpp" line="74" column="1" bodyfile="/usr/include/gecode/set/branch/assign.hpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchAssign_1ga89b451dd4af5ccffc6c63d68f2ad609e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
        <definition>SetAssign Gecode::SET_ASSIGN_MAX_INC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_ASSIGN_MAX_INC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Include largest element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/assign.hpp" line="79" column="1" bodyfile="/usr/include/gecode/set/branch/assign.hpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchAssign_1gacd5bc51e4298b0eed4f0cdf749002380" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
        <definition>SetAssign Gecode::SET_ASSIGN_MAX_EXC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_ASSIGN_MAX_EXC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Exclude largest element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/assign.hpp" line="84" column="1" bodyfile="/usr/include/gecode/set/branch/assign.hpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchAssign_1ga98ab6de6c62c98972e9c9ac53b2f6edd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
        <definition>SetAssign Gecode::SET_ASSIGN_RND_INC</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>SET_ASSIGN_RND_INC</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Include random element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/assign.hpp" line="89" column="1" bodyfile="/usr/include/gecode/set/branch/assign.hpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchAssign_1ga2a2cf4854920b4c59d96498cc859914a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
        <definition>SetAssign Gecode::SET_ASSIGN_RND_EXC</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>SET_ASSIGN_RND_EXC</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Exclude random element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/assign.hpp" line="94" column="1" bodyfile="/usr/include/gecode/set/branch/assign.hpp" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchAssign_1gae0c6e0649df9e3f323ef72a535c97cf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
        <definition>SetAssign Gecode::SET_ASSIGN</definition>
        <argsstring>(SetBranchVal v, SetBranchCommit c=NULL)</argsstring>
        <name>SET_ASSIGN</name>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1gaf4fd23ef1eceb32a440e0183a2ae0346" kindref="member">SetBranchVal</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1gadec0414377e8be38b2cd3113d5fd9abd" kindref="member">SetBranchCommit</ref></type>
          <declname>c</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Select value as defined by the value function <emphasis>v</emphasis> and commit function <emphasis>c</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The default commit function posts the constraint that the value <emphasis>n</emphasis> must be included in the set variable <emphasis>x</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/assign.hpp" line="99" column="1" bodyfile="/usr/include/gecode/set/branch/assign.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVal_1gab20a316e22a888205c4829822fadf3a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
        <definition>SetValBranch Gecode::SET_VAL_MIN_INC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_VAL_MIN_INC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Include smallest element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/val.hpp" line="59" column="1" bodyfile="/usr/include/gecode/set/branch/val.hpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVal_1gaf6f6101840fffe8f7014a5bac1cfbedd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
        <definition>SetValBranch Gecode::SET_VAL_MIN_EXC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_VAL_MIN_EXC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Exclude smallest element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/val.hpp" line="64" column="1" bodyfile="/usr/include/gecode/set/branch/val.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVal_1ga0286ecf5576689112306509a72dd1663" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
        <definition>SetValBranch Gecode::SET_VAL_MED_INC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_VAL_MED_INC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Include median element (rounding downwards) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/val.hpp" line="69" column="1" bodyfile="/usr/include/gecode/set/branch/val.hpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVal_1ga907766244c0ff4a92d18d8515795fd50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
        <definition>SetValBranch Gecode::SET_VAL_MED_EXC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_VAL_MED_EXC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Exclude median element (rounding downwards) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/val.hpp" line="74" column="1" bodyfile="/usr/include/gecode/set/branch/val.hpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVal_1ga9086c127cad66232e9fc27e07c655585" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
        <definition>SetValBranch Gecode::SET_VAL_MAX_INC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_VAL_MAX_INC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Include largest element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/val.hpp" line="79" column="1" bodyfile="/usr/include/gecode/set/branch/val.hpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVal_1gac47f9a0e87230f736381f880fbb2a619" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
        <definition>SetValBranch Gecode::SET_VAL_MAX_EXC</definition>
        <argsstring>(void)</argsstring>
        <name>SET_VAL_MAX_EXC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Exclude largest element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/val.hpp" line="84" column="1" bodyfile="/usr/include/gecode/set/branch/val.hpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVal_1ga3d784fee5923f8f943d261777c7b3684" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
        <definition>SetValBranch Gecode::SET_VAL_RND_INC</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>SET_VAL_RND_INC</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Include random element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/val.hpp" line="89" column="1" bodyfile="/usr/include/gecode/set/branch/val.hpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVal_1ga4b22539515f3a18b57f353e8e3a388b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
        <definition>SetValBranch Gecode::SET_VAL_RND_EXC</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>SET_VAL_RND_EXC</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Exclude random element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/val.hpp" line="94" column="1" bodyfile="/usr/include/gecode/set/branch/val.hpp" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVal_1ga8955172a8d294390b8405a3c533e612d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
        <definition>SetValBranch Gecode::SET_VAL</definition>
        <argsstring>(SetBranchVal v, SetBranchCommit c=NULL)</argsstring>
        <name>SET_VAL</name>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1gaf4fd23ef1eceb32a440e0183a2ae0346" kindref="member">SetBranchVal</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1gadec0414377e8be38b2cd3113d5fd9abd" kindref="member">SetBranchCommit</ref></type>
          <declname>c</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Select value as defined by the value function <emphasis>v</emphasis> and commit function <emphasis>c</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The default commit function posts the constraint that the value <emphasis>n</emphasis> must be included in the set variable <emphasis>x</emphasis> for the first alternative, and that <emphasis>n</emphasis> must be excluded from <emphasis>x</emphasis> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/val.hpp" line="99" column="1" bodyfile="/usr/include/gecode/set/branch/val.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga3bf3fd2b6de7d5d3f3b60f9aa0f4c0af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_NONE</definition>
        <argsstring>(void)</argsstring>
        <name>SET_VAR_NONE</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Select first unassigned variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="91" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga6a5439f4b98589fdd62501bab759551e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_RND</definition>
        <argsstring>(Rnd r)</argsstring>
        <name>SET_VAR_RND</name>
        <param>
          <type><ref refid="classGecode_1_1Rnd" kindref="compound">Rnd</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Select random variable (uniform distribution, for tie breaking) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="96" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga7d6d2bfbbbebe52ad47ae9b8cdc6f6da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_MERIT_MIN</definition>
        <argsstring>(SetBranchMerit bm, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_MERIT_MIN</name>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1ga268dda441c27ed5f438bdf2386e89fac" kindref="member">SetBranchMerit</ref></type>
          <declname>bm</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with least merit according to branch merit function <emphasis>bm</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="101" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga0ea06f078f328536cd507b41576e656b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_MERIT_MAX</definition>
        <argsstring>(SetBranchMerit bm, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_MERIT_MAX</name>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1ga268dda441c27ed5f438bdf2386e89fac" kindref="member">SetBranchMerit</ref></type>
          <declname>bm</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with highest merit according to branch merit function <emphasis>bm</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="107" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga90404977ce7bd93115cd48a495e53baa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_DEGREE_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_DEGREE_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest degree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="113" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1gabf832cc817215b8314c8b5eab4461203" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_DEGREE_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_DEGREE_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest degree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="118" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga721e3bb650bdcab5dd5091e095460d81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_AFC_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_AFC_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="123" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga025cc758b03e65aaebcbfd56cfbdaa19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_AFC_MIN</definition>
        <argsstring>(SetAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_AFC_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1SetAFC" kindref="compound">SetAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="128" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga69e31d5913a4b68efb031c26662b452b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_AFC_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_AFC_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="133" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga1c7726750c6c9c16cc0a910045c555bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_AFC_MAX</definition>
        <argsstring>(SetAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_AFC_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1SetAFC" kindref="compound">SetAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="138" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga338ff2c9f090922bc7334430e455b7a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_ACTIVITY_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_ACTIVITY_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with lowest activity with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="143" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1gad234343ac2f65662e63003bc1db0ab44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_ACTIVITY_MIN</definition>
        <argsstring>(SetActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_ACTIVITY_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1SetActivity" kindref="compound">SetActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with lowest activity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="148" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga2405333d9131bcb36232242631203a58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_ACTIVITY_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_ACTIVITY_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with highest activity with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="153" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1gade05e27d0825e3e5b0678c60d3d74c56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_ACTIVITY_MAX</definition>
        <argsstring>(SetActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_ACTIVITY_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1SetActivity" kindref="compound">SetActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with highest activity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="158" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1gac8c0205694ee3721c591091b86fc7855" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_MIN_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_MIN_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest minimum unknown element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="163" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga48717e45078f91c50f5aa9a28d146841" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_MIN_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_MIN_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest minimum unknown element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="168" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga15b77ffd263bdf2a531db5db19a94bd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_MAX_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_MAX_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest maximum unknown element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="173" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1gad9ad3be0aff65bba76665ea6ca6b1e95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_MAX_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_MAX_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest maximum unknown element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="178" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1gaeae242e8d362a4ecbf14147fcef80a69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_SIZE_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_SIZE_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest unknown set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="183" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga66afc19046123abc055e20cdc337cfa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_SIZE_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_SIZE_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest unknown set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="188" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga84a8fabf0afc2941cfdbdc8e93328018" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_DEGREE_SIZE_MIN</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_DEGREE_SIZE_MIN</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest degree divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="193" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga47c60c926239ee28525d7a41f91d3919" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_DEGREE_SIZE_MAX</definition>
        <argsstring>(BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_DEGREE_SIZE_MAX</name>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest degree divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="198" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga969f26730456dd8ab6a670608f1e1ea6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_AFC_SIZE_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_AFC_SIZE_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="203" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1gaa4187f669a0169704045f16ac0087745" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_AFC_SIZE_MIN</definition>
        <argsstring>(SetAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_AFC_SIZE_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1SetAFC" kindref="compound">SetAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest accumulated failure count divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="208" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga390be7124d90c02847dbebdb1d274b6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_AFC_SIZE_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_AFC_SIZE_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="213" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga6047a695f7ef582e83e2270cf0be989b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_AFC_SIZE_MAX</definition>
        <argsstring>(SetAFC a, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_AFC_SIZE_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1SetAFC" kindref="compound">SetAFC</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest accumulated failure count divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="218" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga6a1b3d21dfbec5b2863d3c77d47bee10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_ACTIVITY_SIZE_MIN</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_ACTIVITY_SIZE_MIN</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest activity divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="223" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga31254fabacff1646ac0f9e48f6d94e43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_ACTIVITY_SIZE_MIN</definition>
        <argsstring>(SetActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_ACTIVITY_SIZE_MIN</name>
        <param>
          <type><ref refid="classGecode_1_1SetActivity" kindref="compound">SetActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with smallest activity divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="228" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1gab5cfadb430293a6fde8789e24fff489b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_ACTIVITY_SIZE_MAX</definition>
        <argsstring>(double d=1.0, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_ACTIVITY_SIZE_MAX</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest activity divided by domain size with decay factor <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="233" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranchVar_1ga5e493f8b78cc75ffa8f0211bfec8c65d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
        <definition>SetVarBranch Gecode::SET_VAR_ACTIVITY_SIZE_MAX</definition>
        <argsstring>(SetActivity a, BranchTbl tbl=NULL)</argsstring>
        <name>SET_VAR_ACTIVITY_SIZE_MAX</name>
        <param>
          <type><ref refid="classGecode_1_1SetActivity" kindref="compound">SetActivity</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelBranch_1ga9aa0d6360268834e569cb4edb11a0fe6" kindref="member">BranchTbl</ref></type>
          <declname>tbl</declname>
        </param>
        <briefdescription>
<para>Select variable with largest activity divided by domain size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/branch/var.hpp" line="238" column="1" bodyfile="/usr/include/gecode/set/branch/var.hpp" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1af98ced206232136c65669a57866a8f1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class View0</type>
          </param>
          <param>
            <type>class View1</type>
          </param>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::viewarrayshared</definition>
        <argsstring>(const Space &amp;home, const ViewArray&lt; View0 &gt; &amp;va, const View1 &amp;y)</argsstring>
        <name>viewarrayshared</name>
        <param>
          <type>const <ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ViewArray" kindref="compound">ViewArray</ref>&lt; View0 &gt; &amp;</type>
          <declname>va</declname>
        </param>
        <param>
          <type>const View1 &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/rel-op/common.hpp" line="51" column="1" bodyfile="/usr/include/gecode/set/rel-op/common.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1af3b125af312da63a5b0b17c6aecd8eb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>forceinline bool</type>
        <definition>forceinline bool Gecode::viewarrayshared&lt; Set::SingletonView, Set::SetView &gt;</definition>
        <argsstring>(const Space &amp;, const ViewArray&lt; Set::SingletonView &gt; &amp;, const Set::SetView &amp;)</argsstring>
        <name>viewarrayshared&lt; Set::SingletonView, Set::SetView &gt;</name>
        <param>
          <type>const <ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1ViewArray" kindref="compound">ViewArray</ref>&lt; <ref refid="classGecode_1_1Set_1_1SingletonView" kindref="compound">Set::SingletonView</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Set_1_1SetView" kindref="compound">Set::SetView</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/rel-op/common.hpp" line="57" column="1" bodyfile="/usr/include/gecode/set/rel-op/common.hpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ab7a28d2756a7e4abba552bd0c3ace583" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Char</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char,Traits&gt;&amp; Gecode::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const SetVar &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set/var/print.hpp" line="101" column="1" bodyfile="/usr/include/gecode/set/var/print.hpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1gaab6c219148e27c90bb01b014a138f8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, SetVar x, SetRelType r, int i)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="405">$ x \sim_r \{i\}$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="678" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1gaaf196830d32c2a77d4026581f975c066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, SetRelType r, int i)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="406">$ x_i \sim_r \{i\}$</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="681" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1ga3bbcf8772dab61782c026d4d43807873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, SetVar x, SetRelType r, int i, int j)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="407">$ x \sim_r \{i,\dots,j\}$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="684" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1ga447b9838e1e76cf4709037c0393a4673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, SetRelType r, int i, int j)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="407">$ x \sim_r \{i,\dots,j\}$</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1gab44221580765bf3d6adfbf0c8db5cec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, SetVar x, SetRelType r, const IntSet &amp;s)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="408">$ x \sim_r s$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="690" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1ga7d5f58f6cdad9f67876cc2f9fdcdc1a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, SetRelType r, const IntSet &amp;s)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="408">$ x \sim_r s$</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1gad406de987b9e483a7c297bb7b2670800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::cardinality</definition>
        <argsstring>(Home home, SetVar x, unsigned int i, unsigned int j)</argsstring>
        <name>cardinality</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="409">$ i \leq |s| \leq j $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="696" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1ga2c1a4c03a1fe555d38ad0fb91b335326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::cardinality</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, unsigned int i, unsigned int j)</argsstring>
        <name>cardinality</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Propagates <formula id="409">$ i \leq |s| \leq j $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1ga96afd7110a32486f9e3a9d7f01c3b8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, SetVar x, SetRelType rt, int i, Reify r)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>rt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="410">$ (x \sim_{rt} \{i\}) \equiv r $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1ga2cb6c3759b0d497588eb3ebd10597720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, SetVar x, SetRelType rt, int i, int j, Reify r)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>rt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="411">$ (x \sim_{rt} \{i,\dots,j\}) \equiv r $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="705" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1ga6451821eb6fbb624e5cf3221beab8ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, SetVar x, SetRelType rt, const IntSet &amp;s, Reify r)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>rt</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="412">$ (x \sim_{rt} s) \equiv r $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="708" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1ga9d282e16c0fccf1dba387135932df5af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, SetVar x, SetVar d)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Constrain domain of <emphasis>x</emphasis> according to domain of <emphasis>d</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="711" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDom_1gab86403185d0676e1d875c0682b4fb9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::dom</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, const SetVarArgs &amp;d)</argsstring>
        <name>dom</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Constrain domain of <formula id="58">$ x_i $</formula> according to domain of <formula id="59">$ d_i $</formula> for all <formula id="53">$0\leq i&lt;|x|$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRel_1gaca113c4e482a29de618468301cfdec14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetVar x, SetRelType r, SetVar y)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="413">$ x \sim_r y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="728" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRel_1gaaa17bd78a37932407fbef0f58043790a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetVar x, SetRelType rt, SetVar y, Reify r)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>rt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="414">$ (x \sim_{rt} y) \equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="732" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRel_1ga2e6ff0019a4a1424e30e72e1aca26d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetVar s, SetRelType r, IntVar x)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="415">$ s \sim_r \{x\}$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="736" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRel_1ga074e0de972e217b76fe14ce73220648b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, IntVar x, SetRelType r, SetVar s)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="416">$ \{x\} \sim_r s$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRel_1ga8308e878e390246f5a6d8f52f6ab8a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetVar s, SetRelType rt, IntVar x, Reify r)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>rt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="417">$ (s \sim_{rt} \{x\}) \equiv r$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="744" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRel_1gae1ba1cebc3119ac6646380ee547190e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, IntVar x, SetRelType rt, SetVar s, Reify r)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>rt</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="418">$ (\{x\} \sim_{rt} s) \equiv r $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRel_1gaa2ddc1afe0b0eaff81ff13119b3f15f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetVar s, IntRelType r, IntVar x)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="419">$|s|\geq 1 \land \forall i\in s:\ i \sim_r x$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="752" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRel_1ga42ce83c535011e6f85213be2a6b6e70a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, IntVar x, IntRelType r, SetVar s)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a2a4b3317737fd8ffb4dfdf43d1bb87aa" kindref="member">IntRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="420">$|s|\geq 1 \land \forall i\in s:\ x \sim_r i$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRelOp_1ga7ae28b8548f2c8645b704a1930d08912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetVar x, SetOpType op, SetVar y, SetRelType r, SetVar z)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="421">$ (x \diamond_{\mathit{op}} y) \sim_r z $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="770" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRelOp_1ga20a54e61b6c6e94707691bd46c46eb41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetOpType op, const SetVarArgs &amp;x, SetVar y)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="422">$ y = \diamond_{\mathit{op}} x$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="774" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRelOp_1ga06bb3a4956ce46e5eee57097683e5e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetOpType op, const SetVarArgs &amp;x, const IntSet &amp;z, SetVar y)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="423">$ y = \diamond_{\mathit{op}} x \diamond_{\mathit{op}} z$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="778" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRelOp_1ga16f3f3eff85a77c24ec39f5b7ebe3298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetOpType op, const IntVarArgs &amp;x, const IntSet &amp;z, SetVar y)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="423">$ y = \diamond_{\mathit{op}} x \diamond_{\mathit{op}} z$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="782" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRelOp_1ga350709df688f27a460475a370557751b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetOpType op, const IntVarArgs &amp;x, SetVar y)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="422">$ y = \diamond_{\mathit{op}} x$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="786" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRelOp_1gabb95dc784aea63694fb6a6c3547520a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const IntSet &amp;x, SetOpType op, SetVar y, SetRelType r, SetVar z)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="421">$ (x \diamond_{\mathit{op}} y) \sim_r z $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRelOp_1gae83f9bbb77df123890de998c42a922cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetVar x, SetOpType op, const IntSet &amp;y, SetRelType r, SetVar z)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="421">$ (x \diamond_{\mathit{op}} y) \sim_r z $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="795" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRelOp_1ga1d116130f2156df62f9c58c80e268353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetVar x, SetOpType op, SetVar y, SetRelType r, const IntSet &amp;z)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="421">$ (x \diamond_{\mathit{op}} y) \sim_r z $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="800" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRelOp_1ga1b8e4b9b09cfdabcd9bd1478ba6b2792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, const IntSet &amp;x, SetOpType op, SetVar y, SetRelType r, const IntSet &amp;z)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="421">$ (x \diamond_{\mathit{op}} y) \sim_r z $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="805" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetRelOp_1ga356a33786516703eece135f673f2610e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::rel</definition>
        <argsstring>(Home home, SetVar x, SetOpType op, const IntSet &amp;y, SetRelType r, const IntSet &amp;z)</argsstring>
        <name>rel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a8052c5af774a3807afe814e2636df7c2" kindref="member">SetRelType</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="421">$ (x \diamond_{\mathit{op}} y) \sim_r z $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="810" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetConvex_1ga771ee2f60db4b31b438cf30daae422fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::convex</definition>
        <argsstring>(Home home, SetVar x)</argsstring>
        <name>convex</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Post propagator that propagates that <emphasis>x</emphasis> is convex. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="825" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetConvex_1gab42e2c59065298c5bc45d455056d0b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::convex</definition>
        <argsstring>(Home home, SetVar x, SetVar y)</argsstring>
        <name>convex</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator that propagates that <emphasis>y</emphasis> is the convex hull of <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="829" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetSequence_1gabb56eeb50b14474bf063296a9922e745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::sequence</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x)</argsstring>
        <name>sequence</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="390">$\forall 0\leq i&lt; |x|-1 : \max(x_i)&lt;\min(x_{i+1})$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="842" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetSequence_1ga38e1275d9411bdd0fee4ecc0157e2abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::sequence</definition>
        <argsstring>(Home home, const SetVarArgs &amp;y, SetVar x)</argsstring>
        <name>sequence</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="390">$\forall 0\leq i&lt; |x|-1 : \max(x_i)&lt;\min(x_{i+1})$</formula> and <formula id="379">$ x = \bigcup_{i\in\{0,\dots,n-1\}} y_i $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="846" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetDistinct_1gaf3d19243d5924fba8fc84d0309bdc7ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::atmostOne</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, unsigned int c)</argsstring>
        <name>atmostOne</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="364">$\forall 0\leq i\leq |x| : |x_i|=c$</formula> and <formula id="365">$\forall 0\leq i&lt;j\leq |x| : |x_i\cap x_j|\leq 1$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="860" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetConnect_1ga2a4b8e447ab3f2347077cec57631ff9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::min</definition>
        <argsstring>(Home home, SetVar s, IntVar x)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Post propagator that propagates that <emphasis>x</emphasis> is the minimal element of <emphasis>s</emphasis>, and that <emphasis>s</emphasis> is not empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="875" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetConnect_1gac1ece265efc6a2665c7c664b54a74660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::notMin</definition>
        <argsstring>(Home home, SetVar s, IntVar x)</argsstring>
        <name>notMin</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Post propagator that propagates that <emphasis>x</emphasis> is not the minimal element of <emphasis>s</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="880" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetConnect_1ga0ce1eca58f5f2b1b3ce55f90f3c0a3a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::min</definition>
        <argsstring>(Home home, SetVar s, IntVar x, Reify r)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post reified propagator for <emphasis>b</emphasis> iff <emphasis>x</emphasis> is the minimal element of <emphasis>s</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="885" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetConnect_1gab8a883c0e5057fa3f745b0b79c66f015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::max</definition>
        <argsstring>(Home home, SetVar s, IntVar x)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Post propagator that propagates that <emphasis>x</emphasis> is the maximal element of <emphasis>s</emphasis>, and that <emphasis>s</emphasis> is not empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="890" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetConnect_1gabf6bc0bf197dcdcdcf9b306d26c0c64c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::notMax</definition>
        <argsstring>(Home home, SetVar s, IntVar x)</argsstring>
        <name>notMax</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Post propagator that propagates that <emphasis>x</emphasis> is not the maximal element of <emphasis>s</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="895" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetConnect_1gaee13f4f654ac62a9fc81aeb52e0f5cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::max</definition>
        <argsstring>(Home home, SetVar s, IntVar x, Reify r)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1Reify" kindref="compound">Reify</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post reified propagator for <emphasis>b</emphasis> iff <emphasis>x</emphasis> is the maximal element of <emphasis>s</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="900" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetConnect_1gaa8f17df0c9e254bec3b2517cafb688d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::cardinality</definition>
        <argsstring>(Home home, SetVar s, IntVar x)</argsstring>
        <name>cardinality</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="370">$ |s|=x $</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetConnect_1ga5b279613cd3b2d155e0ceec9bb462bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::weights</definition>
        <argsstring>(Home home, IntSharedArray elements, IntSharedArray weights, SetVar x, IntVar y)</argsstring>
        <name>weights</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>elements</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelIntElement_1ga43a69cc22f6483357a3cb7febc7b0866" kindref="member">IntSharedArray</ref></type>
          <declname>weights</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="424">$y = \mathrm{weight}(x)$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The weights are given as pairs of elements and their weight: <formula id="425">$\mathrm{weight}(\mathrm{elements}_i) = \mathrm{weights}_i$</formula></para><para>The upper bound of <emphasis>x</emphasis> is constrained to contain only elements from <emphasis>elements</emphasis>. The weight of a set is the sum of the weights of its elements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="917" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetChannel_1gaef6fbe67a64e9c5877b4b13ec5c673ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::channel</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, const SetVarArgs &amp;y)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="360">$x_i=j \Leftrightarrow i\in y_j$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetChannel_1ga6b8d053f4f18015b1734fd15cffc7e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::channelSorted</definition>
        <argsstring>(Home home, const IntVarArgs &amp;x, SetVar y)</argsstring>
        <name>channelSorted</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="347">$\{x_0,\dots,x_{n-1}\}=y$</formula> and <formula id="426">$x_i&lt;x_{i+1}$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="936" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetChannel_1ga1d9f9391fb555f4e1e921d06f9793d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::channel</definition>
        <argsstring>(Home home, const BoolVarArgs &amp;x, SetVar y)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1BoolVarArgs" kindref="compound">BoolVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="361">$x_i=1 \Leftrightarrow i\in y$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="940" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetChannel_1ga192c00edd2758738bd96a203561fc3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::channel</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, const SetVarArgs &amp;y)</argsstring>
        <name>channel</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="363">$j\in x_i \Leftrightarrow i\in y_j$</formula>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="944" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetPrecede_1gaa3de4f3c3e745ee2f541c30bd2c83cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::precede</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, int s, int t)</argsstring>
        <name>precede</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Post propagator that <emphasis>s</emphasis> precedes <emphasis>t</emphasis> in <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This constraint enforces that if there exists <formula id="287">$j$</formula> such that <formula id="427">$s\notin x_j\land t\in x_j$</formula>, then there exists <formula id="428">$i&lt;j$</formula> such that <formula id="429">$s\in x_i\land t\notin x_i$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="960" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetPrecede_1gaba9906b1d4722c40aee016498d440383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::precede</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, const IntArgs &amp;c)</argsstring>
        <name>precede</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Post propagator that successive values in <emphasis>c</emphasis> precede each other in <emphasis>x</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="965" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetElement_1gad2730b32e186604802ed7b0f28379789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, SetOpType op, const SetVarArgs &amp;x, SetVar y, SetVar z, const IntSet &amp;u=IntSet(Set::Limits::min, Set::Limits::max))</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>u</declname>
          <defval><ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref>(<ref refid="namespaceGecode_1_1Set_1_1Limits_1a768af29a2cbf9eec75b4376b325f6cc4" kindref="member">Set::Limits::min</ref>, <ref refid="namespaceGecode_1_1Set_1_1Limits_1aa0057c6b80521aaf8485343580d0eed5" kindref="member">Set::Limits::max</ref>)</defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="432">$ z=\diamond_{\mathit{op}}\langle x_0,\dots,x_{n-1}\rangle[y] $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>y</emphasis> is the empty set, the usual conventions for set operations apply: an empty union is empty, while an empty intersection is the universe, which can be given as the optional parameter <emphasis>u</emphasis>.</para><para>The indices for <emphasis>y</emphasis> start at 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="991" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetElement_1ga0e80dfffd3bdd6702f8f41b1ece97efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, SetOpType op, const IntVarArgs &amp;x, SetVar y, SetVar z, const IntSet &amp;u=IntSet(Set::Limits::min, Set::Limits::max))</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntVarArgs" kindref="compound">IntVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>u</declname>
          <defval><ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref>(<ref refid="namespaceGecode_1_1Set_1_1Limits_1a768af29a2cbf9eec75b4376b325f6cc4" kindref="member">Set::Limits::min</ref>, <ref refid="namespaceGecode_1_1Set_1_1Limits_1aa0057c6b80521aaf8485343580d0eed5" kindref="member">Set::Limits::max</ref>)</defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="433">$ z=\diamond_{\mathit{op}}\langle \{x_0\},\dots,\{x_{n-1}\}\rangle[y] $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>y</emphasis> is the empty set, the usual conventions for set operations apply: an empty union is empty, while an empty intersection is the universe, which can be given as the optional parameter <emphasis>u</emphasis>.</para><para>The indices for <emphasis>y</emphasis> start at 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1004" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetElement_1gaaa2662e0256f529c5e9ca5f88d0c6e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, SetOpType op, const IntSetArgs &amp;x, SetVar y, SetVar z, const IntSet &amp;u=IntSet(Set::Limits::min, Set::Limits::max))</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="group__TaskModelIntArgs_1ga07f276f408888e46205328c9ec668bea" kindref="member">IntSetArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>u</declname>
          <defval><ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref>(<ref refid="namespaceGecode_1_1Set_1_1Limits_1a768af29a2cbf9eec75b4376b325f6cc4" kindref="member">Set::Limits::min</ref>, <ref refid="namespaceGecode_1_1Set_1_1Limits_1aa0057c6b80521aaf8485343580d0eed5" kindref="member">Set::Limits::max</ref>)</defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="432">$ z=\diamond_{\mathit{op}}\langle x_0,\dots,x_{n-1}\rangle[y] $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>y</emphasis> is the empty set, the usual conventions for set operations apply: an empty union is empty, while an empty intersection is the universe, which can be given as the optional parameter <emphasis>u</emphasis>.</para><para>The indices for <emphasis>y</emphasis> start at 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1017" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetElement_1ga013803cc97c088dbe4d96a4528289683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, SetOpType op, const IntArgs &amp;x, SetVar y, SetVar z, const IntSet &amp;u=IntSet(Set::Limits::min, Set::Limits::max))</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1a5ea96737b3b12bbd5e67d43e20ea2e09" kindref="member">SetOpType</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntArgs" kindref="compound">IntArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref> &amp;</type>
          <declname>u</declname>
          <defval><ref refid="classGecode_1_1IntSet" kindref="compound">IntSet</ref>(<ref refid="namespaceGecode_1_1Set_1_1Limits_1a768af29a2cbf9eec75b4376b325f6cc4" kindref="member">Set::Limits::min</ref>, <ref refid="namespaceGecode_1_1Set_1_1Limits_1aa0057c6b80521aaf8485343580d0eed5" kindref="member">Set::Limits::max</ref>)</defval>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="433">$ z=\diamond_{\mathit{op}}\langle \{x_0\},\dots,\{x_{n-1}\}\rangle[y] $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>y</emphasis> is the empty set, the usual conventions for set operations apply: an empty union is empty, while an empty intersection is the universe, which can be given as the optional parameter <emphasis>u</emphasis>.</para><para>The indices for <emphasis>y</emphasis> start at 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1030" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetElement_1ga3bfa47219342fcad6d216a2e7990f8f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, IntVar y, SetVar z)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="434">$ z=\langle x_0,\dots,x_{n-1}\rangle[y] $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The indices for <emphasis>y</emphasis> start at 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1039" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetElement_1gaa956b89a9f379ebcc84dc05c7acaf99f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, const IntSetArgs &amp;s, IntVar y, SetVar z)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="group__TaskModelIntArgs_1ga07f276f408888e46205328c9ec668bea" kindref="member">IntSetArgs</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="435">$ z=\langle s_0,\dots,s_{n-1}\rangle[y] $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>The indices for <emphasis>y</emphasis> start at 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1047" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetElement_1gae0e36d4b33fb04fd3bd59ff7bb4ec050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, const IntSetArgs &amp;a, IntVar x, int w, IntVar y, int h, SetVar z)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="group__TaskModelIntArgs_1ga07f276f408888e46205328c9ec668bea" kindref="member">IntSetArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="241">$ a_{x+w\cdot y}=z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Set_1_1ArgumentSizeMismatch" kindref="compound">Set::ArgumentSizeMismatch</ref>, if <formula id="242">$ w\cdot h\neq|a|$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1055" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetElement_1ga44057ff2d77577f912754d9926cc59fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::element</definition>
        <argsstring>(Home home, const SetVarArgs &amp;a, IntVar x, int w, IntVar y, int h, SetVar z)</argsstring>
        <name>element</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1IntVar" kindref="compound">IntVar</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Post propagator for <formula id="241">$ a_{x+w\cdot y}=z$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para>Throws an exception of type <ref refid="classGecode_1_1Set_1_1ArgumentSizeMismatch" kindref="compound">Set::ArgumentSizeMismatch</ref>, if <formula id="242">$ w\cdot h\neq|a|$</formula>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1063" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetExec_1gae1450c668e421012160de8dfbdd999a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::wait</definition>
        <argsstring>(Home home, SetVar x, void(*c)(Space &amp;home))</argsstring>
        <name>wait</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Execute <emphasis>c</emphasis> when <emphasis>x</emphasis> becomes assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1079" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetExec_1ga320ab3611def4ae35dac2d31f7d0c8d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT void</type>
        <definition>GECODE_SET_EXPORT void Gecode::wait</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, void(*c)(Space &amp;home))</argsstring>
        <name>wait</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="classGecode_1_1Space" kindref="compound">Space</ref> &amp;home)</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Execute <emphasis>c</emphasis> when all variables in <emphasis>x</emphasis> become assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1082" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranch_1ga1db0e4935a1c5310e7d3cff8720a08fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_SET_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, SetVarBranch vars, SetValBranch vals, SetBranchFilter bf=NULL, SetVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1gadd48606a449c14addbecf150180e38dd" kindref="member">SetBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1abb7f11da31449075a112df0d3624e8af" kindref="member">SetVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranch_1gac97674edc8861e58dffa0c7fcf893b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_SET_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, TieBreak&lt; SetVarBranch &gt; vars, SetValBranch vals, SetBranchFilter bf=NULL, SetVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref> &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1gadd48606a449c14addbecf150180e38dd" kindref="member">SetBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1abb7f11da31449075a112df0d3624e8af" kindref="member">SetVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranch_1gad4a8a67f7f6fdb23e4322b6b69a9b106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_SET_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, SetVar x, SetValBranch vals, SetVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1abb7f11da31449075a112df0d3624e8af" kindref="member">SetVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranch_1ga4a2d1fbca126817cbe07bbd111690bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_SET_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, SetAssign vals, SetBranchFilter bf=NULL, SetVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1gadd48606a449c14addbecf150180e38dd" kindref="member">SetBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1abb7f11da31449075a112df0d3624e8af" kindref="member">SetVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign all <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1550" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranch_1gac94584a75ebe5ab875997f0586602378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_SET_EXPORT BrancherHandle Gecode::assign</definition>
        <argsstring>(Home home, SetVar x, SetAssign vals, SetVarValPrint vvp=NULL)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVar" kindref="compound">SetVar</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetAssign" kindref="compound">SetAssign</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1abb7f11da31449075a112df0d3624e8af" kindref="member">SetVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Assign <emphasis>x</emphasis> with value selection <emphasis>vals</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1ac6d8cc94510e97cc88b486012323f466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_SET_EXPORT SymmetryHandle Gecode::VariableSymmetry</definition>
        <argsstring>(const SetVarArgs &amp;x)</argsstring>
        <name>VariableSymmetry</name>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Variables in <emphasis>x</emphasis> are interchangeable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a8c2920198201a5d4809ff931d2100801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT <ref refid="classGecode_1_1SymmetryHandle" kindref="compound">SymmetryHandle</ref></type>
        <definition>GECODE_SET_EXPORT SymmetryHandle Gecode::VariableSequenceSymmetry</definition>
        <argsstring>(const SetVarArgs &amp;x, int ss)</argsstring>
        <name>VariableSequenceSymmetry</name>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
<para>Variable sequences in <emphasis>x</emphasis> of size <emphasis>ss</emphasis> are interchangeable. </para>        </briefdescription>
        <detaileddescription>
<para>The size of <emphasis>x</emphasis> must be a multiple of <emphasis>ss</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1574" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranch_1ga04ad4831395b698cfe3cb25b16362d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_SET_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, SetVarBranch vars, SetValBranch vals, const Symmetries &amp;syms, SetBranchFilter bf=NULL, SetVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref></type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Symmetries" kindref="compound">Symmetries</ref> &amp;</type>
          <declname>syms</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1gadd48606a449c14addbecf150180e38dd" kindref="member">SetBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1abb7f11da31449075a112df0d3624e8af" kindref="member">SetVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis> with symmetry breaking. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__TaskModelSetBranch_1ga4c99114bbb653a5b96a2d284e72198c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GECODE_SET_EXPORT <ref refid="classGecode_1_1BrancherHandle" kindref="compound">BrancherHandle</ref></type>
        <definition>GECODE_SET_EXPORT BrancherHandle Gecode::branch</definition>
        <argsstring>(Home home, const SetVarArgs &amp;x, TieBreak&lt; SetVarBranch &gt; vars, SetValBranch vals, const Symmetries &amp;syms, SetBranchFilter bf=NULL, SetVarValPrint vvp=NULL)</argsstring>
        <name>branch</name>
        <param>
          <type><ref refid="classGecode_1_1Home" kindref="compound">Home</ref></type>
          <declname>home</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1SetVarArgs" kindref="compound">SetVarArgs</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1TieBreak" kindref="compound">TieBreak</ref>&lt; <ref refid="classGecode_1_1SetVarBranch" kindref="compound">SetVarBranch</ref> &gt;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="classGecode_1_1SetValBranch" kindref="compound">SetValBranch</ref></type>
          <declname>vals</declname>
        </param>
        <param>
          <type>const <ref refid="classGecode_1_1Symmetries" kindref="compound">Symmetries</ref> &amp;</type>
          <declname>syms</declname>
        </param>
        <param>
          <type><ref refid="group__TaskModelSetBranch_1gadd48606a449c14addbecf150180e38dd" kindref="member">SetBranchFilter</ref></type>
          <declname>bf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="namespaceGecode_1abb7f11da31449075a112df0d3624e8af" kindref="member">SetVarValPrint</ref></type>
          <declname>vvp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Branch over <emphasis>x</emphasis> with tie-breaking variable selection <emphasis>vars</emphasis> and value selection <emphasis>vals</emphasis> with symmetry breaking. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/set.hh" line="1594" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a3f77d74c9e355a9b9a5072feb6e5475f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Gecode::ptr_cast</definition>
        <argsstring>(void *p)</argsstring>
        <name>ptr_cast</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Cast <emphasis>p</emphasis> into pointer of type <emphasis>T</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/cast.hpp" line="42" column="1" bodyfile="/usr/include/gecode/support/cast.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1af6c0a7abb39e705ec1243b9e6e84023c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F1</type>
          </param>
          <param>
            <type>class F2</type>
          </param>
        </templateparamlist>
        <type>F1</type>
        <definition>F1 Gecode::function_cast</definition>
        <argsstring>(F2 f)</argsstring>
        <name>function_cast</name>
        <param>
          <type>F2</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Cast function pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/cast.hpp" line="49" column="1" bodyfile="/usr/include/gecode/support/cast.hpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1a9e30042e185f590807359939ab9e83ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>forceinline T</type>
        <definition>forceinline T Gecode::ptr_cast</definition>
        <argsstring>(void *p)</argsstring>
        <name>ptr_cast</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Cast <emphasis>p</emphasis> into pointer of type <emphasis>T</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/cast.hpp" line="54" column="1" bodyfile="/usr/include/gecode/support/cast.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceGecode_1aff089008276a136d7c05397fe4ed69e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F1</type>
          </param>
          <param>
            <type>class F2</type>
          </param>
        </templateparamlist>
        <type>forceinline F1</type>
        <definition>forceinline F1 Gecode::function_cast</definition>
        <argsstring>(F2 f)</argsstring>
        <name>function_cast</name>
        <param>
          <type>F2</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Cast function pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/gecode/support/cast.hpp" line="60" column="1" bodyfile="/usr/include/gecode/support/cast.hpp" bodystart="60" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Gecode toplevel namespace </para>    </briefdescription>
    <detaileddescription>
<para>The <ref refid="namespaceGecode" kindref="compound">Gecode</ref> namespace contains nested namespaces for the various submodules (for example <ref refid="namespaceGecode_1_1Int" kindref="compound">Int</ref> for the definition of integer propagator classes). Functionality that is used for interfacing (search engines, variables, and so on) or belongs to the Gecode Kernel is contained directly in the <ref refid="namespaceGecode" kindref="compound">Gecode</ref> namespace. </para>    </detaileddescription>
    <location file="/usr/include/gecode/driver/options.hpp" line="41" column="1"/>
  </compounddef>
</doxygen>
